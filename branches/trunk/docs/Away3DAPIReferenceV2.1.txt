Away3D API Reference: V2.1
==========================

  away3d.animation
    Animator : 

  away3d.blockers
    ConvexBlock : Convex hull blocking all drawing primitives underneath.

  away3d.cameras
    Camera3D : Basic camera used to resolve a view.
    HoverCamera3D : Extended camera used to hover round a specified target object.
    TargetCamera3D : Extended camera used to automatically look at a specified target object.

  away3d.containers
    ILODObject : Interface for objects that can toggle their visibily depending on view and distance to camera
    IPhysicsScene : 
    DebugObjectContainer3D : Extension of
    LODObject : 3d object container that is drawn only if its scaling to perspective falls within a given range.
    ObjectContainer3D : 3d object container node for other 3d objects in a scene
    Scene3D : The root container of all 3d objects in a single scene
    View3D : Sprite container used for storing camera, scene, session, renderer and clip references, and resolving mouse events

  away3d.core.base
    IAnimation : Interface for objects that can animate the vertex values in a mesh
    IFrame : Interface for objects that store the vertex values for a single frame of animation
    IMeshElement : Interface for objects that define a 3d element of a mesh
    Animation : Holds information about the current state of a mesh animation.
    AnimationFrame : Holds information about a single animation frame.
    AnimationGroup : Holds information about a list of animation sequences.
    AnimationSequence : Holds information about a sequence of animation frames.
    BaseMesh : Abstract 3d object containing unspecified elements.
    BaseMeshElement : Basic 3d element object Not intended for direct use - use
    Face : A triangle element used in the mesh object
    Frame : Holds vertexposition information about a single animation frame.
    Mesh : 3d object containing face and segment elements
    Morpher : Keyframe animation morpher
    Object3D : Base class for all 3d objects.
    Segment : A line element used in the wiremesh and mesh object
    UV : Texture coordinates value object.
    Vertex : A vertex coordinate value object.
    VertexPosition : Vertex position value object.
    WireMesh : 3d object containing segment elements

  away3d.core.block
    IBlockerConsumer : Interface for containers capable of storing blockers.
    IBlockerProvider : Interface for objects that provide blocker instances for occlusion culling in the renderer.
    Blocker : Abstract primitive that can block other primitives from drawing
    BlockerArray : Array for storing blocker objects
    ConvexBlocker : Convex hull primitive that blocks all primitives behind and contained completely inside.

  away3d.core.clip
    Clipping : Base clipping class for no clipping.
    RectangleClipping : Rectangle clipping

  away3d.core.draw
    IPrimitiveConsumer : Interface for containers capable of drawing primitives
    IPrimitiveProvider : Interface for objects that provide drawing primitives to the rendering process
    DrawBitmap : Unscaled bitmap drawing primitive
    DrawDisplayObject : Displayobject container drawing primitive.
    DrawFog : Fog drawing primitive
    DrawGroup : Group drawing primitive.
    DrawPrimitive : Abstract class for all drawing primitives
    DrawScaledBitmap : Scaled bitmap primitive
    DrawSegment : Line segment drawing primitive
    DrawTriangle : Triangle drawing primitive
    Line2D : Line in 2D space
    Plane3D : Plane in 3D space
    PrimitiveArray : Array for storing drawing primitives.
    PrimitiveQuadrantTree : Quadrant tree for storing drawing primitives
    PrimitiveQuadrantTreeNode : Quadrant tree node
    PrimitiveVolumeBlock : Volume block tree for storing drawing primitives
    PrimitiveVolumeBlockNode : Volume block tree node
    ScreenVertex : representation of a 3d vertex resolved to the view.

  away3d.core.filter
    IPrimitiveFilter : Interface for filters that work on primitive arrays
    IPrimitiveQuadrantFilter : Interface for filters that work on primitive quadrant trees
    IPrimitiveVolumeBlockFilter : Interface for filters that work on primitive volume blocks
    AnotherRivalFilter : Corrects triangle z-sorting
    FogFilter : Adds fog layers to a view and provides automatic farfield filtering for primitives outside the furthest fog layers.
    QuadrantRiddleFilter : Splits all intersecting triangles and line segments.
    ZDepthFilter : Defines a maximum z value for rendering primitives
    ZSortFilter : Sorts drawing primitives by z coordinate.

  away3d.core.light
    ILightConsumer : Interface for containers capable of storing lighting info
    ILightProvider : Interface for objects that provide lighting to the scene
    AmbientLight : Ambient light primitive
    DirectionalLight : Directional light primitive.
    LightArray : Array for storing light primitives.
    LightPrimitive : Abstract light primitve.
    PointLight : Point light primitive

  away3d.core.math
    Matrix3D : A 3D transformation 4x3 matrix
    Number3D : A point in 3D space.
    Quaternion : A Quaternion object.

  away3d.core.render
    IRenderer : Interface for renderers capable of rendering a scene to a view
    AbstractRenderSession : Abstract Drawing session object containing the method used for drawing the view to screen.
    BasicRenderer : Default renderer for a view.
    BitmapRenderSession : Drawing session object that renders all drawing primitives into a
    FindHit : Finds the object that is rendered under a certain view coordinate.
    Projection : Data object for camera transform, focus and zoom properties.
    QuadrantRenderer : Renderer that uses quadrant tree for storing and operating drawing primitives.
    Renderer : A static class for an easy access to the most useful renderers.
    SpriteRenderSession : Drawing session object that renders all drawing primitives into a

  away3d.core.stats
    Stats : 

  away3d.core.traverse
    BlockerTraverser : Traverser that gathers blocker primitives for occlusion culling.
    PrimitiveTraverser : Traverser that gathers drawing primitives to render the scene.
    ProjectionTraverser : Traverser that resolves the transform tree in a scene, ready for rendering.
    TickTraverser : Traverser that fires a time-based method for all objects in scene
    Traverser : Abstract class for all traverser that perform actions on the whole scene.

  away3d.core.utils
    IClonable : Interface for object that can be cloned
    CacheStore : 
    Cast : Helper class for casting assets to usable objects
    CastError : 
    Color : Static helper class for color manipulations
    Debug : Class for emmiting debuging messages, warnings and errors
    DofCache : Provides static pre-blurred bitmap images for depth of field-effect when used together with billboarded sprites, such as particles.
    FaceDictionaryVO : 
    FaceVO : 
    Init : Convinient object initialization support
    ValueObject : 

  away3d.events
    AnimationEvent : Passed as a parameter when an animation event occurs
    FaceEvent : Passed as a parameter when a face event occurs
    LoaderEvent : Passed as a parameter when a 3d object loader event occurs
    MaterialEvent : Passed as a parameter when a material event occurs
    MeshElementEvent : Passed as a parameter when a meshelement event occurs
    MouseEvent3D : Passed as a parameter when a 3d mouse event occurs
    Object3DEvent : Passed as a parameter when a 3d object event occurs
    SegmentEvent : Passed as a parameter when a segment event occurs

  away3d.extrusions
    CollisionMap : 
    Elevation : 
    ElevationReader : 
    Lathe : 
    SegmentsExtrude : 
    SkinExtrude : 

  away3d.lights
    AmbientLight3D : Lightsource that colors all shaded materials evenly from any angle
    DirectionalLight3D : Lightsource that colors all shaded materials proportional to the dot product of the offset vector with the normal vector.
    PointLight3D : Lightsource that colors all shaded materials proportional to the dot product of the distance vector with the normal vector.

  away3d.loaders
    Ase : File loader for the ASE file format.
    Collada : File loader for the Collada file format.
    CubeLoader : Default loader class used as a placeholder for loading 3d content
    Kmz : File loader for the KMZ 4 file format (exported from Google Sketchup).
    Max3DS : File loader for the 3DS file format.
    Md2 : File loader for the Md2 file format.
    Md2still : File loader for the Md2 file format (non-animated version).
    Obj : File loader for the OBJ file format.
    Object3DLoader : Abstract loader class used as a placeholder for loading 3d content

  away3d.loaders.data
    ContainerData : Data class for 3d object containers.
    FaceData : Data class for a face object.
    MaterialData : Data class for the material data of a face.
    MeshData : Data class for the mesh data of a 3d object
    MeshMaterialData : Data class for teh material of a 3d object
    ObjectData : Data class for a gneric 3d object

  away3d.loaders.utils
    MaterialLibrary : Store for all materials associated with an externally loaded file.
    TextureLoader : Used to store the name and loader reference of an external texture image.
    TextureLoadQueue : Creates a queue of textures that load sequentially

  away3d.materials
    IFogMaterial : Interface for fog filter materials
    ILayerMaterial : Interface for materials that can be layered using
    IMaterial : Interface for all objects that can serve as a material
    ISegmentMaterial : Interface for materials that are capable of drawing line segments.
    ITriangleMaterial : Interface for materials that are capable of rendering triangle faces.
    IUpdatingMaterial : Interface for materials that require updating every render loop
    IUVMaterial : Interface for materials that use uv texture coordinates
    AnimatedBitmapMaterial : Bitmap material that allows fast rendering of animations by caching bitmapdata objects for each frame.
    BitmapFileMaterial : Bitmap material that loads it's texture from an external bitmapasset file.
    BitmapMaterial : Basic bitmap material
    BitmapMaterialContainer : Container for caching multiple bitmapmaterial objects.
    CenterLightingMaterial : Abstract class for materials that calculate lighting for the face's center Not intended for direct use - use
    ColorMaterial : Material for solid color drawing
    CompositeMaterial : Container for layering multiple material objects.
    Dot3BitmapMaterial : Bitmap material with DOT3 shading.
    Dot3BitmapMaterialCache : Bitmap material with cached DOT3 shading.
    Dot3MovieMaterial : Animated movie material with DOT3 shading.
    EnviroBitmapMaterial : Bitmap material with environment shading.
    EnviroBitmapMaterialCache : Bitmap material with cached environment shading.
    EnviroColorMaterial : Color material with environment shading.
    MovieMaterial : Animated movie material.
    PhongBitmapMaterial : Bitmap material with phong shading.
    PhongBitmapMaterialCache : Bitmap material with cached phong shading.
    PhongColorMaterial : Color material with phong shading.
    PhongColorMaterialCache : Color material with cached phong shading.
    PhongMovieMaterial : Animated movie material with phong shading.
    ShadingColorMaterial : Color material with flat shading.
    TransformBitmapMaterial : Basic bitmap texture material
    WhiteShadingBitmapMaterial : Bitmap material with flat white lighting
    WireColorMaterial : Wire material for solid color drawing with optional face border outlining
    WireframeMaterial : Wire material for face border outlining only

  away3d.materials.shaders
    AbstractShader : Base class for shaders.
    AmbientShader : Shader class for ambient lighting
    DiffuseDot3Shader : Diffuse Dot3 shader class for directional lighting.
    DiffusePhongShader : Diffuse shader class for directional lighting.
    EnviroShader : Shader class for environment lighting.
    SpecularPhongShader : Specular shader class for directional lighting.

  away3d.primitives
    AbstractPrimitive : Creates a 3d cone primitive.
    AbstractWirePrimitive : Creates a 3d cone primitive.
    Cone : Creates a 3d cone primitive.
    Cube : Creates a 3d cube primitive.
    Cylinder : Creates a 3d cylinder primitive.
    GeodesicSphere : Creates a 3d geodesic sphere primitive.
    GridPlane : Creates a 3d grid primitive.
    LineSegment : Creates a 3d line segment.
    LogoCube : Creates a 3d cube primitive with the Away3d logo.
    Plane : Creates a 3d plane primitive.
    RegularPolygon : Creates a regular polygon.
    SeaTurtle : Creates a sea turtle model (exported using asAS3Class).
    Skybox : QTVR-style 360 panorama renderer that is initialized with six images.
    Skybox6 : QTVR-style 360 panorama renderer that is initialized with one solid image.
    Sphere : Creates a 3d sphere primitive.
    Torus : Creates a 3d torus primitive.
    Triangle : Creates a 3d triangle.
    Trident : Creates an axis trident.
    WireCircle : Creates a 3d wire polygon.
    WireCone : Creates a 3d wire cone primitive.
    WireCube : Creates a 3d wire cube primitive.
    WireCylinder : Creates a 3d wire cylinder primitive.
    WirePlane : Creates a 3d wire plane primitive.
    WireSphere : Creates a 3d wire sphere primitive.
    WireTorus : Creates a 3d wire torus primitive.

  away3d.primitives.data
    CubeMaterialsData : Data structure for individual materials on the sides of a cube.

  away3d.sprites
    DirSprite2D : Spherical billboard (always facing the camera) sprite object that uses an array of bitmapData objects defined with viewing direction vectors.
    DofSprite2D : Spherical billboard (always facing the camera) sprite object that uses a cached array of bitmapData objects as it's texture.
    MovieClipSprite : Spherical billboard (always facing the camera) sprite object that uses a movieclip as it's texture.
    Sprite2D : Spherical billboard (always facing the camera) sprite object that uses a bitmapData object as it's texture.

  away3d.test
    BaseDemo : Base class for Away3D demos
    Button : Simple rounded rectangle button
    Panel : Simple rounded rectangle panel
    Slide : Represents a single slide of the demo


AbstractPrimitive
=================
  Package : away3d.primitives
  Class : public class AbstractPrimitive
  Inheritance : Mesh, BaseMesh, Object3D
  Subclasses : Cone, Cube, Cylinder, GeodesicSphere, Plane, RegularPolygon, Sphere, Torus
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
        sceneTransform : Matrix3D (AbstractPrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (AbstractPrimitive)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (AbstractPrimitive)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    sceneTransform:Matrix3D[read-only]
      Returns the transformation of the 3d object, relative to the global coordinates of the Scene3D.
      Implementation
       public function get sceneTransform():Matrix3D

  CONSTRUCTOR DETAIL

    public function AbstractPrimitive(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties
  METHOD DETAIL

    public function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.
  CODE EXAMPLES

    
      There are currently no examples for this class


AbstractRenderSession
=====================
  Package : away3d.core.render
  Class : public class AbstractRenderSession
  Subclasses : BitmapRenderSession, SpriteRenderSession
  Description : 

  PUBLIC PROPERTIES
        children : Dictionary - Dictionary of child displayobjects. (AbstractRenderSession)
        graphics : Graphics - Reference to the current graphics object being used for drawing. (AbstractRenderSession)
        lightarray : LightArray - Defines the light provider object for the render sesion. (AbstractRenderSession)
        newLayer : Sprite - Holds the last added layer sprite. (AbstractRenderSession)
        sessions : Dictionary - Dictionary of child sessions. (AbstractRenderSession)
        spriteLayers : Array - Dictionary of sprite layers for rendering composite materials. (AbstractRenderSession)
        view : View3D - Defines the view object used for the render session. (AbstractRenderSession)

  PUBLIC METHODS
        addDisplayObject(child:DisplayObject):void - Adds a display object to the render session display list. (AbstractRenderSession)
        addLayerObject(child:Sprite):void - Adds a layer sprite to the render session display list. (AbstractRenderSession)
        clear():void - Clears the render session. (AbstractRenderSession)
        clone():AbstractRenderSession - Duplicates the render session's properties to another render session. (AbstractRenderSession)
        flush():void - Flushes any cached drawing operations to screen. (AbstractRenderSession)
        getContainer(view:View3D):DisplayObject - Returns a display object representing the container for the specified view. (AbstractRenderSession)
        registerChildSession(session:AbstractRenderSession):void - Adds a session as a child of the session object. (AbstractRenderSession)
        renderBitmap(bitmap:BitmapData, v0:ScreenVertex, smooth:Boolean = false):void - Draws a non-scaled bitmap into the graphics object. (AbstractRenderSession)
        renderFogColor(color:int, alpha:Number):void - Draws a fog element into the graphics object. (AbstractRenderSession)
        renderLine(v0:ScreenVertex, v1:ScreenVertex, width:Number, color:uint, alpha:Number):void - Draws a segment element into the graphics object. (AbstractRenderSession)
        renderScaledBitmap(primitive:DrawScaledBitmap, bitmap:BitmapData, mapping:Matrix, smooth:Boolean = false):void - Draws a bitmap with a precalculated matrix into the graphics object. (AbstractRenderSession)
        renderTriangleBitmap(bitmap:BitmapData, map:Matrix, v0:ScreenVertex, v1:ScreenVertex, v2:ScreenVertex, smooth:Boolean, repeat:Boolean, layerGraphics:Graphics = null):void - Draws a triangle element with a bitmap texture into the graphics object. (AbstractRenderSession)
        renderTriangleColor(color:int, alpha:Number, v0:ScreenVertex, v1:ScreenVertex, v2:ScreenVertex):void - Draws a triangle element with a fill color into the graphics object. (AbstractRenderSession)
        renderTriangleLine(width:Number, color:int, alpha:Number, v0:ScreenVertex, v1:ScreenVertex, v2:ScreenVertex):void - Draws a wire triangle element into the graphics object. (AbstractRenderSession)
        renderTriangleLineFill(width:Number, color:int, alpha:Number, wirecolor:int, wirealpha:Number, v0:ScreenVertex, v1:ScreenVertex, v2:ScreenVertex):void - Draws a wire triangle element with a fill color into the graphics object. (AbstractRenderSession)

  PROTECTED METHODS
        createLayer():void - Creates a new render layer for rendering composite materials. (AbstractRenderSession)

  PROPERTY DETAIL

    public var children:Dictionary 
      Dictionary of child displayobjects.

    arcane var doActive:Array 
      Array for storing added displayobjects to the canvas

    arcane var doStore:Array 
      Array for storing old displayobjects to the canvas

    public var graphics:Graphics 
      Reference to the current graphics object being used for drawing.

    lightarray:LightArray[read-write]
      Defines the light provider object for the render sesion.
      Implementation
       public function get lightarray():LightArray
       public function set lightarray(value:LightArray):void


    public var newLayer:Sprite 
      Holds the last added layer sprite.

    public var sessions:Dictionary 
      Dictionary of child sessions.

    public var spriteLayers:Array 
      Dictionary of sprite layers for rendering composite materials.
      See also
      away3d.materials.CompositeMaterial.renderTriangle()


    view:View3D[read-write]
      Defines the view object used for the render session.
      Implementation
       public function get view():View3D
       public function set view(value:View3D):void

  METHOD DETAIL

    public function addDisplayObject(child:DisplayObject):void 
      Adds a display object to the render session display list.
      Parameters
       child:DisplayObject - The display object to add.

    public function addLayerObject(child:Sprite):void 
      Adds a layer sprite to the render session display list. Doesn't update graphics so that elements in comosite materials can render in separate layers.
      Parameters
       child:Sprite - The display object to add.

    public function clear():void 
      Clears the render session.

    public function clone():AbstractRenderSession 
      Duplicates the render session's properties to another render session.
      Returns
      AbstractRenderSession - The new render session instance with duplicated properties applied

    protected function createLayer():void 
      Creates a new render layer for rendering composite materials.
      See also
      away3d.materials.CompositeMaterial.renderTriangle()


    public function flush():void 
      Flushes any cached drawing operations to screen.

    public function getContainer(view:View3D):DisplayObject 
      Returns a display object representing the container for the specified view.
      Parameters
       view:View3D - The view object being rendered.
       Returns
       DisplayObject - The display object container.

    public function registerChildSession(session:AbstractRenderSession):void 
      Adds a session as a child of the session object.
      Parameters
       session:AbstractRenderSession - The session object to be added as a child.

    public function renderBitmap(bitmap:BitmapData, v0:ScreenVertex, smooth:Boolean = false):void 
      Draws a non-scaled bitmap into the graphics object.
      Parameters
       bitmap:BitmapData
       v0:ScreenVertex
       smooth:Boolean (default = false)

    public function renderFogColor(color:int, alpha:Number):void 
      Draws a fog element into the graphics object.
      Parameters
       color:int
       alpha:Number

    public function renderLine(v0:ScreenVertex, v1:ScreenVertex, width:Number, color:uint, alpha:Number):void 
      Draws a segment element into the graphics object.
      Parameters
       v0:ScreenVertex
       v1:ScreenVertex
       width:Number
       color:uint
       alpha:Number

    public function renderScaledBitmap(primitive:DrawScaledBitmap, bitmap:BitmapData, mapping:Matrix, smooth:Boolean = false):void 
      Draws a bitmap with a precalculated matrix into the graphics object.
      Parameters
       primitive:DrawScaledBitmap
       bitmap:BitmapData
       mapping:Matrix
       smooth:Boolean (default = false)

    public function renderTriangleBitmap(bitmap:BitmapData, map:Matrix, v0:ScreenVertex, v1:ScreenVertex, v2:ScreenVertex, smooth:Boolean, repeat:Boolean, layerGraphics:Graphics = null):void 
      Draws a triangle element with a bitmap texture into the graphics object.
      Parameters
       bitmap:BitmapData
       map:Matrix
       v0:ScreenVertex
       v1:ScreenVertex
       v2:ScreenVertex
       smooth:Boolean
       repeat:Boolean
       layerGraphics:Graphics (default = null)

    public function renderTriangleColor(color:int, alpha:Number, v0:ScreenVertex, v1:ScreenVertex, v2:ScreenVertex):void 
      Draws a triangle element with a fill color into the graphics object.
      Parameters
       color:int
       alpha:Number
       v0:ScreenVertex
       v1:ScreenVertex
       v2:ScreenVertex

    public function renderTriangleLine(width:Number, color:int, alpha:Number, v0:ScreenVertex, v1:ScreenVertex, v2:ScreenVertex):void 
      Draws a wire triangle element into the graphics object.
      Parameters
       width:Number
       color:int
       alpha:Number
       v0:ScreenVertex
       v1:ScreenVertex
       v2:ScreenVertex

    public function renderTriangleLineFill(width:Number, color:int, alpha:Number, wirecolor:int, wirealpha:Number, v0:ScreenVertex, v1:ScreenVertex, v2:ScreenVertex):void 
      Draws a wire triangle element with a fill color into the graphics object.
      Parameters
       width:Number
       color:int
       alpha:Number
       wirecolor:int
       wirealpha:Number
       v0:ScreenVertex
       v1:ScreenVertex
       v2:ScreenVertex
  CODE EXAMPLES

    
      There are currently no examples for this class


AbstractShader
==============
  Package : away3d.materials.shaders
  Class : public class AbstractShader
  Inheritance  Implements : ILayerMaterial, IUpdatingMaterial
  Subclasses : AmbientShader, DiffuseDot3Shader, DiffusePhongShader, EnviroShader, SpecularPhongShader
  Description : 

  PUBLIC PROPERTIES
        blendMode : String - Defines a blendMode value for the shader bitmap. (AbstractShader)
        debug : Boolean - Determines if faces with the shader applied are drawn with outlines (AbstractShader)
        smooth : Boolean - Determines if the shader bitmap is smoothed (bilinearly filtered) when drawn to screen (AbstractShader)
        visible : Boolean - [read-only] Indicates whether the material is visible (AbstractShader)

  PROTECTED PROPERTIES
        ini : Init - Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor. (AbstractShader)

  PUBLIC METHODS
        (AbstractShader)
        renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (AbstractShader)
        renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (AbstractShader)
        updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (AbstractShader)

  PROTECTED METHODS
        clearFaceDictionary(source:Object3D, view:View3D):void - Clears face value objects when shader requires updating (AbstractShader)
        getLightingShape(layer:Sprite, light:LightPrimitive):Shape - Returns a shape object for use by light shaders (AbstractShader)
        getShape(layer:Sprite):Shape - Returns a shape object for use by environment shaders. (AbstractShader)
        renderShader(face:Face):void - Renders the shader to the specified face. (AbstractShader)

  PROPERTY DETAIL

    public var blendMode:String 
      Defines a blendMode value for the shader bitmap.

    public var debug:Boolean 
      Determines if faces with the shader applied are drawn with outlines

    protected var ini:Init 
      Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor.

    public var smooth:Boolean 
      Determines if the shader bitmap is smoothed (bilinearly filtered) when drawn to screen

    visible:Boolean[read-only]
      Indicates whether the material is visible
      Implementation
       public function get visible():Boolean

  CONSTRUCTOR DETAIL

    public function AbstractShader(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       smooth:Boolean (default = false)
       debug:Boolean (default = false)
       blendMode:String (default = BlendMode.NORMAL)
  METHOD DETAIL

    protected function clearFaceDictionary(source:Object3D, view:View3D):void 
      Clears face value objects when shader requires updating
      Parameters
       source:Object3D - The parent 3d object of the face.
       view:View3D - The view rendering the draw triangle.
       See also
       away3d.core.utils.FaceVO


    protected function getLightingShape(layer:Sprite, light:LightPrimitive):Shape 
      Returns a shape object for use by light shaders
      Parameters
       layer:Sprite - The parent layer of the triangle.
       light:LightPrimitive - The light primitive.
       Returns
       Shape - The resolved shape object to use for drawing.

    protected function getShape(layer:Sprite):Shape 
      Returns a shape object for use by environment shaders.
      Parameters
       layer:Sprite - The parent layer of the triangle
       Returns
       Shape - The resolved shape object to use for drawing

    public function renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO 
      Renders a bitmapData surface object for the speficied face.
      Parameters
       face:Face - The face object onto which the rendered sufrace is applied.
       containerRect:Rectangle - The rectangle object defining the bounds of the face in uv-space.
       parentFaceVO:FaceVO - The value object of the preceeding surface.
       Returns
       FaceVO

    public function renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void 
      Renders a material layer for the specified triangle.
      Parameters
       tri:DrawTriangle - The drawtriangle used for render information.
       layer:Sprite - The parent layer into which the triangle is drawn.
       level:int - Defines the sprite level for the layer.

    protected function renderShader(face:Face):void 
      Renders the shader to the specified face.
      Parameters
       face:Face - The face object being rendered.

    public function updateMaterial(source:Object3D, view:View3D):void 
      Called once per render loop when material is visible.
      Parameters
       source:Object3D
       view:View3D
  CODE EXAMPLES

    
      There are currently no examples for this class


AbstractWirePrimitive
=====================
  Package : away3d.primitives
  Class : public class AbstractWirePrimitive
  Inheritance : WireMesh, BaseMesh, Object3D
  Subclasses : GridPlane, WireCircle, WireCone, WireCube, WireCylinder, WirePlane, WireSphere, WireTorus
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) elements : Array - Returns an array of the elements contained in the wiremesh object. (WireMesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ISegmentMaterial - Defines the material used to render the segments in the wiremesh object. (WireMesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
        sceneTransform : Matrix3D (AbstractWirePrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) segments : Array - Returns an array of the segments contained in the wiremesh object. (WireMesh)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (AbstractWirePrimitive)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) addSegment(segment:Segment):void - Adds a segment object to the wiremesh object. (WireMesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (AbstractWirePrimitive)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (WireMesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) removeSegment(segment:Segment):void - Removes a segment object to the wiremesh object. (WireMesh)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    sceneTransform:Matrix3D[read-only]
      Returns the transformation of the 3d object, relative to the global coordinates of the Scene3D.
      Implementation
       public function get sceneTransform():Matrix3D

  CONSTRUCTOR DETAIL

    public function AbstractWirePrimitive(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties
  METHOD DETAIL

    public function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.
  CODE EXAMPLES

    
      There are currently no examples for this class


AmbientLight
============
  Package : away3d.core.light
  Class : public class AmbientLight
  Inheritance : LightPrimitive
  Description : Ambient light primitive

  PUBLIC PROPERTIES
    (^) ambient : Number - Coefficient for the ambient light intensity. (LightPrimitive)
    (^) ambientBitmap : BitmapData - Lightmap for ambient intensity. (LightPrimitive)
    (^) ambientDiffuseBitmap : BitmapData - Combined lightmap for ambient and diffuse intensities. (LightPrimitive)
    (^) blue : Number - Blue component level. (LightPrimitive)
    (^) diffuse : Number - Coefficient for the diffuse light intensity. (LightPrimitive)
    (^) diffuseBitmap : BitmapData - Lightmap for diffuse intensity. (LightPrimitive)
    (^) green : Number - Green component level. (LightPrimitive)
        light : AmbientLight3D (AmbientLight)
    (^) red : Number - Red component level. (LightPrimitive)
    (^) specular : Number - Coefficient for the specular light intensity. (LightPrimitive)
    (^) specularBitmap : BitmapData - Lightmap for specular intensity. (LightPrimitive)

  PUBLIC METHODS
        updateAmbientBitmap(ambient:Number):void - Updates the bitmapData object used as the lightmap for ambient light shading. (AmbientLight)

  PROPERTY DETAIL

    public var light:AmbientLight3D 
      A reference to the AmbientLight3D object used by the light primitive.
  METHOD DETAIL

    public function updateAmbientBitmap(ambient:Number):void 
      Updates the bitmapData object used as the lightmap for ambient light shading.
      Parameters
       ambient:Number - The coefficient for ambient light intensity.
  CODE EXAMPLES

    
      There are currently no examples for this class


AmbientLight3D
==============
  Package : away3d.lights
  Class : public class AmbientLight3D
  Inheritance : Object3D
  Implements : IClonable, ILightProvider, IPrimitiveProvider
  Description : Lightsource that colors all shaded materials evenly from any angle

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
        ambient : Number - Defines a coefficient for the ambient light intensity. (AmbientLight3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (Object3D)
        color : int - Defines the color of the light object. (AmbientLight3D)
        debug : Boolean - Toggles debug mode: light object is visualised in the scene. (AmbientLight3D)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) maxX : Number - Returns the maximum x value of the 3d object (Object3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (Object3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (Object3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (Object3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (Object3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (Object3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (AmbientLight3D)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
        clone(object:* = null):* (AmbientLight3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
        light(consumer:ILightConsumer):void (AmbientLight3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
        primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (AmbientLight3D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (Object3D)
    (^) tick(time:int):void (Object3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PROPERTY DETAIL

    ambient:Number[read-write]
      Defines a coefficient for the ambient light intensity.
      Implementation
       public function get ambient():Number
       public function set ambient(value:Number):void


    color:int[read-write]
      Defines the color of the light object.
      Implementation
       public function get color():int
       public function set color(value:int):void


    public var debug:Boolean 
      Toggles debug mode: light object is visualised in the scene.
  CONSTRUCTOR DETAIL

    public function AmbientLight3D(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       color:Color (default = 0xFFFFFF)
       ambient:Number (default = 0.5, min:0, max:1)
       debug:Boolean (default = false)
  METHOD DETAIL

    public override function clone(object:* = null):* 
      Duplicates the light object's properties to another AmbientLight3D object
      Parameters
       object:* (default = null) - [optional] The new object instance into which all properties are copied
       Returns
       * - The new object instance with duplicated properties applied

    public function light(consumer:ILightConsumer):void 
      Called from the PrimitiveTraverser when passing LightPrimitive objects to the light consumer object
      Parameters
       consumer:ILightConsumer - The consumer instance.

    public override function primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void 
      Called from the PrimitiveTraverser when passing DrawPrimitive objects to the primitive consumer object
      Parameters
       consumer:IPrimitiveConsumer - The consumer instance
       session:AbstractRenderSession - The render session of the 3d object
  CODE EXAMPLES

    
      There are currently no examples for this class


AmbientShader
=============
  Package : away3d.materials.shaders
  Class : public class AmbientShader
  Inheritance : AbstractShader
  Description : 

  PUBLIC PROPERTIES
    (^) blendMode : String - Defines a blendMode value for the shader bitmap. (AbstractShader)
        color : uint - Defines a 24 bit color value used by the shader (AmbientShader)
    (^) debug : Boolean - Determines if faces with the shader applied are drawn with outlines (AbstractShader)
    (^) smooth : Boolean - Determines if the shader bitmap is smoothed (bilinearly filtered) when drawn to screen (AbstractShader)
    (^) visible : Boolean - Indicates whether the material is visible (AbstractShader)

  PROTECTED PROPERTIES
        (AmbientShader)
    (^) renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (AbstractShader)
        renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (AmbientShader)
        updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (AmbientShader)

  PROTECTED METHODS
        clearFaceDictionary(source:Object3D, view:View3D):void - Clears face value objects when shader requires updating (AmbientShader)
    (^) getLightingShape(layer:Sprite, light:LightPrimitive):Shape - Returns a shape object for use by light shaders (AbstractShader)
    (^) getShape(layer:Sprite):Shape - Returns a shape object for use by environment shaders. (AbstractShader)
        renderShader(face:Face):void - Renders the shader to the specified face. (AmbientShader)

  PROPERTY DETAIL

    public var color:uint 
      Defines a 24 bit color value used by the shader
  CONSTRUCTOR DETAIL

    public function AmbientShader(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
  METHOD DETAIL

    protected override function clearFaceDictionary(source:Object3D, view:View3D):void 
      Clears face value objects when shader requires updating
      Parameters
       source:Object3D - The parent 3d object of the face.
       view:View3D - The view rendering the draw triangle.

    public override function renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void 
      Renders a material layer for the specified triangle.
      Parameters
       tri:DrawTriangle - The drawtriangle used for render information.
       layer:Sprite - The parent layer into which the triangle is drawn.
       level:int - Defines the sprite level for the layer.

    protected override function renderShader(face:Face):void 
      Renders the shader to the specified face.
      Parameters
       face:Face - The face object being rendered.

    public override function updateMaterial(source:Object3D, view:View3D):void 
      Called once per render loop when material is visible.
      Parameters
       source:Object3D
       view:View3D
  CODE EXAMPLES

    
      There are currently no examples for this class


AnimatedBitmapMaterial
======================
  Package : away3d.materials
  Class : public class AnimatedBitmapMaterial
  Inheritance : TransformBitmapMaterial, BitmapMaterial
  Implements : ITriangleMaterial, IUVMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - Defines an alpha value for the texture bitmap. (BitmapMaterial)
        autoplay : Boolean - Indicates whether the animation will start playing on initialisation. (AnimatedBitmapMaterial)
    (^) bitmap : BitmapData - Returns the bitmapData object being used as the material texture. (BitmapMaterial)
    (^) blendMode : String - Defines a blendMode value for the texture bitmap. (BitmapMaterial)
    (^) color : uint - Defines a colored tint for the texture bitmap. (BitmapMaterial)
    (^) debug : Boolean = false - Toggles debug mode: textured triangles are drawn with white outlines, precision correction triangles are drawn with blue outlines. (BitmapMaterial)
    (^) globalProjection : Boolean - Determines whether a projected texture uses offsetX, offsetY and projectionVector values relative to scene cordinates. (TransformBitmapMaterial)
    (^) height : Number - Returns the height of the bitmapData being used as the material texture. (BitmapMaterial)
        index : int - [write-only] Manually sets the frame index of the animation. (AnimatedBitmapMaterial)
        loop : Boolean - Indicates whether the animation will loop. (AnimatedBitmapMaterial)
    (^) offsetX : Number - Offsets the x coordinates of the texture in uv-space (TransformBitmapMaterial)
    (^) offsetY : Number - Offsets the y coordinates of the texture in uv-space (TransformBitmapMaterial)
    (^) precision : Number - Corrects distortion caused by the affine transformation (non-perpective) of textures. (BitmapMaterial)
    (^) projectionVector : Number3D - Projects the texture in object space, ignoring the uv coordinates of the vertex objects. (TransformBitmapMaterial)
    (^) repeat : Boolean = false - Determines if texture bitmap will tile in uv-space (BitmapMaterial)
    (^) rotation : Number - Rotates the texture in uv-space (TransformBitmapMaterial)
    (^) scaleX : Number - Scales the x coordinates of the texture in uv-space (TransformBitmapMaterial)
    (^) scaleY : Number - Scales the y coordinates of the texture in uv-space (TransformBitmapMaterial)
    (^) smooth : Boolean = false - Determines if texture bitmap is smoothed (bilinearly filtered) when drawn to screen. (BitmapMaterial)
    (^) throughProjection : Boolean - Determines whether a projected texture is visble on the faces pointing away from the projection. (TransformBitmapMaterial)
    (^) transform : Matrix - Transforms the texture in uv-space (TransformBitmapMaterial)
    (^) visible : Boolean - Indicates whether the material is visible (BitmapMaterial)
    (^) width : Number - Returns the width of the bitmapData being used as the material texture. (BitmapMaterial)

  PROTECTED PROPERTIES
        (AnimatedBitmapMaterial)
    (^) addOnResize(listener:Function):void - Default method for adding a materialresize event listener (BitmapMaterial)
    (^) getPixel32(u:Number, v:Number):uint - Returns the argb value of the bitmapData pixel at the given u v coordinate. (TransformBitmapMaterial)
        play():void - Resumes playback of the animation (AnimatedBitmapMaterial)
    (^) removeOnResize(listener:Function):void - Default method for removing a materialresize event listener (BitmapMaterial)
    (^) renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (TransformBitmapMaterial)
    (^) renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (BitmapMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (TransformBitmapMaterial)
        setFrames(sources:Array):void - Resets the cached bitmapData objects making up the animation with a pre-defined array. (AnimatedBitmapMaterial)
        setMovie(movie:MovieClip):void - Resets the movieclip used by the material. (AnimatedBitmapMaterial)
        stop():void - Halts playback of the animation (AnimatedBitmapMaterial)
    (^) updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (TransformBitmapMaterial)

  PROTECTED METHODS
    (^) getMapping(tri:DrawTriangle):Matrix - Calculates the mapping matrix required to draw the triangle texture to screen. (TransformBitmapMaterial)
    (^) setColorTransform():void (BitmapMaterial)
    (^) updateRenderBitmap():void (BitmapMaterial)

  EVENTS
    (^) (BitmapMaterial)

  PROPERTY DETAIL

    public var autoplay:Boolean 
      Indicates whether the animation will start playing on initialisation. If false, only the first frame is displayed.

    index:int[write-only]
      Manually sets the frame index of the animation.
      Implementation
       public function set index(value:int):void


    public var loop:Boolean 
      Indicates whether the animation will loop.
  CONSTRUCTOR DETAIL

    public function AnimatedBitmapMaterial(movie:MovieClip, init:Object = null) 
      Parameters
       movie:MovieClip - The movieclip to be bitmap cached for use in the material.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
  METHOD DETAIL

    public function play():void 
      Resumes playback of the animation

    public function setFrames(sources:Array):void 
      Resets the cached bitmapData objects making up the animation with a pre-defined array.
      Parameters
       sources:Array

    public function setMovie(movie:MovieClip):void 
      Resets the movieclip used by the material.
      Parameters
       movie:MovieClip - The movieclip to be bitmap cached for use in the material.

    public function stop():void 
      Halts playback of the animation
  CODE EXAMPLES

    
      There are currently no examples for this class


Animation
=========
  Package : away3d.core.base
  Class : public class Animation
  Inheritance  Implements : IAnimation
  Description : 

  PUBLIC PROPERTIES
        cycleEvent : Boolean = false - Determines whether the animation will fire cycle events. (Animation)
        delay : Number = 0 - Determines the delay time between animation cycles if loop is set to true. (Animation)
        fps : Number = 24 - The frames per second at which the animation will run. (Animation)
        frame : Number = 0 - The current frame of the animation. (Animation)
        isRunning : Boolean - [read-only] Indicates whether the animation is currently running. (Animation)
        latest : uint - [read-only] Returns the number of the latest frame displayed. (Animation)
        loop : Boolean = false - Determines whether the animation will loop. (Animation)
        object : BaseMesh - The Mesh on which the animation is occurring. (Animation)
        sequence : Array - Holds an array of animation frames. (Animation)
        sequenceEvent : Boolean = false - Determines whether the animation will fire sequence events. (Animation)
        smooth : Boolean = false - Determines whether the animation will smooth motion (interpolate) between frames. (Animation)

  PUBLIC METHODS
        (Animation)
        start():void - Jumps to the beginning of the animation and start playing (Animation)
        stop():void - Stops the animation at it's current position. (Animation)
        update(mesh:BaseMesh):void - Updates the positions of vertex objects in the mesh to the current frame values (Animation)

  EVENTS
        (Animation)
        (Animation)

  PROPERTY DETAIL

    public var cycleEvent:Boolean = false 
      Determines whether the animation will fire cycle events.
      See also
      away3d.events.AnimationEvent


    public var delay:Number = 0 
      Determines the delay time between animation cycles if loop is set to true.
      See also
      loop


    public var fps:Number = 24 
      The frames per second at which the animation will run.

    public var frame:Number = 0 
      The current frame of the animation.

    isRunning:Boolean[read-only]
      Indicates whether the animation is currently running.
      Implementation
       public function get isRunning():Boolean


    latest:uint[read-only]
      Returns the number of the latest frame displayed.
      Implementation
       public function get latest():uint


    public var loop:Boolean = false 
      Determines whether the animation will loop.

    public var object:BaseMesh 
      The Mesh on which the animation is occurring.

    public var sequence:Array 
      Holds an array of animation frames.
      See also
      away3d.core.base.AnimationFrame


    public var sequenceEvent:Boolean = false 
      Determines whether the animation will fire sequence events.
      See also
      away3d.events.AnimationEvent


    public var smooth:Boolean = false 
      Determines whether the animation will smooth motion (interpolate) between frames.
  CONSTRUCTOR DETAIL

    public function Animation(obj:BaseMesh) 
      Parameters
       obj:BaseMesh - The mesh object that the animation acts on.
  METHOD DETAIL

    public function start():void 
      Jumps to the beginning of the animation and start playing

    public function stop():void 
      Stops the animation at it's current position.

    public function update(mesh:BaseMesh):void 
      Updates the positions of vertex objects in the mesh to the current frame values
      Parameters
       mesh:BaseMesh - The mesh on which the animation object acts
  EVENT DETAIL

    Event object type: away3d.events.AnimationEvent
      Dispatched when all frame sequences are complete

    Event object type: away3d.events.AnimationEvent
      Dispatched when the current frame sequence is complete
  CODE EXAMPLES

    
      There are currently no examples for this class


AnimationEvent
==============
  Package : away3d.events
  Class : public class AnimationEvent
  Inheritance
  PUBLIC PROPERTIES
        : Animation
 animation : Animation  Description : 
 - A reference to the animation object that is relevant to the event. (AnimationEvent)

  PUBLIC METHODS
        (AnimationEvent)
        clone():Event - Creates a copy of the AnimationEvent object and sets the value of each property to match that of the original. (AnimationEvent)

  PUBLIC CONSTANTS
        CYCLE : String = "cycle" - [static] Defines the value of the type property of a cycle event object. (AnimationEvent)
        SQUENCE_DONE : String = "squencedone" - [static] Defines the value of the type property of a sequence done event object. (AnimationEvent)
        SQUENCE_UPDATE : String = "squenceupdate" - [static] Defines the value of the type property of a sequence update event object. (AnimationEvent)

  PROPERTY DETAIL

    public var animation:Animation 
      A reference to the animation object that is relevant to the event.
  CONSTRUCTOR DETAIL

    public function AnimationEvent(type:String, animation:Animation) 
      Parameters
       type:String - The type of the event. Possible values are: AnimationEvent.CYCLE, AnimationEvent.SQUENCE_UPDATE and AnimationEvent.SQUENCE_DONE.
       animation:Animation - A reference to the animation object that is relevant to the event.
  METHOD DETAIL

    public override function clone():Event 
      Creates a copy of the AnimationEvent object and sets the value of each property to match that of the original.
      Returns
      Event
  CONSTANT DETAIL

    public static const CYCLE:String = "cycle" 
      Defines the value of the type property of a cycle event object.

    public static const SQUENCE_DONE:String = "squencedone" 
      Defines the value of the type property of a sequence done event object.

    public static const SQUENCE_UPDATE:String = "squenceupdate" 
      Defines the value of the type property of a sequence update event object.
  CODE EXAMPLES

    
      There are currently no examples for this class


AnimationFrame
==============
  Package : away3d.core.base
  Class : public class AnimationFrame

  PUBLIC PROPERTIES
        frame : Number - Frame number. (AnimationFrame)
        sort : String - An optional sort string used to order the animation frames. (AnimationFrame)
        time : uint - Time from the start of the animation. (AnimationFrame)

  PUBLIC METHODS
        (AnimationFrame)

  PROPERTY DETAIL

    public var frame:Number 
      Frame number.

    public var sort:String 
      An optional sort string used to order the animation frames.

    public var time:uint 
      Time from the start of the animation.
  CONSTRUCTOR DETAIL

    public function AnimationFrame(frame:Number, sort:String = null) 
      Parameters
       frame:Number - The number of the frame in it's sequence.
       sort:String (default = null) - An optional sort string used to order the animation frames.
  CODE EXAMPLES

    
      There are currently no examples for this class


AnimationGroup
==============
  Package : away3d.core.base
  Class : public class AnimationGroup

  PUBLIC PROPERTIES
        fps : uint - Determines the speed of playback in frames per second. (AnimationGroup)
        loop : Boolean - Determines whether the animation sequence should loop. (AnimationGroup)
        loopLast : Boolean - Determines if the last animation sequence should be looped. (AnimationGroup)
        playlist : Array - An array of animation sequence objects. (AnimationGroup)

  PUBLIC METHODS
        (AnimationGroup)

  PROPERTY DETAIL

    public var fps:uint 
      Determines the speed of playback in frames per second.

    public var loop:Boolean 
      Determines whether the animation sequence should loop.

    public var loopLast:Boolean 
      Determines if the last animation sequence should be looped.

    public var playlist:Array 
      An array of animation sequence objects.
  CONSTRUCTOR DETAIL

    public function AnimationGroup(playlist:Array = null, loopLast:Boolean = false) 
      Parameters
       playlist:Array (default = null) - An array of animation sequence objects.
       loopLast:Boolean (default = false) - Determines if the last animation sequence should be looped.
  CODE EXAMPLES

    
      There are currently no examples for this class


AnimationSequence
=================
  Package : away3d.core.base
  Class : public class AnimationSequence

  PUBLIC PROPERTIES
        fps : Number - Determines the speed of playback in frames per second. (AnimationSequence)
        loop : Boolean - Determines whether the animation sequence should loop. (AnimationSequence)
        prefix : String - The prefix string defining frames in the sequence. (AnimationSequence)
        smooth : Boolean - Determines if the animation should be smoothed (interpolated) between frames. (AnimationSequence)

  PUBLIC METHODS
        (AnimationSequence)

  PROPERTY DETAIL

    public var fps:Number 
      Determines the speed of playback in frames per second.

    public var loop:Boolean 
      Determines whether the animation sequence should loop.

    public var prefix:String 
      The prefix string defining frames in the sequence.

    public var smooth:Boolean 
      Determines if the animation should be smoothed (interpolated) between frames.
  CONSTRUCTOR DETAIL

    public function AnimationSequence(prefix:String, smooth:Boolean = false, loop:Boolean = false, fps:Number = 24) 
      Parameters
       prefix:String - The prefix string defining frames in the sequence.
       smooth:Boolean (default = false) - Determines if the animation should be smoothed (interpolated) between frames.
       loop:Boolean (default = false) - Determines whether the animation sequence should loop.
       fps:Number (default = 24) - Determines the speed of playback in frames per second.
  CODE EXAMPLES

    
      There are currently no examples for this class


Animator
========
  Package : away3d.animation
  Class : public class Animator
  Inheritance : Mesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
        framelist : Array - [read-only] (Animator)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        -  (Animator)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
        addFrames(aFrames:Array):void -  (Animator)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
        generate(baseObject:Mesh, aFrames:Array, doloop:Boolean):void -  (Animator)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    framelist:Array[read-only]
      Implementation
       public function get framelist():Array

  CONSTRUCTOR DETAIL

    public function Animator(baseObject:Mesh, aFrames:Array, init:Object = null, doloop:Boolean = false) 
      Parameters
       baseObject:Mesh
       aFrames:Array
       init:Object (default = null)
       doloop:Boolean (default = false)
  METHOD DETAIL

    public function addFrames(aFrames:Array):void 
      Parameters
       aFrames:Array

    public function generate(baseObject:Mesh, aFrames:Array, doloop:Boolean):void 
      Parameters
       baseObject:Mesh
       aFrames:Array
       doloop:Boolean
  CODE EXAMPLES

    
      There are currently no examples for this class


AnotherRivalFilter
==================
  Package : away3d.core.filter
  Class : public class AnotherRivalFilter
  Implements : IPrimitiveQuadrantFilter
  Description : sorting

  PUBLIC METHODS
        (AnotherRivalFilter)
        filter(pritree:PrimitiveQuadrantTree, scene:Scene3D, camera:Camera3D, clip:Clipping):void - Applies the filter to the quadrant tree. (AnotherRivalFilter)
        toString():String - Used to trace the values of a filter. (AnotherRivalFilter)

  CONSTRUCTOR DETAIL

    public function AnotherRivalFilter(maxdelay:int = 60000) 
      Parameters
       maxdelay:int (default = 60000) - [optional] The maximum time the filter can take to resolve z-depth before timing out.
  METHOD DETAIL

    public function filter(pritree:PrimitiveQuadrantTree, scene:Scene3D, camera:Camera3D, clip:Clipping):void 
      Applies the filter to the quadrant tree.
      Parameters
       pritree:PrimitiveQuadrantTree - The quadrant tree to be filtered.
       scene:Scene3D - The scene to which the quadrant tree belongs.
       camera:Camera3D - The camera being used in the renderer for the quadrant tree
       clip:Clipping - The clipping object used in the renderer for the quadrant tree's view.

    public function toString():String 
      Used to trace the values of a filter.
      Returns
      String - A string representation of the filter object.
  CODE EXAMPLES

    
      There are currently no examples for this class


Ase
===
  Package : away3d.loaders
  Class : public class Ase

  PUBLIC METHODS
        (Ase)
        load(url:String, init:Object = null):Object3DLoader - [static] Loads and parses an ase file into a 3d mesh object. (Ase)
        parse(data:*, init:Object = null, loader:Object3DLoader = null):Mesh - [static] Creates a 3d mesh object from the raw ascii data of the ase file. (Ase)

  CONSTRUCTOR DETAIL

    public function Ase(data:String, init:Object = null) 
      Parameters
       data:String - The ascii data of a loaded file.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       scaling:Number (default = 1)
       See also
       away3d.loaders.Ase.parse()
       away3d.loaders.Ase.load()

  METHOD DETAIL

    public static function load(url:String, init:Object = null):Object3DLoader 
      Loads and parses an ase file into a 3d mesh object.
      Parameters
       url:String - The url location of the file to load.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Returns
       Object3DLoader - A 3d loader object that can be used as a placeholder in a scene while the file is loading.

    public static function parse(data:*, init:Object = null, loader:Object3DLoader = null):Mesh 
      Creates a 3d mesh object from the raw ascii data of the ase file.
      Parameters
       data:* - The ascii data of a loaded file.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       loader:Object3DLoader (default = null) - [optional] Not intended for direct use.
       Returns
       Mesh - A 3d mesh object representation of the ase file.
  CODE EXAMPLES

    
      There are currently no examples for this class


BaseDemo
========
  Package : away3d.test
  Class : public class BaseDemo
  Inheritance
  PROTECTED PROPERTIES
        : HoverCamera3D
 camera : HoverCamera3D  Description : 
 -  (BaseDemo)
        centergroup : Sprite -  (BaseDemo)
        infogroup : Sprite -  (BaseDemo)
        lefttopgroup : Sprite -  (BaseDemo)
        startlabel : TextField -  (BaseDemo)
        statsgroup : Sprite -  (BaseDemo)
        titlegroup : Sprite -  (BaseDemo)
        view : View3D -  (BaseDemo)

  PUBLIC METHODS
        -  (BaseDemo)

  PROTECTED METHODS
        addSlide(title:String, text:String, scene:Scene3D, renderer:IRenderer, session:AbstractRenderSession):void -  (BaseDemo)

  PROPERTY DETAIL

    protected var camera:HoverCamera3D 

    protected var centergroup:Sprite 

    protected var infogroup:Sprite 

    protected var lefttopgroup:Sprite 

    protected var startlabel:TextField 

    protected var statsgroup:Sprite 

    protected var titlegroup:Sprite 

    protected var view:View3D 
  CONSTRUCTOR DETAIL

    public function BaseDemo(title:String, infogroupheight:Number = 410) 
      Parameters
       title:String
       infogroupheight:Number (default = 410)
  METHOD DETAIL

    protected function addSlide(title:String, text:String, scene:Scene3D, renderer:IRenderer, session:AbstractRenderSession):void 
      Parameters
       title:String
       text:String
       scene:Scene3D
       renderer:IRenderer
       session:AbstractRenderSession
  CODE EXAMPLES

    
      Away3D HelloAway3D.as
      package
      {
      import flash.display.*;
      import flash.events.*;
      import flash.utils.*;
      import away3d.objects.*;
      import away3d.core.material.*;
      import away3d.core.proto.*;
      [SWF(backgroundColor="#222266", frameRate="60", width="600", height="400")]
      public class HelloAway3D extends Sprite
      {
      public var view:View3D;
      public var sphere:Sphere;
      public function HelloAway3D()
      {
      view = new View3D();
      view.x = 300;
      view.y = 200;
      addChild(view);
      sphere = new Sphere(new WireColorMaterial(0xFF7700, 0xCC4400), {radius:250, segmentsW:12, segmentsH:9, y:50});
      view.scene.addChild(sphere);
      view.camera.lookAt(sphere);
      addEventListener(Event.ENTER_FRAME, onEnterFrame);
      }
      private function onEnterFrame(event:Event):void
      {
      view.render();
      sphere.rotationY = getTimer() / 100;
      }
      }
      }
      From HelloAway3D.as

BaseMesh
========
  Package : away3d.core.base
  Class : public class BaseMesh
  Inheritance  Subclasses : Mesh, WireMesh
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
        boundingRadius : Number - [read-only] Returns the bounding radius of the 3d object (BaseMesh)
        elements : Array - [read-only] Returns an array of the elements contained in the mesh object (BaseMesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
        fps : int - [write-only] Determines the frames per second at which the animation will run. (BaseMesh)
        frame : int - Indicates the current frame of animation (BaseMesh)
        framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
        frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
        hasCycleEvent : Boolean - [read-only] Indicates whether the animation has a cycle event listener (BaseMesh)
        hasSequenceEvent : Boolean - [read-only] Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
        isRunning : Boolean - [read-only] Indicates whether the animation is currently running. (BaseMesh)
        loop : Boolean - [write-only] Determines whether the animation will loop. (BaseMesh)
        maxX : Number - [read-only] Returns the maximum x value of the 3d object (BaseMesh)
        maxY : Number - [read-only] Returns the maximum y value of the 3d object (BaseMesh)
        maxZ : Number - [read-only] Returns the maximum z value of the 3d object (BaseMesh)
        minX : Number - [read-only] Returns the minimum x value of the 3d object (BaseMesh)
        minY : Number - [read-only] Returns the minimum y value of the 3d object (BaseMesh)
        minZ : Number - [read-only] Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
        pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
        pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
        smooth : Boolean - [write-only] Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
        type : String - String defining the type of class used to generate the mesh. (BaseMesh)
        url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
        vertices : Array - [read-only] Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (BaseMesh)
        addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
        addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
        gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
        gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
        play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
        primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (BaseMesh)
        removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
        removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
        scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
        scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
        scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
        scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
        scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
        setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
        tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
        addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
        removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
        scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
        (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
        (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    boundingRadius:Number[read-only]
      Returns the bounding radius of the 3d object
      Implementation
       public function get boundingRadius():Number


    elements:Array[read-only]
      Returns an array of the elements contained in the mesh object
      Implementation
       public function get elements():Array
       Throws
       - Not implemented

    fps:int[write-only]
      Determines the frames per second at which the animation will run.
      Implementation
       public function set fps(value:int):void


    frame:int[read-write]
      Indicates the current frame of animation
      Implementation
       public function get frame():int
       public function set frame(value:int):void


    public var framenames:Dictionary 
      A dictionary containing all frame names of the mesh

    public var frames:Dictionary 
      A dictionary containing all frames of the mesh

    hasCycleEvent:Boolean[read-only]
      Indicates whether the animation has a cycle event listener
      Implementation
       public function get hasCycleEvent():Boolean


    hasSequenceEvent:Boolean[read-only]
      Indicates whether the animation has a sequencedone event listener
      Implementation
       public function get hasSequenceEvent():Boolean


    isRunning:Boolean[read-only]
      Indicates whether the animation is currently running.
      Implementation
       public function get isRunning():Boolean


    loop:Boolean[write-only]
      Determines whether the animation will loop.
      Implementation
       public function set loop(value:Boolean):void


    maxX:Number[read-only]
      Returns the maximum x value of the 3d object
      Implementation
       public function get maxX():Number


    maxY:Number[read-only]
      Returns the maximum y value of the 3d object
      Implementation
       public function get maxY():Number


    maxZ:Number[read-only]
      Returns the maximum z value of the 3d object
      Implementation
       public function get maxZ():Number


    minX:Number[read-only]
      Returns the minimum x value of the 3d object
      Implementation
       public function get minX():Number


    minY:Number[read-only]
      Returns the minimum y value of the 3d object
      Implementation
       public function get minY():Number


    minZ:Number[read-only]
      Returns the minimum z value of the 3d object
      Implementation
       public function get minZ():Number


    public var pushback:Boolean 
      Elements use their furthest point from the camera when z-sorting

    public var pushfront:Boolean 
      Elements use their nearest point to the camera when z-sorting

    smooth:Boolean[write-only]
      Determines whether the animation will smooth motion (interpolate) between frames.
      Implementation
       public function set smooth(value:Boolean):void


    public var type:String 
      String defining the type of class used to generate the mesh. Used to display information in the stats panel
      See also
      away3d.core.stats.Stats


    public var url:String 
      String defining the source of the mesh. If the mesh has been created internally, the string is used to display the package name of the creating object. Used to display information in the stats panel
      See also
      away3d.core.stats.Stats


    vertices:Array[read-only]
      Returns an array of the vertices contained in the mesh object
      Implementation
       public function get vertices():Array

  CONSTRUCTOR DETAIL

    public function BaseMesh(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties
       Init Parameters
       pushback:Boolean (default = false)
       pushfront:Boolean (default = false)
  METHOD DETAIL

    protected function addElement(element:IMeshElement):void 
      Adds an element to the mesh object.
      Parameters
       element:IMeshElement - The element to be added to the mesh.

    public function addOnCycle(listener:Function):void 
      Default method for adding a cycle event listener
      Parameters
       listener:Function - The listener function

    public function addOnSequenceDone(listener:Function):void 
      Default method for adding a squencedone event listener
      Parameters
       listener:Function - The listener function

    public function gotoAndPlay(value:int):void 
      Starts playing the animation at the specified frame.
      Parameters
       value:int - A number representing the frame number.

    public function gotoAndStop(value:int):void 
      Brings the animation to the specifed frame and stops it there.
      Parameters
       value:int - A number representing the frame number.

    public function play(sequence:AnimationSequence):void 
      Plays a sequence of frames
      Parameters
       sequence:AnimationSequence - The animationsequence to play

    public override function primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void 
      Called from the PrimitiveTraverser when passing DrawPrimitive objects to the primitive consumer object
      Parameters
       consumer:IPrimitiveConsumer - The consumer instance
       session:AbstractRenderSession - The render session of the 3d object
       See also
       away3d.core.traverse.PrimitiveTraverser
       away3d.core.draw.DrawPrimitive


    protected function removeElement(element:IMeshElement):void 
      Removes an element to the mesh object.
      Parameters
       element:IMeshElement - The element to be removed from the mesh.

    public function removeOnCycle(listener:Function):void 
      Default method for removing a cycle event listener
      Parameters
       listener:Function - The listener function

    public function removeOnSequenceDone(listener:Function):void 
      Default method for removing a squencedone event listener
      Parameters
       listener:Function - The listener function

    public override function scale(scale:Number):void 
      Scales the contents of the mesh.
      Parameters
       scale:Number - The scaling value

    public function scaleAnimation(scale:Number):void 
      Scales the vertex positions contained within all animation frames
      Parameters
       scale:Number - The scaling value

    public function scaleX(scaleX:Number):void 
      Scales the contents of the mesh along the x-axis.
      Parameters
       scaleX:Number - The scaling value

    protected function scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void 
      Scales the contents of the mesh using 3 axis values.
      Parameters
       scaleX:Number - The scaling value along the x-axis
       scaleY:Number - The scaling value along the y-axis
       scaleZ:Number - The scaling value along the z-axis

    public function scaleY(scaleY:Number):void 
      Scales the contents of the mesh along the y-axis.
      Parameters
       scaleY:Number - The scaling value

    public function scaleZ(scaleZ:Number):void 
      Scales the contents of the mesh along the z-axis.
      Parameters
       scaleZ:Number - The scaling value

    public function setPlaySequences(playlist:Array, loopLast:Boolean = false):void 
      Passes an array of animationsequence objects to be added to the animation.
      Parameters
       playlist:Array - An array of animationsequence objects.
       loopLast:Boolean (default = false) - [optional] Determines whether the last sequence will loop. Defaults to false.

    public override function tick(time:int):void 
      Called by the TickTraverser. updates the animation object
      Parameters
       time:int - The absolute time at the start of the render cycle
       See also
       away3d.core.traverse.TickTraverser
       away3d.core.basr.Animation.update()

  EVENT DETAIL

    Event object type: away3d.events.AnimationEvent
      Dispatched when the animation object completes a single sequence cycle.

    Event object type: away3d.events.AnimationEvent
      Dispatched when the animation object completes all frame sequences.
  CODE EXAMPLES

    
      There are currently no examples for this class


BaseMeshElement
===============
  Package : away3d.core.base
  Class : public class BaseMeshElement
  Inheritance  Implements : IMeshElement
  Subclasses : Face, Segment
  Description : 

  PUBLIC PROPERTIES
        maxX : Number - [read-only] Returns the maximum x value of the 3d element (BaseMeshElement)
        maxY : Number - [read-only] Returns the minimum y value of the 3d element (BaseMeshElement)
        maxZ : Number - [read-only] Returns the minimum z value of the 3d element (BaseMeshElement)
        minX : Number - [read-only] Returns the minimum x value of the 3d element (BaseMeshElement)
        minY : Number - [read-only] Returns the maximum y value of the 3d element (BaseMeshElement)
        minZ : Number - [read-only] Returns the maximum z value of the 3d element (BaseMeshElement)
        radius2 : Number - [read-only] Returns the squared bounding radius of the 3d element (BaseMeshElement)
        vertices : Array - [read-only] Returns an array of vertex objects that make up the 3d element. (BaseMeshElement)
        visible : Boolean - Defines whether the 3d element is visible in the scene. (BaseMeshElement)

  PUBLIC METHODS
        addOnVertexChange(listener:Function):void - Default method for adding a vertexchanged event listener (BaseMeshElement)
        addOnVertexValueChange(listener:Function):void - Default method for adding a vertexvaluechanged event listener (BaseMeshElement)
        addOnVisibleChange(listener:Function):void - Default method for adding a visiblechanged event listener (BaseMeshElement)
        removeOnVertexChange(listener:Function):void - Default method for removing a vertexchanged event listener (BaseMeshElement)
        removeOnVertexValueChange(listener:Function):void - Default method for removing a vertexvaluechanged event listener (BaseMeshElement)
        removeOnVisibleChange(listener:Function):void - Default method for removing a visiblechanged event listener (BaseMeshElement)

  EVENTS
        (BaseMeshElement)
        (BaseMeshElement)
        (BaseMeshElement)

  PROPERTY DETAIL

    maxX:Number[read-only]
      Returns the maximum x value of the 3d element
      Implementation
       public function get maxX():Number


    maxY:Number[read-only]
      Returns the minimum y value of the 3d element
      Implementation
       public function get maxY():Number


    maxZ:Number[read-only]
      Returns the minimum z value of the 3d element
      Implementation
       public function get maxZ():Number


    minX:Number[read-only]
      Returns the minimum x value of the 3d element
      Implementation
       public function get minX():Number


    minY:Number[read-only]
      Returns the maximum y value of the 3d element
      Implementation
       public function get minY():Number


    minZ:Number[read-only]
      Returns the maximum z value of the 3d element
      Implementation
       public function get minZ():Number


    radius2:Number[read-only]
      Returns the squared bounding radius of the 3d element
      Implementation
       public function get radius2():Number


    vertices:Array[read-only]
      Returns an array of vertex objects that make up the 3d element.
      Implementation
       public function get vertices():Array


    visible:Boolean[read-write]
      Defines whether the 3d element is visible in the scene.
      Implementation
       public function get visible():Boolean
       public function set visible(value:Boolean):void

  METHOD DETAIL

    public function addOnVertexChange(listener:Function):void 
      Default method for adding a vertexchanged event listener
      Parameters
       listener:Function - The listener function

    public function addOnVertexValueChange(listener:Function):void 
      Default method for adding a vertexvaluechanged event listener
      Parameters
       listener:Function - The listener function

    public function addOnVisibleChange(listener:Function):void 
      Default method for adding a visiblechanged event listener
      Parameters
       listener:Function - The listener function

    public function removeOnVertexChange(listener:Function):void 
      Default method for removing a vertexchanged event listener
      Parameters
       listener:Function - The listener function

    public function removeOnVertexValueChange(listener:Function):void 
      Default method for removing a vertexvaluechanged event listener
      Parameters
       listener:Function - The listener function

    public function removeOnVisibleChange(listener:Function):void 
      Default method for removing a visiblechanged event listener
      Parameters
       listener:Function - The listener function
  EVENT DETAIL

    Event object type: away3d.events.MeshElementEvent
      Dispatched when the vertex of a 3d element changes.

    Event object type: away3d.events.MeshElementEvent
      Dispatched when the vertex value of a 3d element changes.

    Event object type: away3d.events.MeshElementEvent
      Dispatched when the visiblity of a 3d element changes.
  CODE EXAMPLES

    
      There are currently no examples for this class


BasicRenderer
=============
  Package : away3d.core.render
  Class : public class BasicRenderer
  Implements : IRenderer
  Description : 

  PUBLIC PROPERTIES
        session : AbstractRenderSession - Defines the render session object used by the renderer. (BasicRenderer)

  PUBLIC METHODS
        (BasicRenderer)
        render(view:View3D):Array - Executes the render pipe that resolves the 3d scene into the view. (BasicRenderer)
        toString():String - Used to trace the values of a renderer. (BasicRenderer)

  PROPERTY DETAIL

    session:AbstractRenderSession[read-write]
      Defines the render session object used by the renderer.
      Implementation
       public function get session():AbstractRenderSession
       public function set session(value:AbstractRenderSession):void

  CONSTRUCTOR DETAIL

    public function BasicRenderer(... filters) 
      Parameters
       ... filters - [optional] An array of filters to use on projected drawing primitives before rendering them to screen.
  METHOD DETAIL

    public function render(view:View3D):Array 
      Executes the render pipe that resolves the 3d scene into the view.
      Parameters
       view:View3D
       Returns
       Array

    public function toString():String 
      Used to trace the values of a renderer.
      Returns
      String - A string representation of the renderer object.
  CODE EXAMPLES

    
      There are currently no examples for this class


BitmapFileMaterial
==================
  Package : away3d.materials
  Class : public class BitmapFileMaterial
  Inheritance : TransformBitmapMaterial, BitmapMaterial
  Implements : ITriangleMaterial, IUVMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - Defines an alpha value for the texture bitmap. (BitmapMaterial)
    (^) bitmap : BitmapData - Returns the bitmapData object being used as the material texture. (BitmapMaterial)
    (^) blendMode : String - Defines a blendMode value for the texture bitmap. (BitmapMaterial)
    (^) color : uint - Defines a colored tint for the texture bitmap. (BitmapMaterial)
    (^) debug : Boolean = false - Toggles debug mode: textured triangles are drawn with white outlines, precision correction triangles are drawn with blue outlines. (BitmapMaterial)
    (^) globalProjection : Boolean - Determines whether a projected texture uses offsetX, offsetY and projectionVector values relative to scene cordinates. (TransformBitmapMaterial)
    (^) height : Number - Returns the height of the bitmapData being used as the material texture. (BitmapMaterial)
    (^) offsetX : Number - Offsets the x coordinates of the texture in uv-space (TransformBitmapMaterial)
    (^) offsetY : Number - Offsets the y coordinates of the texture in uv-space (TransformBitmapMaterial)
    (^) precision : Number - Corrects distortion caused by the affine transformation (non-perpective) of textures. (BitmapMaterial)
    (^) projectionVector : Number3D - Projects the texture in object space, ignoring the uv coordinates of the vertex objects. (TransformBitmapMaterial)
    (^) repeat : Boolean = false - Determines if texture bitmap will tile in uv-space (BitmapMaterial)
    (^) rotation : Number - Rotates the texture in uv-space (TransformBitmapMaterial)
    (^) scaleX : Number - Scales the x coordinates of the texture in uv-space (TransformBitmapMaterial)
    (^) scaleY : Number - Scales the y coordinates of the texture in uv-space (TransformBitmapMaterial)
    (^) smooth : Boolean = false - Determines if texture bitmap is smoothed (bilinearly filtered) when drawn to screen. (BitmapMaterial)
    (^) throughProjection : Boolean - Determines whether a projected texture is visble on the faces pointing away from the projection. (TransformBitmapMaterial)
    (^) transform : Matrix - Transforms the texture in uv-space (TransformBitmapMaterial)
    (^) visible : Boolean - Indicates whether the material is visible (BitmapMaterial)
    (^) width : Number - Returns the width of the bitmapData being used as the material texture. (BitmapMaterial)

  PROTECTED PROPERTIES
        (BitmapFileMaterial)
    (^) addOnResize(listener:Function):void - Default method for adding a materialresize event listener (BitmapMaterial)
    (^) getPixel32(u:Number, v:Number):uint - Returns the argb value of the bitmapData pixel at the given u v coordinate. (TransformBitmapMaterial)
    (^) removeOnResize(listener:Function):void - Default method for removing a materialresize event listener (BitmapMaterial)
    (^) renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (TransformBitmapMaterial)
    (^) renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (BitmapMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (TransformBitmapMaterial)
    (^) updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (TransformBitmapMaterial)

  PROTECTED METHODS
    (^) getMapping(tri:DrawTriangle):Matrix - Calculates the mapping matrix required to draw the triangle texture to screen. (TransformBitmapMaterial)
    (^) setColorTransform():void (BitmapMaterial)
    (^) updateRenderBitmap():void (BitmapMaterial)

  EVENTS
    (^) (BitmapMaterial)

  CONSTRUCTOR DETAIL

    public function BitmapFileMaterial(url:String = "", init:Object = null) 
      Parameters
       url:String (default = "") - The location of the bitmapasset to load.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
  CODE EXAMPLES

    
      There are currently no examples for this class


BitmapMaterial
==============
  Package : away3d.materials
  Class : public class BitmapMaterial
  Inheritance  Implements : ILayerMaterial, ITriangleMaterial, IUpdatingMaterial, IUVMaterial
  Subclasses : BitmapMaterialContainer, TransformBitmapMaterial
  Description : Basic bitmap material

  PUBLIC PROPERTIES
        alpha : Number - Defines an alpha value for the texture bitmap. (BitmapMaterial)
        bitmap : BitmapData - [read-only] Returns the bitmapData object being used as the material texture. (BitmapMaterial)
        blendMode : String - Defines a blendMode value for the texture bitmap. (BitmapMaterial)
        color : uint - Defines a colored tint for the texture bitmap. (BitmapMaterial)
        debug : Boolean = false - Toggles debug mode: textured triangles are drawn with white outlines, precision correction triangles are drawn with blue outlines. (BitmapMaterial)
        height : Number - [read-only] Returns the height of the bitmapData being used as the material texture. (BitmapMaterial)
        precision : Number - Corrects distortion caused by the affine transformation (non-perpective) of textures. (BitmapMaterial)
        repeat : Boolean = false - Determines if texture bitmap will tile in uv-space (BitmapMaterial)
        smooth : Boolean = false - Determines if texture bitmap is smoothed (bilinearly filtered) when drawn to screen. (BitmapMaterial)
        visible : Boolean - [read-only] Indicates whether the material is visible (BitmapMaterial)
        width : Number - [read-only] Returns the width of the bitmapData being used as the material texture. (BitmapMaterial)

  PROTECTED PROPERTIES
        ini : Init - Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor. (BitmapMaterial)

  PUBLIC METHODS
        (BitmapMaterial)
        addOnResize(listener:Function):void - Default method for adding a materialresize event listener (BitmapMaterial)
        getPixel32(u:Number, v:Number):uint - Returns the argb value of the bitmapData pixel at the given u v coordinate. (BitmapMaterial)
        removeOnResize(listener:Function):void - Default method for removing a materialresize event listener (BitmapMaterial)
        renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (BitmapMaterial)
        renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (BitmapMaterial)
        renderTriangle(tri:DrawTriangle):void (BitmapMaterial)
        updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (BitmapMaterial)

  PROTECTED METHODS
        getMapping(tri:DrawTriangle):Matrix - Calculates the mapping matrix required to draw the triangle texture to screen. (BitmapMaterial)
        setColorTransform():void (BitmapMaterial)
        updateRenderBitmap():void (BitmapMaterial)

  EVENTS
        (BitmapMaterial)

  PROPERTY DETAIL

    alpha:Number[read-write]
      Defines an alpha value for the texture bitmap.
      Implementation
       public function get alpha():Number
       public function set alpha(value:Number):void


    bitmap:BitmapData[read-only]
      Returns the bitmapData object being used as the material texture.
      Implementation
       public function get bitmap():BitmapData


    blendMode:String[read-write]
      Defines a blendMode value for the texture bitmap. Applies to materials rendered as children of BitmapMaterialContainer or CompositeMaterial.
      Implementation
       public function get blendMode():String
       public function set blendMode(value:String):void
       See also
       away3d.materials.BitmapMaterialContainer
       away3d.materials.CompositeMaterial


    color:uint[read-write]
      Defines a colored tint for the texture bitmap.
      Implementation
       public function get color():uint
       public function set color(value:uint):void


    public var debug:Boolean = false 
      Toggles debug mode: textured triangles are drawn with white outlines, precision correction triangles are drawn with blue outlines.

    height:Number[read-only]
      Returns the height of the bitmapData being used as the material texture.
      Implementation
       public function get height():Number


    protected var ini:Init 
      Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor.

    precision:Number[read-write]
      Corrects distortion caused by the affine transformation (non-perpective) of textures. The number refers to the pixel correction value - ie. a value of 2 means a distorion correction to within 2 pixels of the correct perspective distortion. 0 performs no precision.
      Implementation
       public function get precision():Number
       public function set precision(value:Number):void


    public var repeat:Boolean = false 
      Determines if texture bitmap will tile in uv-space

    public var smooth:Boolean = false 
      Determines if texture bitmap is smoothed (bilinearly filtered) when drawn to screen.

    visible:Boolean[read-only]
      Indicates whether the material is visible
      Implementation
       public function get visible():Boolean


    width:Number[read-only]
      Returns the width of the bitmapData being used as the material texture.
      Implementation
       public function get width():Number

  CONSTRUCTOR DETAIL

    public function BitmapMaterial(bitmap:BitmapData, init:Object = null) 
      Parameters
       bitmap:BitmapData - The bitmapData object to be used as the material's texture.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       smooth:Boolean (default = smooth)
       debug:Boolean (default = debug)
       repeat:Boolean (default = repeat)
       precision:Number (default = 0)
       blendMode:String (default = BlendMode.NORMAL)
       alpha:Number (default = _alpha, min:0, max:1)
       color:Color (default = _color)
  METHOD DETAIL

    public function addOnResize(listener:Function):void 
      Default method for adding a materialresize event listener
      Parameters
       listener:Function - The listener function

    protected function getMapping(tri:DrawTriangle):Matrix 
      Calculates the mapping matrix required to draw the triangle texture to screen.
      Parameters
       tri:DrawTriangle - The data object holding all information about the triangle to be drawn.
       Returns
       Matrix - The required matrix object.

    public function getPixel32(u:Number, v:Number):uint 
      Returns the argb value of the bitmapData pixel at the given u v coordinate.
      Parameters
       u:Number - The u (horizontal) texture coordinate.
       v:Number - The v (verical) texture coordinate.
       Returns
       uint - The argb pixel value.

    public function removeOnResize(listener:Function):void 
      Default method for removing a materialresize event listener
      Parameters
       listener:Function - The listener function

    public function renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO 
      Renders a bitmapData surface object for the speficied face.
      Parameters
       face:Face - The face object onto which the rendered sufrace is applied.
       containerRect:Rectangle - The rectangle object defining the bounds of the face in uv-space.
       parentFaceVO:FaceVO - The value object of the preceeding surface.
       Returns
       FaceVO

    public function renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void 
      Renders a material layer for the specified triangle.
      Parameters
       tri:DrawTriangle - The drawtriangle used for render information.
       layer:Sprite - The parent layer into which the triangle is drawn.
       level:int - Defines the sprite level for the layer.

    public function renderTriangle(tri:DrawTriangle):void 
      Sends data from the material coupled with data from the DrawTriangle primitive to the render session.
      Parameters
       tri:DrawTriangle

    protected function setColorTransform():void 
      Updates the colortransform object applied to the texture from the color and alpha properties.
      See also
      color
      alpha


    public function updateMaterial(source:Object3D, view:View3D):void 
      Called once per render loop when material is visible.
      Parameters
       source:Object3D
       view:View3D

    protected function updateRenderBitmap():void 
      Updates the texture bitmapData with the colortransform determined from the color and alpha properties.
      See also
      color
      alpha
      setColorTransform()

  EVENT DETAIL

    Event object type: away3d.events.MaterialEvent
      Dispatched when the bitmapData used for the material texture is resized.
  CODE EXAMPLES

    
      There are currently no examples for this class


BitmapMaterialContainer
=======================
  Package : away3d.materials
  Class : public class BitmapMaterialContainer
  Inheritance : BitmapMaterial
  Implements : ILayerMaterial, ITriangleMaterial, IUpdatingMaterial
  Subclasses : Dot3BitmapMaterialCache, EnviroBitmapMaterialCache, PhongBitmapMaterialCache, PhongColorMaterialCache
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - Defines an alpha value for the texture bitmap. (BitmapMaterial)
    (^) bitmap : BitmapData - Returns the bitmapData object being used as the material texture. (BitmapMaterial)
    (^) blendMode : String - Defines a blendMode value for the texture bitmap. (BitmapMaterial)
        cache : Boolean - Defines whether each created bitmapData surface is to be cached, or updated every frame. (BitmapMaterialContainer)
    (^) color : uint - Defines a colored tint for the texture bitmap. (BitmapMaterial)
    (^) debug : Boolean = false - Toggles debug mode: textured triangles are drawn with white outlines, precision correction triangles are drawn with blue outlines. (BitmapMaterial)
    (^) height : Number - Returns the height of the bitmapData being used as the material texture. (BitmapMaterial)
        materials : Array - An array of bitmapmaterial objects to be overlayed sequentially. (BitmapMaterialContainer)
    (^) precision : Number - Corrects distortion caused by the affine transformation (non-perpective) of textures. (BitmapMaterial)
    (^) repeat : Boolean = false - Determines if texture bitmap will tile in uv-space (BitmapMaterial)
    (^) smooth : Boolean = false - Determines if texture bitmap is smoothed (bilinearly filtered) when drawn to screen. (BitmapMaterial)
        transparent : Boolean - Defines whether the caching bitmapData objects are transparent (BitmapMaterialContainer)
    (^) visible : Boolean - Indicates whether the material is visible (BitmapMaterial)
    (^) width : Number - Returns the width of the bitmapData being used as the material texture. (BitmapMaterial)

  PROTECTED PROPERTIES
        (BitmapMaterialContainer)
    (^) addOnResize(listener:Function):void - Default method for adding a materialresize event listener (BitmapMaterial)
    (^) getPixel32(u:Number, v:Number):uint - Returns the argb value of the bitmapData pixel at the given u v coordinate. (BitmapMaterial)
    (^) removeOnResize(listener:Function):void - Default method for removing a materialresize event listener (BitmapMaterial)
        renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (BitmapMaterialContainer)
    (^) renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (BitmapMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (BitmapMaterial)
        update():void - Clear and updates the currrent bitmapData surface on all faces. (BitmapMaterialContainer)
        updateMaterial(source:Object3D, view:View3D):void (BitmapMaterialContainer)

  PROTECTED METHODS
        getMapping(tri:DrawTriangle):Matrix - Calculates the mapping matrix required to draw the triangle texture to screen. (BitmapMaterialContainer)
    (^) setColorTransform():void (BitmapMaterial)
        updateRenderBitmap():void (BitmapMaterialContainer)

  EVENTS
    (^) (BitmapMaterial)

  PROPERTY DETAIL

    cache:Boolean[read-write]
      Defines whether each created bitmapData surface is to be cached, or updated every frame. Updating all bitmapData surface objects is costly, so needs to be used sparingly.
      Implementation
       public function get cache():Boolean
       public function set cache(value:Boolean):void


    public var materials:Array 
      An array of bitmapmaterial objects to be overlayed sequentially.

    public var transparent:Boolean 
      Defines whether the caching bitmapData objects are transparent
  CONSTRUCTOR DETAIL

    public function BitmapMaterialContainer(width:int, height:int, init:Object = null) 
      Parameters
       width:int - The containing width of the texture, applied to all child materials.
       height:int - The containing height of the texture, applied to all child materials.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       materials:Array
       transparent:Boolean (default = true)
       cache:Boolean (default = true)
  METHOD DETAIL

    protected override function getMapping(tri:DrawTriangle):Matrix 
      Calculates the mapping matrix required to draw the triangle texture to screen.
      Parameters
       tri:DrawTriangle - The data object holding all information about the triangle to be drawn.
       Returns
       Matrix - The required matrix object.

    public override function renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO 
      Renders a bitmapData surface object for the speficied face.
      Parameters
       face:Face - The face object onto which the rendered sufrace is applied.
       containerRect:Rectangle - The rectangle object defining the bounds of the face in uv-space.
       parentFaceVO:FaceVO - The value object of the preceeding surface.
       Returns
       FaceVO

    public function update():void 
      Clear and updates the currrent bitmapData surface on all faces.

    public override function updateMaterial(source:Object3D, view:View3D):void 
      Creates a new BitmapMaterialContainer object.
      Parameters
       source:Object3D - The containing width of the texture, applied to all child materials.
       view:View3D - The containing height of the texture, applied to all child materials.

    protected override function updateRenderBitmap():void 
      Updates the texture bitmapData with the colortransform determined from the color and alpha properties.
  CODE EXAMPLES

    
      There are currently no examples for this class


BitmapRenderSession
===================
  Package : away3d.core.render
  Class : public class BitmapRenderSession
  Inheritance : AbstractRenderSession
  Description : 

  PUBLIC PROPERTIES
    (^) children : Dictionary - Dictionary of child displayobjects. (AbstractRenderSession)
    (^) graphics : Graphics - Reference to the current graphics object being used for drawing. (AbstractRenderSession)
    (^) lightarray : LightArray - Defines the light provider object for the render sesion. (AbstractRenderSession)
    (^) newLayer : Sprite - Holds the last added layer sprite. (AbstractRenderSession)
    (^) sessions : Dictionary - Dictionary of child sessions. (AbstractRenderSession)
    (^) spriteLayers : Array - Dictionary of sprite layers for rendering composite materials. (AbstractRenderSession)
        view : View3D - Defines the view object used for the render session. (BitmapRenderSession)

  PUBLIC METHODS
        (BitmapRenderSession)
        addDisplayObject(child:DisplayObject):void - Adds a display object to the render session display list. (BitmapRenderSession)
        addLayerObject(child:Sprite):void - Adds a layer sprite to the render session display list. (BitmapRenderSession)
        clear():void - Clears the render session. (BitmapRenderSession)
        clone():AbstractRenderSession - Duplicates the render session's properties to another render session. (BitmapRenderSession)
        flush():void - Flushes any cached drawing operations to screen. (BitmapRenderSession)
        getBitmapData(view:View3D):BitmapData - Returns a bitmapData object containing the rendered view. (BitmapRenderSession)
        getContainer(view:View3D):DisplayObject - Returns a display object representing the container for the specified view. (BitmapRenderSession)
    (^) registerChildSession(session:AbstractRenderSession):void - Adds a session as a child of the session object. (AbstractRenderSession)
    (^) renderBitmap(bitmap:BitmapData, v0:ScreenVertex, smooth:Boolean = false):void - Draws a non-scaled bitmap into the graphics object. (AbstractRenderSession)
    (^) renderFogColor(color:int, alpha:Number):void - Draws a fog element into the graphics object. (AbstractRenderSession)
    (^) renderLine(v0:ScreenVertex, v1:ScreenVertex, width:Number, color:uint, alpha:Number):void - Draws a segment element into the graphics object. (AbstractRenderSession)
    (^) renderScaledBitmap(primitive:DrawScaledBitmap, bitmap:BitmapData, mapping:Matrix, smooth:Boolean = false):void - Draws a bitmap with a precalculated matrix into the graphics object. (AbstractRenderSession)
    (^) renderTriangleBitmap(bitmap:BitmapData, map:Matrix, v0:ScreenVertex, v1:ScreenVertex, v2:ScreenVertex, smooth:Boolean, repeat:Boolean, layerGraphics:Graphics = null):void - Draws a triangle element with a bitmap texture into the graphics object. (AbstractRenderSession)
    (^) renderTriangleColor(color:int, alpha:Number, v0:ScreenVertex, v1:ScreenVertex, v2:ScreenVertex):void - Draws a triangle element with a fill color into the graphics object. (AbstractRenderSession)
    (^) renderTriangleLine(width:Number, color:int, alpha:Number, v0:ScreenVertex, v1:ScreenVertex, v2:ScreenVertex):void - Draws a wire triangle element into the graphics object. (AbstractRenderSession)
    (^) renderTriangleLineFill(width:Number, color:int, alpha:Number, wirecolor:int, wirealpha:Number, v0:ScreenVertex, v1:ScreenVertex, v2:ScreenVertex):void - Draws a wire triangle element with a fill color into the graphics object. (AbstractRenderSession)

  PROTECTED METHODS
        createLayer():void - Creates a new render layer for rendering composite materials. (BitmapRenderSession)

  PROPERTY DETAIL

    view:View3D[read-write]
      Defines the view object used for the render session.
      Implementation
       public function get view():View3D
       public function set view(value:View3D):void

  CONSTRUCTOR DETAIL

    public function BitmapRenderSession(scale:Number = 2) 
      Parameters
       scale:Number (default = 2) - [optional] Defines the scale of the pixel resolution in base pixels. Default value is 2.
  METHOD DETAIL

    public override function addDisplayObject(child:DisplayObject):void 
      Adds a display object to the render session display list.
      Parameters
       child:DisplayObject - The display object to add.

    public override function addLayerObject(child:Sprite):void 
      Adds a layer sprite to the render session display list. Doesn't update graphics so that elements in comosite materials can render in separate layers.
      Parameters
       child:Sprite - The display object to add.

    public override function clear():void 
      Clears the render session.

    public override function clone():AbstractRenderSession 
      Duplicates the render session's properties to another render session.
      Returns
      AbstractRenderSession - The new render session instance with duplicated properties applied

    protected override function createLayer():void 
      Creates a new render layer for rendering composite materials.

    public override function flush():void 
      Flushes any cached drawing operations to screen.

    public function getBitmapData(view:View3D):BitmapData 
      Returns a bitmapData object containing the rendered view.
      Parameters
       view:View3D - The view object being rendered.
       Returns
       BitmapData - The bitmapData object.

    public override function getContainer(view:View3D):DisplayObject 
      Returns a display object representing the container for the specified view.
      Parameters
       view:View3D - The view object being rendered.
       Returns
       DisplayObject - The display object container.
  CODE EXAMPLES

    
      There are currently no examples for this class


Blocker
=======
  Package : away3d.core.block
  Class : public class Blocker
  Inheritance : DrawPrimitive
  Subclasses : ConvexBlocker
  Description : Abstract primitive that can block other primitives from drawing

  PUBLIC PROPERTIES
    (^) create : Function - Placeholder function for creating new drawing primitives from a cache of objects. (DrawPrimitive)
    (^) maxX : Number - Indicates the maximum x value of the drawing primitive. (DrawPrimitive)
    (^) maxY : Number - Indicates the maximum y value of the drawing primitive. (DrawPrimitive)
    (^) maxZ : Number - Indicates the maximum z value of the drawing primitive. (DrawPrimitive)
    (^) minX : Number - Indicates the minimum x value of the drawing primitive. (DrawPrimitive)
    (^) minY : Number - Indicates the minimum y value of the drawing primitive. (DrawPrimitive)
    (^) minZ : Number - Indicates the minimum z value of the drawing primitive. (DrawPrimitive)
    (^) projection : Projection - Reference to the last projection object used for the primitive (DrawPrimitive)
    (^) quadrant : PrimitiveQuadrantTreeNode - Reference to the last quadrant used by the drawing primitive. (DrawPrimitive)
    (^) screenZ : Number - Indicates the screen z value of the drawing primitive (used for z-sorting). (DrawPrimitive)
    (^) source : Object3D - The parent 3d object of the drawing primitive. (DrawPrimitive)

  PUBLIC METHODS
        block(pri:DrawPrimitive):Boolean - Return value signifies whether the given drawprimitive should be blocked. (Blocker)
    (^) calc():void - Calculates the min, max and screen properties required for rendering the drawing primitive. (DrawPrimitive)
    (^) clear():void - Deletes the data currently held by the drawing primitive. (DrawPrimitive)
    (^) contains(x:Number, y:Number):Boolean - Determines whether the given point lies inside the drawing primitive (DrawPrimitive)
    (^) getZ(x:Number, y:Number):Number - Calulates the screen z value of a precise point on the drawing primitive. (DrawPrimitive)
    (^) quarter(focus:Number):Array - Cuts the drawing primitive into 4 equally sized drawing primitives. (DrawPrimitive)
    (^) render():void - Draws the primitive to the view. (DrawPrimitive)
    (^) toString():String - Used to trace the values of a drawing primitive. (DrawPrimitive)

  METHOD DETAIL

    public function block(pri:DrawPrimitive):Boolean 
      Return value signifies whether the given drawprimitive should be blocked. Called from the PrimitiveArray object on each blocker in the blockers array.
      Parameters
       pri:DrawPrimitive
       Returns
       Boolean
       See also
       away3d.core.draw.PrimitiveArray

  CODE EXAMPLES

    
      There are currently no examples for this class


BlockerArray
============
  Package : away3d.core.block
  Class : public class BlockerArray
  Implements : IBlockerConsumer
  Description : Array for storing blocker objects

  PUBLIC PROPERTIES
        clip : Clipping - Determines the viewport clipping to be used on blocker primitives. (BlockerArray)

  PUBLIC METHODS
        blocker(block:Blocker):void - Adds blocker primitive to the consumer. (BlockerArray)
        list():Array (BlockerArray)

  PROPERTY DETAIL

    clip:Clipping[read-write]
      Determines the viewport clipping to be used on blocker primitives.
      Implementation
       public function get clip():Clipping
       public function set clip(value:Clipping):void

  METHOD DETAIL

    public function blocker(block:Blocker):void 
      Adds blocker primitive to the consumer.
      Parameters
       block:Blocker - The blocker primitive to add.

    public function list():Array 
      Returns a sorted list of blocker primitives for use in BasicRender
      Returns
      Array
      See also
      away3d.core.render.BasicRender

  CODE EXAMPLES

    
      There are currently no examples for this class


BlockerTraverser
================
  Package : away3d.core.traverse
  Class : public class BlockerTraverser
  Inheritance : Traverser
  Description : 

  PUBLIC PROPERTIES
        consumer : IBlockerConsumer - Defines the blocker consumer being used. (BlockerTraverser)
        view : View3D - Defines the view being used. (BlockerTraverser)

  PUBLIC METHODS
        (BlockerTraverser)
        apply(node:Object3D):void - Executed when the traverser is applied to the node. (BlockerTraverser)
    (^) enter(node:Object3D):void - Executed when the traverser enters the node. (Traverser)
    (^) leave(node:Object3D):void - Executed when the traverser leaves the node. (Traverser)
        match(node:Object3D):Boolean - Determines if the specified node is required to be traversed. (BlockerTraverser)

  PROPERTY DETAIL

    public var consumer:IBlockerConsumer 
      Defines the blocker consumer being used.

    public var view:View3D 
      Defines the view being used.
  CONSTRUCTOR DETAIL

    public function BlockerTraverser() 
  METHOD DETAIL

    public override function apply(node:Object3D):void 
      Executed when the traverser is applied to the node.
      Parameters
       node:Object3D

    public override function match(node:Object3D):Boolean 
      Determines if the specified node is required to be traversed.
      Parameters
       node:Object3D - The 3d object to be tested.
       Returns
       Boolean - The result of the test.
  CODE EXAMPLES

    
      There are currently no examples for this class


Button
======
  Package : away3d.test
  Class : public class Button
  Inheritance
  PUBLIC PROPERTIES
        selected : Boolean = false -  (Button)

  PUBLIC METHODS
        -  (Button)

  PROPERTY DETAIL

    public var selected:Boolean = false 
  CONSTRUCTOR DETAIL

    public function Button(text:String, pwidth:int = 80, pheight:int = 20) 
      Parameters
       text:String
       pwidth:int (default = 80)
       pheight:int (default = 20)
  CODE EXAMPLES

    
      There are currently no examples for this class


CacheStore
==========
  Package : away3d.core.utils
  Class : public class CacheStore

  PUBLIC PROPERTIES
        whiteShadingCache : Dictionary - [static] (CacheStore)

  PROPERTY DETAIL

    public static var whiteShadingCache:Dictionary 
  CODE EXAMPLES

    
      There are currently no examples for this class


Camera3D
========
  Package : away3d.cameras
  Class : public class Camera3D
  Inheritance : Object3D
  Subclasses : TargetCamera3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
        aperture : Number (Camera3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (Object3D)
        dof : Boolean (Camera3D)
        doflevels : Number = 16 (Camera3D)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
        focus : Number - A divisor value for the perspective depth of the view. (Camera3D)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
        maxblur : Number = 150 (Camera3D)
    (^) maxX : Number - Returns the maximum x value of the 3d object (Object3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (Object3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (Object3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (Object3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (Object3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (Object3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
        view : Matrix3D - [read-only] Returns the transformation matrix used to resolve the scene to the view. (Camera3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)
        zoom : Number - Provides an overall scale value to the view (Camera3D)

  PROTECTED PROPERTIES
        (Camera3D)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
        clone(object:* = null):* (Camera3D)
        disableDof():void (Camera3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
        enableDof():void (Camera3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
        pan(angle:Number):void - Rotates the camera in its horizontal plane. (Camera3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Object3D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (Object3D)
        screen(object:Object3D, vertex:Vertex = null):ScreenVertex (Camera3D)
    (^) tick(time:int):void (Object3D)
        tilt(angle:Number):void - Rotates the camera in its vertical plane. (Camera3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PROPERTY DETAIL

    aperture:Number[read-write]
      Used in DofSprite2D.
      Implementation
       public function get aperture():Number
       public function set aperture(value:Number):void
       See also
       away3d.sprites.DofSprite2D


    dof:Boolean[read-write]
      Used in DofSprite2D.
      Implementation
       public function get dof():Boolean
       public function set dof(value:Boolean):void
       See also
       away3d.sprites.DofSprite2D


    public var doflevels:Number = 16 
      Used in DofSprite2D.
      See also
      away3d.sprites.DofSprite2D


    focus:Number[read-write]
      A divisor value for the perspective depth of the view.
      Implementation
       public function get focus():Number
       public function set focus(value:Number):void


    public var maxblur:Number = 150 
      Used in DofSprite2D.
      See also
      away3d.sprites.DofSprite2D


    view:Matrix3D[read-only]
      Returns the transformation matrix used to resolve the scene to the view. Used in the ProjectionTraverser class
      Implementation
       public function get view():Matrix3D
       See also
       away3d.core.traverse.ProjectionTraverser


    public var zoom:Number 
      Provides an overall scale value to the view
  CONSTRUCTOR DETAIL

    public function Camera3D(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       zoom:Number (default = 10)
       focus:Number (default = 100)
       aperture:Number (default = 22)
       maxblur:Number (default = 150)
       doflevels:Number (default = 16)
       dof:Boolean (default = false)
       lookat:Position
  METHOD DETAIL

    public override function clone(object:* = null):* 
      Duplicates the camera's properties to another Camera3D object.
      Parameters
       object:* (default = null) - [optional] The new object instance into which all properties are copied.
       Returns
       * - The new object instance with duplicated properties applied.

    public function disableDof():void 
      Used in DofSprite2D
      See also
      away3d.sprites.DofSprite2D


    public function enableDof():void 
      Used in DofSprite2D.
      See also
      away3d.sprites.DofSprite2D


    public function pan(angle:Number):void 
      Rotates the camera in its horizontal plane. Panning the camera results in a motion similar to someone shaking their head "no".
      Parameters
       angle:Number - Angle to pan the camera.

    public function screen(object:Object3D, vertex:Vertex = null):ScreenVertex 
      Returns a ScreenVertex object describing the resolved x and y position of the given Vertex object.
      Parameters
       object:Object3D - The local object for the Vertex. If none exists, use the Scene3D object.
       vertex:Vertex (default = null) - The vertex to be resolved.
       Returns
       ScreenVertex
       See also
       away3d.containers.Scene3D


    public function tilt(angle:Number):void 
      Rotates the camera in its vertical plane. Tilting the camera results in a motion similar to someone nodding their head "yes".
      Parameters
       angle:Number - Angle to tilt the camera.
  CODE EXAMPLES

    
      lookAt() an Object
      camera.lookAt(myObjectA.position); // if mesh it top level object
      camera.lookAt(myObjectA.worldPosition); // if mesh is in a container

Cast
====
  Package : away3d.core.utils
  Class : public class Cast

  PUBLIC METHODS
        bitmap(data:*):BitmapData - [static] (Cast)
        bytearray(data:*):ByteArray - [static] (Cast)
        color(data:*):uint - [static] (Cast)
        material(data:*):ITriangleMaterial - [static] (Cast)
        string(data:*):String - [static] (Cast)
        tryclass(name:String):Object - [static] (Cast)
        trycolor(data:*):uint - [static] (Cast)
        wirematerial(data:*):ISegmentMaterial - [static] (Cast)
        xml(data:*):XML - [static] (Cast)

  METHOD DETAIL

    public static function bitmap(data:*):BitmapData 
      Parameters
       data:*
       Returns
       BitmapData

    public static function bytearray(data:*):ByteArray 
      Parameters
       data:*
       Returns
       ByteArray

    public static function color(data:*):uint 
      Parameters
       data:*
       Returns
       uint

    public static function material(data:*):ITriangleMaterial 
      Parameters
       data:*
       Returns
       ITriangleMaterial

    public static function string(data:*):String 
      Parameters
       data:*
       Returns
       String

    public static function tryclass(name:String):Object 
      Parameters
       name:String
       Returns
       Object

    public static function trycolor(data:*):uint 
      Parameters
       data:*
       Returns
       uint

    public static function wirematerial(data:*):ISegmentMaterial 
      Parameters
       data:*
       Returns
       ISegmentMaterial

    public static function xml(data:*):XML 
      Parameters
       data:*
       Returns
       XML
  CODE EXAMPLES

    
      There are currently no examples for this class


CastError
=========
  Package : away3d.core.utils
  Class : public class CastError
  Inheritance
  PUBLIC METHODS
        -  (CastError)

  CONSTRUCTOR DETAIL

    public function CastError(message:String) 
      Parameters
       message:String
  CODE EXAMPLES

    
      There are currently no examples for this class


CenterLightingMaterial
======================
  Package : away3d.materials
  Class : public class CenterLightingMaterial
  Inheritance  Implements : ITriangleMaterial, IUpdatingMaterial
  Subclasses : ShadingColorMaterial, WhiteShadingBitmapMaterial
  Description : 

  PUBLIC PROPERTIES
        ak : Number = 20 - Coefficient for shininess level (CenterLightingMaterial)
        ambient_brightness : Number = 1 - Coefficient for ambient light level (CenterLightingMaterial)
        diffuse_brightness : Number = 1 - Coefficient for diffuse light level (CenterLightingMaterial)
        specular_brightness : Number = 1 - Coefficient for specular light level (CenterLightingMaterial)

  PROTECTED PROPERTIES
        ini : Init - Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor. (CenterLightingMaterial)

  PUBLIC METHODS
        renderTriangle(tri:DrawTriangle):void (CenterLightingMaterial)
        updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (CenterLightingMaterial)

  PROPERTY DETAIL

    public var ak:Number = 20 
      Coefficient for shininess level

    public var ambient_brightness:Number = 1 
      Coefficient for ambient light level

    public var diffuse_brightness:Number = 1 
      Coefficient for diffuse light level

    protected var ini:Init 
      Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor.

    public var specular_brightness:Number = 1 
      Coefficient for specular light level
  METHOD DETAIL

    public function renderTriangle(tri:DrawTriangle):void 
      Sends data from the material coupled with data from the DrawTriangle primitive to the render session.
      Parameters
       tri:DrawTriangle

    public function updateMaterial(source:Object3D, view:View3D):void 
      Called once per render loop when material is visible.
      Parameters
       source:Object3D
       view:View3D
  CODE EXAMPLES

    
      There are currently no examples for this class


Clipping
========
  Package : away3d.core.clip
  Class : public class Clipping
  Subclasses : RectangleClipping
  Description : 

  PUBLIC PROPERTIES
        maxX : Number = 1000000 - Maximum allowed x value for primitives (Clipping)
        maxY : Number = 1000000 - Maximum allowed y value for primitives (Clipping)
        minX : Number = -1000000 - Minimum allowed x value for primitives (Clipping)
        minY : Number = -1000000 - Minimum allowed y value for primitives (Clipping)

  PUBLIC METHODS
        asRectangleClipping():RectangleClipping - Returns a rectangle clipping object representing the bounding box of the clipping object. (Clipping)
        check(pri:DrawPrimitive):Boolean - Checks a drawing primitive for clipping. (Clipping)
        rect(minX:Number, minY:Number, maxX:Number, maxY:Number):Boolean - Checks a bounding rectangle for clipping. (Clipping)
        screen(container:Sprite):Clipping - Returns a rectangle clipping object initilised with the edges of the flash movie as the clipping bounds. (Clipping)

  PROPERTY DETAIL

    public var maxX:Number = 1000000 
      Maximum allowed x value for primitives

    public var maxY:Number = 1000000 
      Maximum allowed y value for primitives

    public var minX:Number = -1000000 
      Minimum allowed x value for primitives

    public var minY:Number = -1000000 
      Minimum allowed y value for primitives
  METHOD DETAIL

    public function asRectangleClipping():RectangleClipping 
      Returns a rectangle clipping object representing the bounding box of the clipping object.
      Returns
      RectangleClipping

    public function check(pri:DrawPrimitive):Boolean 
      Checks a drawing primitive for clipping.
      Parameters
       pri:DrawPrimitive - The drawing primitive being checked.
       Returns
       Boolean - The clipping result - false for clipped, true for non-clipped.

    public function rect(minX:Number, minY:Number, maxX:Number, maxY:Number):Boolean 
      Checks a bounding rectangle for clipping.
      Parameters
       minX:Number - The x value for the left side of the rectangle.
       minY:Number - The y value for the top side of the rectangle.
       maxX:Number - The x value for the right side of the rectangle.
       maxY:Number - The y value for the bottom side of the rectangle.
       Returns
       Boolean - The clipping result - false for clipped, true for non-clipped.

    public function screen(container:Sprite):Clipping 
      Returns a rectangle clipping object initilised with the edges of the flash movie as the clipping bounds.
      Parameters
       container:Sprite
       Returns
       Clipping
  CODE EXAMPLES

    
      There are currently no examples for this class


Collada
=======
  Package : away3d.loaders
  Class : public class Collada

  PUBLIC PROPERTIES
        container : ObjectContainer3D - 3d container object used for storing the parsed collada scene. (Collada)
        containerData : ContainerData - Container data object used for storing the parsed collada data structure. (Collada)
        materialLibrary : MaterialLibrary - Reference container for all materials used in the collada scene. (Collada)

  PUBLIC METHODS
        (Collada)
        load(url:String, init:Object = null):Object3DLoader - [static] Loads and parses a collada file into a 3d container object. (Collada)
        loadTextures(data:*, init:Object = null):Object3DLoader - [static] Loads and parses the textures for a collada file into a 3d container object. (Collada)
        parse(data:*, init:Object = null, loader:Object = null):ObjectContainer3D - [static] Creates a 3d container object from the raw xml data of a collada file. (Collada)

  PROPERTY DETAIL

    public var container:ObjectContainer3D 
      3d container object used for storing the parsed collada scene.

    public var containerData:ContainerData 
      Container data object used for storing the parsed collada data structure.

    public var materialLibrary:MaterialLibrary 
      Reference container for all materials used in the collada scene.
  CONSTRUCTOR DETAIL

    public function Collada(xml:XML, init:Object = null) 
      Parameters
       xml:XML - The xml data of a loaded file.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       texturePath:String (default = "")
       autoLoadTextures:Boolean (default = true)
       scaling:Number (default = 1)
       material:Material
       centerMeshes:Boolean (default = false)
       materials:Object
       See also
       away3d.loaders.Collada.parse()
       away3d.loaders.Collada.load()

  METHOD DETAIL

    public static function load(url:String, init:Object = null):Object3DLoader 
      Loads and parses a collada file into a 3d container object.
      Parameters
       url:String - The url location of the file to load.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Returns
       Object3DLoader - A 3d loader object that can be used as a placeholder in a scene while the file is loading.

    public static function loadTextures(data:*, init:Object = null):Object3DLoader 
      Loads and parses the textures for a collada file into a 3d container object.
      Parameters
       data:* - The xml data of a loaded file.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Returns
       Object3DLoader - A 3d loader object that can be used as a placeholder in a scene while the textures are loading.

    public static function parse(data:*, init:Object = null, loader:Object = null):ObjectContainer3D 
      Creates a 3d container object from the raw xml data of a collada file.
      Parameters
       data:* - The xml data of a loaded file.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       loader:Object (default = null) - [optional] Not intended for direct use.
       Returns
       ObjectContainer3D - A 3d container object representation of the collada file.
  CODE EXAMPLES

    
      There are currently no examples for this class


CollisionMap
============
  Package : away3d.extrusions
  Class : public class CollisionMap
  Inheritance
  PUBLIC PROPERTIES
        offsetx : Number - [write-only] (CollisionMap)
        offsety : Number - [write-only] (CollisionMap)

  PUBLIC METHODS
        -  (CollisionMap)
        getColorAt(x:Number, y:Number):Number -  (CollisionMap)
        read(x:Number, y:Number):void -  (CollisionMap)
        setColorEvent(color:Number, eventID:String, listener:Function):void -  (CollisionMap)

  PROPERTY DETAIL

    offsetx:Number[write-only]
      Implementation
       public function set offsetx(value:Number):void


    offsety:Number[write-only]
      Implementation
       public function set offsety(value:Number):void

  CONSTRUCTOR DETAIL

    public function CollisionMap(source:BitmapData, view:Object, factorX:Number = 0, factorY:Number = 0) 
      Parameters
       source:BitmapData
       view:Object
       factorX:Number (default = 0)
       factorY:Number (default = 0)
  METHOD DETAIL

    public function getColorAt(x:Number, y:Number):Number 
      Parameters
       x:Number
       y:Number
       Returns
       Number

    public function read(x:Number, y:Number):void 
      Parameters
       x:Number
       y:Number

    public function setColorEvent(color:Number, eventID:String, listener:Function):void 
      Parameters
       color:Number
       eventID:String
       listener:Function
  CODE EXAMPLES

    
      There are currently no examples for this class


Color
=====
  Package : away3d.core.utils
  Class : public class Color

  PUBLIC METHODS
        add(colora:int, colorb:int):int - [static] (Color)
        fromFloats(red:Number, green:Number, blue:Number):int - [static] (Color)
        fromHSV(hue:Number, saturation:Number, value:Number):int - [static] (Color)
        fromInts(red:int, green:int, blue:int):int - [static] (Color)
        fromIntsCheck(red:int, green:int, blue:int):int - [static] (Color)
        inverseAdd(colora:int, colorb:int):int - [static] (Color)
        multiply(color:int, k:Number):int - [static] (Color)

  PUBLIC CONSTANTS
        black : int = 0x000000 - [static] (Color)
        blue : int = 0x0000FF - [static] (Color)
        cyan : int = 0x00FFFF - [static] (Color)
        green : int = 0x00FF00 - [static] (Color)
        purple : int = 0xFF00FF - [static] (Color)
        red : int = 0xFF0000 - [static] (Color)
        white : int = 0xFFFFFF - [static] (Color)
        yellow : int = 0xFFFF00 - [static] (Color)

  METHOD DETAIL

    public static function add(colora:int, colorb:int):int 
      Parameters
       colora:int
       colorb:int
       Returns
       int

    public static function fromFloats(red:Number, green:Number, blue:Number):int 
      Parameters
       red:Number
       green:Number
       blue:Number
       Returns
       int

    public static function fromHSV(hue:Number, saturation:Number, value:Number):int 
      Parameters
       hue:Number
       saturation:Number
       value:Number
       Returns
       int

    public static function fromInts(red:int, green:int, blue:int):int 
      Parameters
       red:int
       green:int
       blue:int
       Returns
       int

    public static function fromIntsCheck(red:int, green:int, blue:int):int 
      Parameters
       red:int
       green:int
       blue:int
       Returns
       int

    public static function inverseAdd(colora:int, colorb:int):int 
      Parameters
       colora:int
       colorb:int
       Returns
       int

    public static function multiply(color:int, k:Number):int 
      Parameters
       color:int
       k:Number
       Returns
       int
  CONSTANT DETAIL

    public static const black:int = 0x000000 

    public static const blue:int = 0x0000FF 

    public static const cyan:int = 0x00FFFF 

    public static const green:int = 0x00FF00 

    public static const purple:int = 0xFF00FF 

    public static const red:int = 0xFF0000 

    public static const white:int = 0xFFFFFF 

    public static const yellow:int = 0xFFFF00 
  CODE EXAMPLES

    
      There are currently no examples for this class


ColorMaterial
=============
  Package : away3d.materials
  Class : public class ColorMaterial
  Implements : IFogMaterial, ITriangleMaterial
  Description : Material for solid color drawing

  PUBLIC PROPERTIES
        alpha : Number - Determines the alpha value of the material (ColorMaterial)
        color : uint - 24 bit color value representing the material color (ColorMaterial)
        visible : Boolean - [read-only] Indicates whether the material is visible (ColorMaterial)

  PROTECTED PROPERTIES
        ini : Init - Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor. (ColorMaterial)

  PUBLIC METHODS
        (ColorMaterial)
        clone():IFogMaterial (ColorMaterial)
        renderFog(fog:DrawFog):void - Sends the material data coupled with data from the DrawFog primitive to the render session (ColorMaterial)
        renderTriangle(tri:DrawTriangle):void (ColorMaterial)

  PROPERTY DETAIL

    alpha:Number[read-write]
      Determines the alpha value of the material
      Implementation
       public function get alpha():Number
       public function set alpha(value:Number):void


    public var color:uint 
      24 bit color value representing the material color

    protected var ini:Init 
      Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor.

    visible:Boolean[read-only]
      Indicates whether the material is visible
      Implementation
       public function get visible():Boolean

  CONSTRUCTOR DETAIL

    public function ColorMaterial(color:* = null, init:Object = null) 
      Parameters
       color:* (default = null) - A string, hex value or colorname representing the color of the material.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       alpha:Number (default = 1, min:0, max:1)
  METHOD DETAIL

    public function clone():IFogMaterial 
      Duplicates the material's properties to another IFogMaterial object
      Returns
      IFogMaterial - The new object instance with duplicated properties applied

    public function renderFog(fog:DrawFog):void 
      Sends the material data coupled with data from the DrawFog primitive to the render session
      Parameters
       fog:DrawFog

    public function renderTriangle(tri:DrawTriangle):void 
      Sends data from the material coupled with data from the DrawTriangle primitive to the render session.
      Parameters
       tri:DrawTriangle
  CODE EXAMPLES

    
      There are currently no examples for this class


CompositeMaterial
=================
  Package : away3d.materials
  Class : public class CompositeMaterial
  Implements : ILayerMaterial, ITriangleMaterial, IUpdatingMaterial
  Subclasses : Dot3BitmapMaterial, Dot3MovieMaterial, EnviroBitmapMaterial, PhongBitmapMaterial, PhongColorMaterial, PhongMovieMaterial
  Description : 

  PUBLIC PROPERTIES
        alpha : Number - Defines an alpha value for the layer container. (CompositeMaterial)
        blendMode : String - Defines a blendMode value for the layer container. (CompositeMaterial)
        color : uint - Defines a colored tint for the layer container. (CompositeMaterial)
        materials : Array - An array of bitmapmaterial objects to be overlayed sequentially. (CompositeMaterial)
        visible : Boolean - [read-only] Indicates whether the material is visible (CompositeMaterial)

  PROTECTED PROPERTIES
        ini : Init - Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor. (CompositeMaterial)

  PUBLIC METHODS
        (CompositeMaterial)
        renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (CompositeMaterial)
        renderTriangle(tri:DrawTriangle):void (CompositeMaterial)
        updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (CompositeMaterial)

  PROTECTED METHODS
        setColorTransform():void (CompositeMaterial)

  PROPERTY DETAIL

    alpha:Number[read-write]
      Defines an alpha value for the layer container.
      Implementation
       public function get alpha():Number
       public function set alpha(value:Number):void


    public var blendMode:String 
      Defines a blendMode value for the layer container.

    color:uint[read-write]
      Defines a colored tint for the layer container.
      Implementation
       public function get color():uint
       public function set color(value:uint):void


    protected var ini:Init 
      Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor.

    public var materials:Array 
      An array of bitmapmaterial objects to be overlayed sequentially.

    visible:Boolean[read-only]
      Indicates whether the material is visible
      Implementation
       public function get visible():Boolean

  CONSTRUCTOR DETAIL

    public function CompositeMaterial(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       materials:Array
       blendMode:String (default = BlendMode.NORMAL)
       alpha:Number (default = 1, min:0, max:1)
       color:Color (default = 0xFFFFFF)
  METHOD DETAIL

    public function renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void 
      Renders a material layer for the specified triangle.
      Parameters
       tri:DrawTriangle - The drawtriangle used for render information.
       layer:Sprite - The parent layer into which the triangle is drawn.
       level:int - Defines the sprite level for the layer.

    public function renderTriangle(tri:DrawTriangle):void 
      Sends data from the material coupled with data from the DrawTriangle primitive to the render session.
      Parameters
       tri:DrawTriangle

    protected function setColorTransform():void 
      Updates the colortransform object applied to the texture from the color and alpha properties.
      See also
      color
      alpha


    public function updateMaterial(source:Object3D, view:View3D):void 
      Called once per render loop when material is visible.
      Parameters
       source:Object3D
       view:View3D
  CODE EXAMPLES

    
      There are currently no examples for this class


Cone
====
  Package : away3d.primitives
  Class : public class Cone
  Inheritance : AbstractPrimitive, Mesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
        height : Number - Defines the height of the cone. (Cone)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
        openEnded : Boolean - Defines whether the end of the cone is left open (true) or closed (false). (Cone)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
        radius : Number - Defines the radius of the cone base. (Cone)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractPrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
        segmentsH : Number - Defines the number of vertical segments that make up the cone. (Cone)
        segmentsW : Number - Defines the number of horizontal segments that make up the cone. (Cone)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
        yUp : Boolean - Defines whether the coordinates of the cone points use a yUp orientation (true) or a zUp orientation (false). (Cone)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (Cone)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (Cone)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
        vertex(w:int, h:int):Vertex - Returns the vertex object specified by the grid position of the mesh. (Cone)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    height:Number[read-write]
      Defines the height of the cone. Defaults to 200.
      Implementation
       public function get height():Number
       public function set height(value:Number):void


    openEnded:Boolean[read-write]
      Defines whether the end of the cone is left open (true) or closed (false). Defaults to false.
      Implementation
       public function get openEnded():Boolean
       public function set openEnded(value:Boolean):void


    radius:Number[read-write]
      Defines the radius of the cone base. Defaults to 100.
      Implementation
       public function get radius():Number
       public function set radius(value:Number):void


    segmentsH:Number[read-write]
      Defines the number of vertical segments that make up the cone. Defaults to 1.
      Implementation
       public function get segmentsH():Number
       public function set segmentsH(value:Number):void


    segmentsW:Number[read-write]
      Defines the number of horizontal segments that make up the cone. Defaults to 8.
      Implementation
       public function get segmentsW():Number
       public function set segmentsW(value:Number):void


    yUp:Boolean[read-write]
      Defines whether the coordinates of the cone points use a yUp orientation (true) or a zUp orientation (false). Defaults to true.
      Implementation
       public function get yUp():Boolean
       public function set yUp(value:Boolean):void

  CONSTRUCTOR DETAIL

    public function Cone(init:Object = null) 
      Cone constructor takes an init object has a single parameter. The init object can define the 'radius' of the base of the cone, 'height' the height, 'segmentsW' the number of segments around the cone horizontally and 'segmentsH' the number of segments vertically.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       radius:Number (default = 100, min:0)
       height:Number (default = 200, min:0)
       segmentsW:Int (default = 8, min:3)
       segmentsH:Int (default = 1, min:1)
       openEnded:Boolean (default = false)
       yUp:Boolean (default = true)
  METHOD DETAIL

    public override function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.

    public function vertex(w:int, h:int):Vertex 
      Returns the vertex from a 2 dimensional representation of the cone's vertex array.
      I=horizontal reference.
      J=vertical reference (0 = base of the cone)
      Returns the vertex object specified by the grid position of the mesh.
      Parameters
       w:int - The horizontal position on the primitive mesh.
       h:int - The vertical position on the primitive mesh.
       Returns
       Vertex
  CODE EXAMPLES

    
      Cone Creation
      // Cone
      var cone1:Cone = new Cone({name:"Cone1", x:-250, segmentsH:5, segmentsW:20, height:250, material:new WireframeMaterial(0xff000000)});
      var cone2:Cone = new Cone({name:"Cone2", x:0, radius:50, material:new ShadingColorMaterial({color:0xaa0000})});
      var cone3:Cone = new Cone({name:"Cone3", x:250, segmentsH:10, segmentsW:20, material:new PreciseBitmapMaterial(textureImage)});
      var coneContainer:ObjectContainer3D = new ObjectContainer3D({name:"Cone", visible:true}, cone1, cone2, cone3);
      view.scene.addChild(coneContainer);
      Source Files : http://www.geepers.oxyuk.net/software/objectexamples.html
      Simple object creation tutorial

ContainerData
=============
  Package : away3d.loaders.data
  Class : public class ContainerData
  Inheritance : ObjectData
  Description : 

  PUBLIC PROPERTIES
        children : Array - An array containing the child 3d objects of the container. (ContainerData)
    (^) name : String - The name of the 3d object used as a unique reference. (ObjectData)
    (^) transform : Matrix3D - The 3d transformation matrix for the 3d object (ObjectData)

  PROPERTY DETAIL

    public var children:Array 
      An array containing the child 3d objects of the container.
  CODE EXAMPLES

    
      There are currently no examples for this class


ConvexBlock
===========
  Package : away3d.blockers
  Class : public class ConvexBlock
  Inheritance : Object3D
  Implements : IBlockerProvider, IPrimitiveProvider
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (Object3D)
        debug : Boolean - Toggles debug mode: blocker is visualised in the scene. (ConvexBlock)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) maxX : Number - Returns the maximum x value of the 3d object (Object3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (Object3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (Object3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (Object3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (Object3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (Object3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
        vertices : Array - Verticies to use for calculating the convex hull. (ConvexBlock)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (ConvexBlock)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
        blockers(consumer:IBlockerConsumer):void (ConvexBlock)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
        primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (ConvexBlock)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (Object3D)
    (^) tick(time:int):void (Object3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PROPERTY DETAIL

    public var debug:Boolean 
      Toggles debug mode: blocker is visualised in the scene.

    public var vertices:Array 
      Verticies to use for calculating the convex hull.
  CONSTRUCTOR DETAIL

    public function ConvexBlock(vertices:Array, init:Object = null) 
      Parameters
       vertices:Array - An Array of vertices to use for calculating the convex hull.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       debug:Boolean (default = false)
  METHOD DETAIL

    public function blockers(consumer:IBlockerConsumer):void 
      Called from the BlockerTraverser when passing Blocker objects to the blocker consumer object
      Parameters
       consumer:IBlockerConsumer - The consumer instance
       See also
       away3d.core.traverse.BlockerTraverser
       away3d.core.block.Blocker


    public override function primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void 
      Called from the PrimitiveTraverser when passing DrawPrimitive objects to the primitive consumer object
      Parameters
       consumer:IPrimitiveConsumer - The consumer instance
       session:AbstractRenderSession - The render session of the 3d object
       See also
       away3d.core.traverse.PrimitiveTraverser
       away3d.core.draw.DrawPrimitive

  CODE EXAMPLES

    
      There are currently no examples for this class


ConvexBlocker
=============
  Package : away3d.core.block
  Class : public class ConvexBlocker
  Inheritance : Blocker, DrawPrimitive
  Description : 

  PUBLIC PROPERTIES
    (^) create : Function - Placeholder function for creating new drawing primitives from a cache of objects. (DrawPrimitive)
    (^) maxX : Number - Indicates the maximum x value of the drawing primitive. (DrawPrimitive)
    (^) maxY : Number - Indicates the maximum y value of the drawing primitive. (DrawPrimitive)
    (^) maxZ : Number - Indicates the maximum z value of the drawing primitive. (DrawPrimitive)
    (^) minX : Number - Indicates the minimum x value of the drawing primitive. (DrawPrimitive)
    (^) minY : Number - Indicates the minimum y value of the drawing primitive. (DrawPrimitive)
    (^) minZ : Number - Indicates the minimum z value of the drawing primitive. (DrawPrimitive)
    (^) projection : Projection - Reference to the last projection object used for the primitive (DrawPrimitive)
    (^) quadrant : PrimitiveQuadrantTreeNode - Reference to the last quadrant used by the drawing primitive. (DrawPrimitive)
    (^) screenZ : Number - Indicates the screen z value of the drawing primitive (used for z-sorting). (DrawPrimitive)
    (^) source : Object3D - The parent 3d object of the drawing primitive. (DrawPrimitive)
        vertices : Array - Defines the vertices used to calulate the convex hull. (ConvexBlocker)

  PUBLIC METHODS
        block(pri:DrawPrimitive):Boolean - Return value signifies whether the given drawprimitive should be blocked. (ConvexBlocker)
        calc():void - Calculates the min, max and screen properties required for rendering the drawing primitive. (ConvexBlocker)
    (^) clear():void - Deletes the data currently held by the drawing primitive. (DrawPrimitive)
        contains(x:Number, y:Number):Boolean - Determines whether the given point lies inside the drawing primitive (ConvexBlocker)
    (^) getZ(x:Number, y:Number):Number - Calulates the screen z value of a precise point on the drawing primitive. (DrawPrimitive)
    (^) quarter(focus:Number):Array - Cuts the drawing primitive into 4 equally sized drawing primitives. (DrawPrimitive)
        render():void - Draws the primitive to the view. (ConvexBlocker)
    (^) toString():String - Used to trace the values of a drawing primitive. (DrawPrimitive)

  PROPERTY DETAIL

    public var vertices:Array 
      Defines the vertices used to calulate the convex hull.
  METHOD DETAIL

    public override function block(pri:DrawPrimitive):Boolean 
      Return value signifies whether the given drawprimitive should be blocked. Called from the PrimitiveArray object on each blocker in the blockers array.
      Parameters
       pri:DrawPrimitive
       Returns
       Boolean

    public override function calc():void 
      Calculates the min, max and screen properties required for rendering the drawing primitive.

    public override function contains(x:Number, y:Number):Boolean 
      Determines whether the given point lies inside the drawing primitive
      Parameters
       x:Number - The x position of the point to be tested.
       y:Number - The y position of the point to be tested.
       Returns
       Boolean - The result of the test.

    public override function render():void 
      Draws the primitive to the view.
  CODE EXAMPLES

    
      There are currently no examples for this class


Cube
====
  Package : away3d.primitives
  Class : public class Cube
  Inheritance : AbstractPrimitive, Mesh, BaseMesh, Object3D
  Subclasses : LogoCube
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
        cubeMaterials : CubeMaterialsData - Defines the face materials of the cube. (Cube)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
        depth : Number - Defines the depth of the cube. (Cube)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
        height : Number - Defines the height of the cube. (Cube)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractPrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
        width : Number - Defines the width of the cube. (Cube)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (Cube)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (Cube)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    cubeMaterials:CubeMaterialsData[read-write]
      Defines the face materials of the cube.
      Implementation
       public function get cubeMaterials():CubeMaterialsData
       public function set cubeMaterials(value:CubeMaterialsData):void


    depth:Number[read-write]
      Defines the depth of the cube. Defaults to 100.
      Implementation
       public function get depth():Number
       public function set depth(value:Number):void


    height:Number[read-write]
      Defines the height of the cube. Defaults to 100.
      Implementation
       public function get height():Number
       public function set height(value:Number):void


    width:Number[read-write]
      Defines the width of the cube. Defaults to 100.
      Implementation
       public function get width():Number
       public function set width(value:Number):void

  CONSTRUCTOR DETAIL

    public function Cube(init:Object = null) 
      Constructor for a cube object. The init object parameters are : 'size' defines all the dimensions of the cube unless overridden, 'width'/'height'/'depth' explicit dimensions for the cube and 'faces' which itself is an init object.
      The 'faces' object takes the following parameters as materials : 'left', 'right', 'bottom', 'top', 'front' and 'back'.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       width:Number (default = 100, min:0)
       height:Number (default = 100, min:0)
       depth:Number (default = 100, min:0)
       faces:CubeMaterials
       cubeMaterials:CubeMaterials
  METHOD DETAIL

    public override function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.
  CODE EXAMPLES

    
      *Lesson_Basic_02_Primitives.fla
      // import core library
      import away3d.core.scene.*;
      // import geometry primitives
      import away3d.objects.*;
      // create a 3D-viewport
      var view:View3D = new View3D({x:300, y:200});
      addChild(view);
      // create primitives
      var plane:Object3D = new Plane({material:"yellow#", name:"plane", y:-100, width:1000, height:1000, pushback:true});
      var sphere:Object3D = new Sphere({material:"red#", name:"sphere", x: 300, y:160, z: 300, radius:150, segmentsW:12, segmentsH:9});
      var cube:Object3D = new Cube({material:"blue#", name:"cube", x: 300, y:160, z: -80, width:200, height:200, depth:200});
      var torus:Object3D = new Torus({material:"limegreen#", name:"torus", x:-250, y:160, z:-250, radius:150, tube:60, segmentsR:8, segmentsT:6});
      // add primitives to the scene
      view.scene.addChildren(sphere, cube, plane, torus);
      // set camera in space
      view.camera.moveTo(torus.position);
      view.camera.lookAt(cube.position);
      view.camera.moveBackward(1500);
      view.camera.moveUp(1500);
      view.camera.lookAt(plane.position);
      // every frame
      addEventListener(Event.ENTER_FRAME, onEnterFrame);
      function onEnterFrame(event:Event):void {
      // rerender viewport on each frame
      view.render();
      }
      From Lesson_Basic_02_Primitives.fla

CubeLoader
==========
  Package : away3d.loaders
  Class : public class CubeLoader
  Inheritance : ObjectContainer3D, Object3D
  Description : d content

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (ObjectContainer3D)
    (^) children : Array - Returns the children of the container as an array of 3d objects (ObjectContainer3D)
    (^) containerData : ContainerData - Returns the the data container being used by the loaded file. (Object3DLoader)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) handle : Object3D - Returns a 3d object relating to the currently visible model. (Object3DLoader)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) materialLibrary : MaterialLibrary - Returns the material library being used by the loaded file. (Object3DLoader)
    (^) maxX : Number - Returns the maximum x value of the 3d object (ObjectContainer3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (ObjectContainer3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (ObjectContainer3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (ObjectContainer3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (ObjectContainer3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (ObjectContainer3D)
    (^) mode : String - Returns the current loading mode of the 3d object loader. (Object3DLoader)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) parse : Function - Function placeholder for the parse method from the correct file loader class. (Object3DLoader)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) texturePath : String - Returns the filepath to the directory where any required texture files are located. (Object3DLoader)
    (^) transform : Matrix3D (Object3D)
    (^) url : String - Returns the url string of the file being loaded. (Object3DLoader)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (CubeLoader)
    (^) addChild(child:Object3D):void - Adds a 3d object to the scene as a child of the container (ObjectContainer3D)
    (^) addChildren(... childarray):void - Adds an array of 3d objects to the scene as children of the container (ObjectContainer3D)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnError(listener:Function):void - Default method for adding a loaderror event listener (Object3DLoader)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSuccess(listener:Function):void - Default method for adding a loadsuccess event listener (Object3DLoader)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) clone(object:* = null):* (ObjectContainer3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) getChildByName(name:String):Object3D - Returns a 3d object specified by name from the child array of the container (ObjectContainer3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the 3d object without moving the contents (ObjectContainer3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Object3D)
    (^) removeChild(child:Object3D):void - Removes a 3d object from the child array of the container (ObjectContainer3D)
    (^) removeChildByName(name:String):void - Removes a 3d object from the child array of the container (ObjectContainer3D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnError(listener:Function):void - Default method for removing a loaderror event listener (Object3DLoader)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSuccess(listener:Function):void - Default method for removing a loadsuccess event listener (Object3DLoader)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (ObjectContainer3D)
    (^) tick(time:int):void (Object3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (ObjectContainer3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) onComplete(event:Event):void - Automatically fired on a complete event (Object3DLoader)
        onError(event:IOErrorEvent):void - Listener function for an error event. (CubeLoader)
        onProgress(event:ProgressEvent):void - Listener function for a progress event. (CubeLoader)

  EVENTS
    (^) (Object3D)
    (^) (Object3DLoader)
    (^) (Object3DLoader)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PUBLIC CONSTANTS

  CONSTRUCTOR DETAIL

    public function CubeLoader(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       loadersize:Number (default = 200)
       geometrytitle:String (default = "Loading Geometry...")
       texturetitle:String (default = "Loading Texture...")
  METHOD DETAIL

    protected override function onError(event:IOErrorEvent):void 
      Listener function for an error event.
      Parameters
       event:IOErrorEvent

    protected override function onProgress(event:ProgressEvent):void 
      Listener function for a progress event.
      Parameters
       event:ProgressEvent
  CODE EXAMPLES

    
      There are currently no examples for this class


CubeMaterialsData
=================
  Package : away3d.primitives.data
  Class : public class CubeMaterialsData
  Inheritance
  PUBLIC PROPERTIES
        : ITriangleMaterial
 back : ITriangleMaterial  Description : 
 - Defines the material applied to the back side of the cube. (CubeMaterialsData)
        bottom : ITriangleMaterial - Defines the material applied to the bottom side of the cube. (CubeMaterialsData)
        front : ITriangleMaterial - Defines the material applied to the front side of the cube. (CubeMaterialsData)
        left : ITriangleMaterial - Defines the material applied to the left side of the cube. (CubeMaterialsData)
        right : ITriangleMaterial - Defines the material applied to the right side of the cube. (CubeMaterialsData)
        top : ITriangleMaterial - Defines the material applied to the top side of the cube. (CubeMaterialsData)

  PROTECTED PROPERTIES
        ini : Init - Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor. (CubeMaterialsData)

  PUBLIC METHODS
        (CubeMaterialsData)
        addOnMaterialChange(listener:Function):void - Default method for adding a materialchanged event listener (CubeMaterialsData)
        removeOnMaterialChange(listener:Function):void - Default method for removing a materialchanged event listener (CubeMaterialsData)

  EVENTS
        (CubeMaterialsData)

  PROPERTY DETAIL

    back:ITriangleMaterial[read-write]
      Defines the material applied to the back side of the cube.
      Implementation
       public function get back():ITriangleMaterial
       public function set back(value:ITriangleMaterial):void


    bottom:ITriangleMaterial[read-write]
      Defines the material applied to the bottom side of the cube.
      Implementation
       public function get bottom():ITriangleMaterial
       public function set bottom(value:ITriangleMaterial):void


    front:ITriangleMaterial[read-write]
      Defines the material applied to the front side of the cube.
      Implementation
       public function get front():ITriangleMaterial
       public function set front(value:ITriangleMaterial):void


    protected var ini:Init 
      Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor.

    left:ITriangleMaterial[read-write]
      Defines the material applied to the left side of the cube.
      Implementation
       public function get left():ITriangleMaterial
       public function set left(value:ITriangleMaterial):void


    right:ITriangleMaterial[read-write]
      Defines the material applied to the right side of the cube.
      Implementation
       public function get right():ITriangleMaterial
       public function set right(value:ITriangleMaterial):void


    top:ITriangleMaterial[read-write]
      Defines the material applied to the top side of the cube.
      Implementation
       public function get top():ITriangleMaterial
       public function set top(value:ITriangleMaterial):void

  CONSTRUCTOR DETAIL

    public function CubeMaterialsData(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       left:Material
       right:Material
       bottom:Material
       top:Material
       front:Material
       back:Material
  METHOD DETAIL

    public function addOnMaterialChange(listener:Function):void 
      Default method for adding a materialchanged event listener
      Parameters
       listener:Function - The listener function

    public function removeOnMaterialChange(listener:Function):void 
      Default method for removing a materialchanged event listener
      Parameters
       listener:Function - The listener function
  EVENT DETAIL

    Event object type: away3d.events.MaterialEvent
      Dispatched when the cube materials object has one of it's materials updated.
  CODE EXAMPLES

    
      There are currently no examples for this class


Cylinder
========
  Package : away3d.primitives
  Class : public class Cylinder
  Inheritance : AbstractPrimitive, Mesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
        height : Number - Defines the height of the cylinder. (Cylinder)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
        openEnded : Boolean - Defines whether the ends of the cylinder are left open (true) or closed (false). (Cylinder)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
        radius : Number - Defines the radius of the cylinder. (Cylinder)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractPrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
        segmentsH : Number - Defines the number of vertical segments that make up the cylinder. (Cylinder)
        segmentsW : Number - Defines the number of horizontal segments that make up the cylinder. (Cylinder)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
        yUp : Boolean - Defines whether the coordinates of the cylinder points use a yUp orientation (true) or a zUp orientation (false). (Cylinder)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (Cylinder)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (Cylinder)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
        vertex(w:int, h:int):Vertex - Returns the vertex object specified by the grid position of the mesh. (Cylinder)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    height:Number[read-write]
      Defines the height of the cylinder. Defaults to 200.
      Implementation
       public function get height():Number
       public function set height(value:Number):void


    openEnded:Boolean[read-write]
      Defines whether the ends of the cylinder are left open (true) or closed (false). Defaults to false.
      Implementation
       public function get openEnded():Boolean
       public function set openEnded(value:Boolean):void


    radius:Number[read-write]
      Defines the radius of the cylinder. Defaults to 100.
      Implementation
       public function get radius():Number
       public function set radius(value:Number):void


    segmentsH:Number[read-write]
      Defines the number of vertical segments that make up the cylinder. Defaults to 1.
      Implementation
       public function get segmentsH():Number
       public function set segmentsH(value:Number):void


    segmentsW:Number[read-write]
      Defines the number of horizontal segments that make up the cylinder. Defaults to 8.
      Implementation
       public function get segmentsW():Number
       public function set segmentsW(value:Number):void


    yUp:Boolean[read-write]
      Defines whether the coordinates of the cylinder points use a yUp orientation (true) or a zUp orientation (false). Defaults to true.
      Implementation
       public function get yUp():Boolean
       public function set yUp(value:Boolean):void

  CONSTRUCTOR DETAIL

    public function Cylinder(init:Object = null) 
      Constructor for a cylinder object. The init object parameters are : 'radius' defines the radius of the cylinder, 'height' defines the height, 'segmentsW' defines how many segments are the circumference is split into and 'segmentsH' how many segments the cylinder is split along its height.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       radius:Number (default = 100, min:0)
       height:Number (default = 200, min:0)
       segmentsW:Int (default = 8, min:3)
       segmentsH:Int (default = 1, min:1)
       openEnded:Boolean (default = false)
       yUp:Boolean (default = true)
  METHOD DETAIL

    public override function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.

    public function vertex(w:int, h:int):Vertex 
      Returns the vertex from a 2 dimensional representation of the cylinders's vertex array.
      I=horizontal reference.
      J=vertical reference (0 = base of the cylinder)
      Returns the vertex object specified by the grid position of the mesh.
      Parameters
       w:int - The horizontal position on the primitive mesh.
       h:int - The vertical position on the primitive mesh.
       Returns
       Vertex
  CODE EXAMPLES

    
      Creating Elliptical cylinder
      //add this in Cylinder class constructor
      var radiusW:Number = init.getNumber("radiusW", radius, {min:0});
      var radiusH:Number = init.getNumber("radiusH", radius, {min:0});
      //replace the radius property with radiusW and radiusH in the buildCylinder method parameters
      for (i = 0; i &lt; segmentsW; i++)
      {
      var verangle:Number = 2 * i / segmentsW * Math.PI;
      var x:Number = radiusH * Math.sin(verangle);
      var y:Number = radiusW * Math.cos(verangle);
      grid[j][i] = new Vertex(y, z, x);
      }

Debug
=====
  Package : away3d.core.utils
  Class : public class Debug

  PUBLIC PROPERTIES
        active : Boolean = false - [static] (Debug)
        warningsAsErrors : Boolean = false - [static] (Debug)

  PUBLIC METHODS
        clear():void - [static] (Debug)
        delimiter():void - [static] (Debug)
        error(message:Object):void - [static] (Debug)
        trace(message:Object):void - [static] (Debug)
        warning(message:Object):void - [static] (Debug)

  PROPERTY DETAIL

    public static var active:Boolean = false 

    public static var warningsAsErrors:Boolean = false 
  METHOD DETAIL

    public static function clear():void 

    public static function delimiter():void 

    public static function error(message:Object):void 
      Parameters
       message:Object

    public static function trace(message:Object):void 
      Parameters
       message:Object

    public static function warning(message:Object):void 
      Parameters
       message:Object
  CODE EXAMPLES

    
      There are currently no examples for this class


DebugObjectContainer3D
======================
  Package : away3d.containers
  Class : public class DebugObjectContainer3D
  Inheritance : Object3D
  Implements : IPrimitiveProvider
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (ObjectContainer3D)
    (^) children : Array - Returns the children of the container as an array of 3d objects (ObjectContainer3D)
        debugbb : Boolean = false - defines whether a bounding box for the child 3d objects is displayed (DebugObjectContainer3D)
        debugbs : Boolean = false - defines whether a bounding sphere for the child 3d objects is displayed (DebugObjectContainer3D)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) maxX : Number - Returns the maximum x value of the 3d object (ObjectContainer3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (ObjectContainer3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (ObjectContainer3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (ObjectContainer3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (ObjectContainer3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (ObjectContainer3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (DebugObjectContainer3D)
    (^) addChild(child:Object3D):void - Adds a 3d object to the scene as a child of the container (ObjectContainer3D)
    (^) addChildren(... childarray):void - Adds an array of 3d objects to the scene as children of the container (ObjectContainer3D)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) clone(object:* = null):* (ObjectContainer3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) getChildByName(name:String):Object3D - Returns a 3d object specified by name from the child array of the container (ObjectContainer3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the 3d object without moving the contents (ObjectContainer3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
        primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (DebugObjectContainer3D)
    (^) removeChild(child:Object3D):void - Removes a 3d object from the child array of the container (ObjectContainer3D)
    (^) removeChildByName(name:String):void - Removes a 3d object from the child array of the container (ObjectContainer3D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (ObjectContainer3D)
    (^) tick(time:int):void (Object3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (ObjectContainer3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PROPERTY DETAIL

    public var debugbb:Boolean = false 
      defines whether a bounding box for the child 3d objects is displayed

    public var debugbs:Boolean = false 
      defines whether a bounding sphere for the child 3d objects is displayed
  CONSTRUCTOR DETAIL

    public function DebugObjectContainer3D(init:Object = null, ... childarray) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties
       ... childarray - An array of children to be added on instatiation
  METHOD DETAIL

    public override function primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void 
      Called from the PrimitiveTraverser when passing DrawPrimitive objects to the primitive consumer object
      Parameters
       consumer:IPrimitiveConsumer - The consumer instance
       session:AbstractRenderSession - The render session of the 3d object
       See also
       away3d.core.traverse.PrimitiveTraverser
       away3d.core.draw.DrawPrimitive

  CODE EXAMPLES

    
      There are currently no examples for this class


DiffuseDot3Shader
=================
  Package : away3d.materials.shaders
  Class : public class DiffuseDot3Shader
  Inheritance : AbstractShader
  Implements : IUVMaterial
  Description : 

  PUBLIC PROPERTIES
        bitmap : BitmapData - [read-only] Returns the bitmapData object being used as the shader DOT3 map. (DiffuseDot3Shader)
    (^) blendMode : String - Defines a blendMode value for the shader bitmap. (AbstractShader)
    (^) debug : Boolean - Determines if faces with the shader applied are drawn with outlines (AbstractShader)
        height : Number - [read-only] Returns the height of the bitmapData being used as the shader DOT3 map. (DiffuseDot3Shader)
    (^) smooth : Boolean - Determines if the shader bitmap is smoothed (bilinearly filtered) when drawn to screen (AbstractShader)
        tangentSpace : Boolean - Determines if the DOT3 mapping is rendered in tangent space (true) or object space (false). (DiffuseDot3Shader)
    (^) visible : Boolean - Indicates whether the material is visible (AbstractShader)
        width : Number - [read-only] Returns the width of the bitmapData being used as the shader DOT3 map. (DiffuseDot3Shader)

  PROTECTED PROPERTIES
        (DiffuseDot3Shader)
        addOnResize(listener:Function):void - Default method for adding a materialresize event listener (DiffuseDot3Shader)
        getPixel32(u:Number, v:Number):uint - Returns the argb value of the bitmapData pixel at the given u v coordinate. (DiffuseDot3Shader)
        removeOnResize(listener:Function):void - Default method for removing a materialresize event listener (DiffuseDot3Shader)
    (^) renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (AbstractShader)
        renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (DiffuseDot3Shader)
        updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (DiffuseDot3Shader)

  PROTECTED METHODS
        clearFaceDictionary(source:Object3D, view:View3D):void - Clears face value objects when shader requires updating (DiffuseDot3Shader)
    (^) getLightingShape(layer:Sprite, light:LightPrimitive):Shape - Returns a shape object for use by light shaders (AbstractShader)
    (^) getShape(layer:Sprite):Shape - Returns a shape object for use by environment shaders. (AbstractShader)
        renderShader(face:Face):void - Renders the shader to the specified face. (DiffuseDot3Shader)

  PROPERTY DETAIL

    bitmap:BitmapData[read-only]
      Returns the bitmapData object being used as the shader DOT3 map.
      Implementation
       public function get bitmap():BitmapData


    height:Number[read-only]
      Returns the height of the bitmapData being used as the shader DOT3 map.
      Implementation
       public function get height():Number


    public var tangentSpace:Boolean 
      Determines if the DOT3 mapping is rendered in tangent space (true) or object space (false).

    width:Number[read-only]
      Returns the width of the bitmapData being used as the shader DOT3 map.
      Implementation
       public function get width():Number

  CONSTRUCTOR DETAIL

    public function DiffuseDot3Shader(bitmap:BitmapData, init:Object = null) 
      Parameters
       bitmap:BitmapData - The bitmapData object to be used as the material's DOT3 map.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       tangentSpace:Boolean (default = false)
  METHOD DETAIL

    public function addOnResize(listener:Function):void 
      Default method for adding a materialresize event listener
      Parameters
       listener:Function - The listener function

    protected override function clearFaceDictionary(source:Object3D, view:View3D):void 
      Clears face value objects when shader requires updating
      Parameters
       source:Object3D - The parent 3d object of the face.
       view:View3D - The view rendering the draw triangle.

    public function getPixel32(u:Number, v:Number):uint 
      Returns the argb value of the bitmapData pixel at the given u v coordinate.
      Parameters
       u:Number - The u (horizontal) texture coordinate.
       v:Number - The v (verical) texture coordinate.
       Returns
       uint - The argb pixel value.

    public function removeOnResize(listener:Function):void 
      Default method for removing a materialresize event listener
      Parameters
       listener:Function - The listener function

    public override function renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void 
      Renders a material layer for the specified triangle.
      Parameters
       tri:DrawTriangle - The drawtriangle used for render information.
       layer:Sprite - The parent layer into which the triangle is drawn.
       level:int - Defines the sprite level for the layer.

    protected override function renderShader(face:Face):void 
      Renders the shader to the specified face.
      Parameters
       face:Face - The face object being rendered.

    public override function updateMaterial(source:Object3D, view:View3D):void 
      Called once per render loop when material is visible.
      Parameters
       source:Object3D
       view:View3D
  CODE EXAMPLES

    
      There are currently no examples for this class


DiffusePhongShader
==================
  Package : away3d.materials.shaders
  Class : public class DiffusePhongShader
  Inheritance : AbstractShader
  Description : 

  PUBLIC PROPERTIES
    (^) blendMode : String - Defines a blendMode value for the shader bitmap. (AbstractShader)
    (^) debug : Boolean - Determines if faces with the shader applied are drawn with outlines (AbstractShader)
    (^) smooth : Boolean - Determines if the shader bitmap is smoothed (bilinearly filtered) when drawn to screen (AbstractShader)
    (^) visible : Boolean - Indicates whether the material is visible (AbstractShader)

  PROTECTED PROPERTIES
        (DiffusePhongShader)
    (^) renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (AbstractShader)
        renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (DiffusePhongShader)
        updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (DiffusePhongShader)

  PROTECTED METHODS
        clearFaceDictionary(source:Object3D, view:View3D):void - Clears face value objects when shader requires updating (DiffusePhongShader)
    (^) getLightingShape(layer:Sprite, light:LightPrimitive):Shape - Returns a shape object for use by light shaders (AbstractShader)
    (^) getShape(layer:Sprite):Shape - Returns a shape object for use by environment shaders. (AbstractShader)
        renderShader(face:Face):void - Renders the shader to the specified face. (DiffusePhongShader)

  CONSTRUCTOR DETAIL

    public function DiffusePhongShader(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
  METHOD DETAIL

    protected override function clearFaceDictionary(source:Object3D, view:View3D):void 
      Clears face value objects when shader requires updating
      Parameters
       source:Object3D - The parent 3d object of the face.
       view:View3D - The view rendering the draw triangle.

    public override function renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void 
      Renders a material layer for the specified triangle.
      Parameters
       tri:DrawTriangle - The drawtriangle used for render information.
       layer:Sprite - The parent layer into which the triangle is drawn.
       level:int - Defines the sprite level for the layer.

    protected override function renderShader(face:Face):void 
      Renders the shader to the specified face.
      Parameters
       face:Face - The face object being rendered.

    public override function updateMaterial(source:Object3D, view:View3D):void 
      Called once per render loop when material is visible.
      Parameters
       source:Object3D
       view:View3D
  CODE EXAMPLES

    
      There are currently no examples for this class


DirectionalLight
================
  Package : away3d.core.light
  Class : public class DirectionalLight
  Inheritance : LightPrimitive
  Description : 

  PUBLIC PROPERTIES
    (^) ambient : Number - Coefficient for the ambient light intensity. (LightPrimitive)
    (^) ambientBitmap : BitmapData - Lightmap for ambient intensity. (LightPrimitive)
    (^) ambientDiffuseBitmap : BitmapData - Combined lightmap for ambient and diffuse intensities. (LightPrimitive)
        ambientDiffuseColorTransform : ColorTransform - Color transform used in cached shading materials for combined ambient and diffuse color intensities. (DirectionalLight)
    (^) blue : Number - Blue component level. (LightPrimitive)
        colorMatrixTransform : Dictionary - Colormatrix transform used in DOT3 materials for resolving color in the normal map. (DirectionalLight)
    (^) diffuse : Number - Coefficient for the diffuse light intensity. (LightPrimitive)
    (^) diffuseBitmap : BitmapData - Lightmap for diffuse intensity. (LightPrimitive)
        diffuseColorTransform : ColorTransform - Color transform used in cached shading materials for ambient intensities. (DirectionalLight)
        diffuseTransform : Dictionary - Transform dictionary for the diffuse lightmap used by shading materials. (DirectionalLight)
    (^) green : Number - Green component level. (LightPrimitive)
        light : DirectionalLight3D (DirectionalLight)
        normalMatrixTransform : Dictionary - Colormatrix transform used in DOT3 materials for resolving normal values in the normal map. (DirectionalLight)
    (^) red : Number - Red component level. (LightPrimitive)
    (^) specular : Number - Coefficient for the specular light intensity. (LightPrimitive)
    (^) specularBitmap : BitmapData - Lightmap for specular intensity. (LightPrimitive)
        specularTransform : Dictionary - Transform dictionary for the specular lightmap used by shading materials. (DirectionalLight)

  PUBLIC METHODS
        clearTransform():void - Clears the transform and matrix dictionaries used in the shading materials. (DirectionalLight)
        setColorMatrixTransform(source:Object3D):void - Updates the color transform matrix. (DirectionalLight)
        setDiffuseTransform(source:Object3D):void - Updates the transform matrix for the diffuse lightmap. (DirectionalLight)
        setNormalMatrixTransform(source:Object3D):void - Updates the normal transform matrix. (DirectionalLight)
        setSpecularTransform(source:Object3D, view:View3D):void - Updates the transform matrix for the specular lightmap. (DirectionalLight)
        updateAmbientBitmap(ambient:Number):void - Updates the bitmapData object used as the lightmap for ambient light shading. (DirectionalLight)
        updateAmbientDiffuseBitmap(ambient:Number, diffuse:Number):void - Updates the bitmapData object used as the lightmap for the combined ambient and diffue light shading. (DirectionalLight)
        updateDiffuseBitmap(diffuse:Number):void - Updates the bitmapData object used as the lightmap for diffuse light shading. (DirectionalLight)
        updateDirection(e:Object3DEvent):void - Updates the direction vector of the directional light. (DirectionalLight)
        updateSpecularBitmap(specular:Number):void - Updates the bitmapData object used as the lightmap for specular light shading. (DirectionalLight)

  PROPERTY DETAIL

    public var ambientDiffuseColorTransform:ColorTransform 
      Color transform used in cached shading materials for combined ambient and diffuse color intensities.

    public var colorMatrixTransform:Dictionary 
      Colormatrix transform used in DOT3 materials for resolving color in the normal map.

    public var diffuseColorTransform:ColorTransform 
      Color transform used in cached shading materials for ambient intensities.

    public var diffuseTransform:Dictionary 
      Transform dictionary for the diffuse lightmap used by shading materials.

    public var light:DirectionalLight3D 
      A reference to the DirectionalLight3D object used by the light primitive.

    public var normalMatrixTransform:Dictionary 
      Colormatrix transform used in DOT3 materials for resolving normal values in the normal map.

    public var specularTransform:Dictionary 
      Transform dictionary for the specular lightmap used by shading materials.
  METHOD DETAIL

    public function clearTransform():void 
      Clears the transform and matrix dictionaries used in the shading materials.

    public function setColorMatrixTransform(source:Object3D):void 
      Updates the color transform matrix.
      Parameters
       source:Object3D
       See also
       colorMatrixTransform


    public function setDiffuseTransform(source:Object3D):void 
      Updates the transform matrix for the diffuse lightmap.
      Parameters
       source:Object3D
       See also
       diffuseTransform


    public function setNormalMatrixTransform(source:Object3D):void 
      Updates the normal transform matrix.
      Parameters
       source:Object3D
       See also
       normalMatrixTransform


    public function setSpecularTransform(source:Object3D, view:View3D):void 
      Updates the transform matrix for the specular lightmap.
      Parameters
       source:Object3D
       view:View3D
       See also
       specularTransform


    public function updateAmbientBitmap(ambient:Number):void 
      Updates the bitmapData object used as the lightmap for ambient light shading.
      Parameters
       ambient:Number - The coefficient for ambient light intensity.

    public function updateAmbientDiffuseBitmap(ambient:Number, diffuse:Number):void 
      Updates the bitmapData object used as the lightmap for the combined ambient and diffue light shading.
      Parameters
       ambient:Number - The coefficient for ambient light intensity.
       diffuse:Number - The coefficient for diffuse light intensity.

    public function updateDiffuseBitmap(diffuse:Number):void 
      Updates the bitmapData object used as the lightmap for diffuse light shading.
      Parameters
       diffuse:Number - The coefficient for diffuse light intensity.

    public function updateDirection(e:Object3DEvent):void 
      Updates the direction vector of the directional light.
      Parameters
       e:Object3DEvent

    public function updateSpecularBitmap(specular:Number):void 
      Updates the bitmapData object used as the lightmap for specular light shading.
      Parameters
       specular:Number - The coefficient for specular light intensity.
  CODE EXAMPLES

    
      There are currently no examples for this class


DirectionalLight3D
==================
  Package : away3d.lights
  Class : public class DirectionalLight3D
  Inheritance : Object3D
  Implements : IClonable, ILightProvider, IPrimitiveProvider
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
        ambient : Number - Defines a coefficient for the ambient light intensity. (DirectionalLight3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (Object3D)
        brightness : Number - Defines a coefficient for the overall light intensity. (DirectionalLight3D)
        color : int - Defines the color of the light object. (DirectionalLight3D)
        debug : Boolean - Toggles debug mode: light object is visualised in the scene. (DirectionalLight3D)
        diffuse : Number - Defines a coefficient for the diffuse light intensity. (DirectionalLight3D)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) maxX : Number - Returns the maximum x value of the 3d object (Object3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (Object3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (Object3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (Object3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (Object3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (Object3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
        specular : Number - Defines a coefficient for the specular light intensity. (DirectionalLight3D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (DirectionalLight3D)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
        clone(object:* = null):* (DirectionalLight3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
        light(consumer:ILightConsumer):void (DirectionalLight3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
        primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (DirectionalLight3D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (Object3D)
    (^) tick(time:int):void (Object3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PROPERTY DETAIL

    ambient:Number[read-write]
      Defines a coefficient for the ambient light intensity.
      Implementation
       public function get ambient():Number
       public function set ambient(value:Number):void


    brightness:Number[read-write]
      Defines a coefficient for the overall light intensity.
      Implementation
       public function get brightness():Number
       public function set brightness(value:Number):void


    color:int[read-write]
      Defines the color of the light object.
      Implementation
       public function get color():int
       public function set color(value:int):void


    public var debug:Boolean 
      Toggles debug mode: light object is visualised in the scene.

    diffuse:Number[read-write]
      Defines a coefficient for the diffuse light intensity.
      Implementation
       public function get diffuse():Number
       public function set diffuse(value:Number):void


    specular:Number[read-write]
      Defines a coefficient for the specular light intensity.
      Implementation
       public function get specular():Number
       public function set specular(value:Number):void

  CONSTRUCTOR DETAIL

    public function DirectionalLight3D(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       color:Color (default = 0xFFFFFF)
       ambient:Number (default = 0.5, min:0, max:1)
       diffuse:Number (default = 0.5, min:0, max:10)
       specular:Number (default = 1, min:0, max:1)
       brightness:Number (default = 1)
       debug:Boolean (default = false)
  METHOD DETAIL

    public override function clone(object:* = null):* 
      Duplicates the light object's properties to another DirectionalLight3D object
      Parameters
       object:* (default = null) - [optional] The new object instance into which all properties are copied
       Returns
       * - The new object instance with duplicated properties applied

    public function light(consumer:ILightConsumer):void 
      Called from the PrimitiveTraverser when passing LightPrimitive objects to the light consumer object
      Parameters
       consumer:ILightConsumer - The consumer instance.

    public override function primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void 
      Called from the PrimitiveTraverser when passing DrawPrimitive objects to the primitive consumer object
      Parameters
       consumer:IPrimitiveConsumer - The consumer instance
       session:AbstractRenderSession - The render session of the 3d object
  CODE EXAMPLES

    
      There are currently no examples for this class


DirSprite2D
===========
  Package : away3d.sprites
  Class : public class DirSprite2D
  Inheritance : Object3D
  Implements : IPrimitiveProvider
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (Object3D)
        deltaZ : Number - An optional offset value added to the z depth used to sort the sprite (DirSprite2D)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) maxX : Number - Returns the maximum x value of the 3d object (Object3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (Object3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (Object3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (Object3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (Object3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (Object3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
        rotation : Number - Defines the overall 2d rotation of the sprite object (DirSprite2D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
        scaling : Number - Defines the overall scaling of the sprite object (DirSprite2D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
        smooth : Boolean - Defines whether the texture bitmap is smoothed (bilinearly filtered) when drawn to screen (DirSprite2D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (DirSprite2D)
        add(x:Number, y:Number, z:Number, bitmap:BitmapData):void - Adds a new bitmap definition to the array of directional textures. (DirSprite2D)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
        primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (DirSprite2D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (Object3D)
    (^) tick(time:int):void (Object3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PROPERTY DETAIL

    public var deltaZ:Number 
      An optional offset value added to the z depth used to sort the sprite

    public var rotation:Number 
      Defines the overall 2d rotation of the sprite object

    public var scaling:Number 
      Defines the overall scaling of the sprite object

    public var smooth:Boolean 
      Defines whether the texture bitmap is smoothed (bilinearly filtered) when drawn to screen
  CONSTRUCTOR DETAIL

    public function DirSprite2D(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       scaling:Number (default = 1, min:0)
       rotation:Number (default = 0)
       smooth:Boolean (default = false)
       deltaZ:Number (default = 0)
       bitmaps:Array
  METHOD DETAIL

    public function add(x:Number, y:Number, z:Number, bitmap:BitmapData):void 
      Adds a new bitmap definition to the array of directional textures.
      Parameters
       x:Number - x The x coordinate of the directional texture.
       y:Number - y The y coordinate of the directional texture.
       z:Number - z The z coordinate of the directional texture.
       bitmap:BitmapData - bitmap The bitmapData object to be used as the directional texture.

    public override function primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void 
      Called from the PrimitiveTraverser when passing DrawPrimitive objects to the primitive consumer object
      Parameters
       consumer:IPrimitiveConsumer - The consumer instance
       session:AbstractRenderSession - The render session of the 3d object
       See also
       away3d.core.traverse.PrimitiveTraverser
       away3d.core.draw.DrawScaledBitmap

  CODE EXAMPLES

    
      There are currently no examples for this class


DofCache
========
  Package : away3d.core.utils
  Class : public class DofCache

  PUBLIC PROPERTIES
        aperture : Number = 22 - [static] (DofCache)
        doflevels : Number = 16 - [static] (DofCache)
        focus : Number - [static] (DofCache)
        maxblur : Number = 150 - [static] (DofCache)
        usedof : Boolean = false - [static] (DofCache)

  PUBLIC METHODS
        -  (DofCache)
        getBitmap(depth:Number):BitmapData -  (DofCache)
        getDofCache(bitmap:BitmapData):DofCache - [static] (DofCache)
        resetDof(enabled:Boolean):void - [static] (DofCache)

  PROPERTY DETAIL

    public static var aperture:Number = 22 

    public static var doflevels:Number = 16 

    public static var focus:Number 

    public static var maxblur:Number = 150 

    public static var usedof:Boolean = false 
  CONSTRUCTOR DETAIL

    public function DofCache(levels:Number, texture:BitmapData) 
      Parameters
       levels:Number
       texture:BitmapData
  METHOD DETAIL

    public function getBitmap(depth:Number):BitmapData 
      Parameters
       depth:Number
       Returns
       BitmapData

    public static function getDofCache(bitmap:BitmapData):DofCache 
      Parameters
       bitmap:BitmapData
       Returns
       DofCache

    public static function resetDof(enabled:Boolean):void 
      Parameters
       enabled:Boolean
  CODE EXAMPLES

    
      There are currently no examples for this class


DofSprite2D
===========
  Package : away3d.sprites
  Class : public class DofSprite2D
  Inheritance : Object3D
  Implements : IPrimitiveProvider
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
        bitmap : BitmapData - Defines the bitmapData object to use for the sprite texture. (DofSprite2D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (Object3D)
        deltaZ : Number - An optional offset value added to the z depth used to sort the sprite (DofSprite2D)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) maxX : Number - Returns the maximum x value of the 3d object (Object3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (Object3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (Object3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (Object3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (Object3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (Object3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
        rotation : Number - Defines the overall 2d rotation of the sprite object (DofSprite2D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
        scaling : Number - Defines the overall scaling of the sprite object (DofSprite2D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
        smooth : Boolean - Defines whether the texture bitmap is smoothed (bilinearly filtered) when drawn to screen (DofSprite2D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (DofSprite2D)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
        primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (DofSprite2D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (Object3D)
    (^) tick(time:int):void (Object3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PROPERTY DETAIL

    public var bitmap:BitmapData 
      Defines the bitmapData object to use for the sprite texture.

    public var deltaZ:Number 
      An optional offset value added to the z depth used to sort the sprite

    public var rotation:Number 
      Defines the overall 2d rotation of the sprite object

    public var scaling:Number 
      Defines the overall scaling of the sprite object

    public var smooth:Boolean 
      Defines whether the texture bitmap is smoothed (bilinearly filtered) when drawn to screen
  CONSTRUCTOR DETAIL

    public function DofSprite2D(bitmap:BitmapData, init:Object = null) 
      Parameters
       bitmap:BitmapData - The bitmapData object to be used as the sprite's texture.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       scaling:Number (default = 1, min:0)
       rotation:Number (default = 0)
       smooth:Boolean (default = false)
       deltaZ:Number (default = 0)
  METHOD DETAIL

    public override function primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void 
      Called from the PrimitiveTraverser when passing DrawPrimitive objects to the primitive consumer object
      Parameters
       consumer:IPrimitiveConsumer - The consumer instance
       session:AbstractRenderSession - The render session of the 3d object
       See also
       away3d.core.traverse.PrimitiveTraverser
       away3d.core.draw.DrawScaledBitmap

  CODE EXAMPLES

    
      There are currently no examples for this class


Dot3BitmapMaterial
==================
  Package : away3d.materials
  Class : public class Dot3BitmapMaterial
  Inheritance : CompositeMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - Defines an alpha value for the layer container. (CompositeMaterial)
        bitmap : BitmapData - [read-only] Returns the bitmapData object being used as the material texture. (Dot3BitmapMaterial)
    (^) blendMode : String - Defines a blendMode value for the layer container. (CompositeMaterial)
    (^) color : uint - Defines a colored tint for the layer container. (CompositeMaterial)
    (^) materials : Array - An array of bitmapmaterial objects to be overlayed sequentially. (CompositeMaterial)
        normalMap : BitmapData - [read-only] Returns the bitmapData object being used as the material normal map. (Dot3BitmapMaterial)
        shininess : Number - The exponential dropoff value used for specular highlights. (Dot3BitmapMaterial)
        specular : Number - Coefficient for specular light level. (Dot3BitmapMaterial)
    (^) visible : Boolean - Indicates whether the material is visible (CompositeMaterial)

  PROTECTED PROPERTIES
        (Dot3BitmapMaterial)
    (^) renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (CompositeMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (CompositeMaterial)
    (^) updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (CompositeMaterial)

  PROTECTED METHODS
    (^) setColorTransform():void (CompositeMaterial)

  PROPERTY DETAIL

    bitmap:BitmapData[read-only]
      Returns the bitmapData object being used as the material texture.
      Implementation
       public function get bitmap():BitmapData


    normalMap:BitmapData[read-only]
      Returns the bitmapData object being used as the material normal map.
      Implementation
       public function get normalMap():BitmapData


    shininess:Number[read-write]
      The exponential dropoff value used for specular highlights.
      Implementation
       public function get shininess():Number
       public function set shininess(value:Number):void


    specular:Number[read-write]
      Coefficient for specular light level.
      Implementation
       public function get specular():Number
       public function set specular(value:Number):void

  CONSTRUCTOR DETAIL

    public function Dot3BitmapMaterial(bitmap:BitmapData, normalMap:BitmapData, init:Object = null) 
      Parameters
       bitmap:BitmapData - The bitmapData object to be used as the material's texture.
       normalMap:BitmapData - The bitmapData object to be used as the material's DOT3 map.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       shininess:Number (default = 20)
       specular:Number (default = 0.7)
  CODE EXAMPLES

    
      There are currently no examples for this class


Dot3BitmapMaterialCache
=======================
  Package : away3d.materials
  Class : public class Dot3BitmapMaterialCache
  Inheritance : BitmapMaterialContainer, BitmapMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - Defines an alpha value for the texture bitmap. (BitmapMaterial)
        bitmap : BitmapData - [read-only] Returns the bitmapData object being used as the material texture. (Dot3BitmapMaterialCache)
    (^) blendMode : String - Defines a blendMode value for the texture bitmap. (BitmapMaterial)
    (^) cache : Boolean - Defines whether each created bitmapData surface is to be cached, or updated every frame. (BitmapMaterialContainer)
    (^) color : uint - Defines a colored tint for the texture bitmap. (BitmapMaterial)
    (^) debug : Boolean = false - Toggles debug mode: textured triangles are drawn with white outlines, precision correction triangles are drawn with blue outlines. (BitmapMaterial)
    (^) height : Number - Returns the height of the bitmapData being used as the material texture. (BitmapMaterial)
    (^) materials : Array - An array of bitmapmaterial objects to be overlayed sequentially. (BitmapMaterialContainer)
        normalMap : BitmapData - [read-only] Returns the bitmapData object being used as the material normal map. (Dot3BitmapMaterialCache)
    (^) precision : Number - Corrects distortion caused by the affine transformation (non-perpective) of textures. (BitmapMaterial)
    (^) repeat : Boolean = false - Determines if texture bitmap will tile in uv-space (BitmapMaterial)
        shininess : Number - The exponential dropoff value used for specular highlights. (Dot3BitmapMaterialCache)
    (^) smooth : Boolean = false - Determines if texture bitmap is smoothed (bilinearly filtered) when drawn to screen. (BitmapMaterial)
        specular : Number - Coefficient for specular light level. (Dot3BitmapMaterialCache)
    (^) transparent : Boolean - Defines whether the caching bitmapData objects are transparent (BitmapMaterialContainer)
    (^) visible : Boolean - Indicates whether the material is visible (BitmapMaterial)
    (^) width : Number - Returns the width of the bitmapData being used as the material texture. (BitmapMaterial)

  PROTECTED PROPERTIES
        (Dot3BitmapMaterialCache)
    (^) addOnResize(listener:Function):void - Default method for adding a materialresize event listener (BitmapMaterial)
    (^) getPixel32(u:Number, v:Number):uint - Returns the argb value of the bitmapData pixel at the given u v coordinate. (BitmapMaterial)
    (^) removeOnResize(listener:Function):void - Default method for removing a materialresize event listener (BitmapMaterial)
    (^) renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (BitmapMaterialContainer)
    (^) renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (BitmapMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (BitmapMaterial)
    (^) update():void - Clear and updates the currrent bitmapData surface on all faces. (BitmapMaterialContainer)
    (^) updateMaterial(source:Object3D, view:View3D):void (BitmapMaterialContainer)

  PROTECTED METHODS
    (^) getMapping(tri:DrawTriangle):Matrix - Calculates the mapping matrix required to draw the triangle texture to screen. (BitmapMaterialContainer)
    (^) setColorTransform():void (BitmapMaterial)
    (^) updateRenderBitmap():void (BitmapMaterialContainer)

  EVENTS
    (^) (BitmapMaterial)

  PROPERTY DETAIL

    bitmap:BitmapData[read-only]
      Returns the bitmapData object being used as the material texture.
      Implementation
       public function get bitmap():BitmapData


    normalMap:BitmapData[read-only]
      Returns the bitmapData object being used as the material normal map.
      Implementation
       public function get normalMap():BitmapData


    shininess:Number[read-write]
      The exponential dropoff value used for specular highlights.
      Implementation
       public function get shininess():Number
       public function set shininess(value:Number):void


    specular:Number[read-write]
      Coefficient for specular light level.
      Implementation
       public function get specular():Number
       public function set specular(value:Number):void

  CONSTRUCTOR DETAIL

    public function Dot3BitmapMaterialCache(bitmap:BitmapData, normalMap:BitmapData, init:Object = null) 
      Parameters
       bitmap:BitmapData - The bitmapData object to be used as the material's texture.
       normalMap:BitmapData - The bitmapData object to be used as the material's DOT3 map.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       shininess:Number (default = 20)
       specular:Number (default = 0.7)
  CODE EXAMPLES

    
      There are currently no examples for this class


Dot3MovieMaterial
=================
  Package : away3d.materials
  Class : public class Dot3MovieMaterial
  Inheritance : CompositeMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - Defines an alpha value for the layer container. (CompositeMaterial)
        bitmap : BitmapData - [read-only] Returns the bitmapData object being used as the material texture. (Dot3MovieMaterial)
    (^) blendMode : String - Defines a blendMode value for the layer container. (CompositeMaterial)
    (^) color : uint - Defines a colored tint for the layer container. (CompositeMaterial)
    (^) materials : Array - An array of bitmapmaterial objects to be overlayed sequentially. (CompositeMaterial)
        normalMap : BitmapData - [read-only] Returns the bitmapData object being used as the material normal map. (Dot3MovieMaterial)
        shininess : Number - The exponential dropoff value used for specular highlights. (Dot3MovieMaterial)
        specular : Number - Coefficient for specular light level. (Dot3MovieMaterial)
    (^) visible : Boolean - Indicates whether the material is visible (CompositeMaterial)

  PROTECTED PROPERTIES
        (Dot3MovieMaterial)
    (^) renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (CompositeMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (CompositeMaterial)
    (^) updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (CompositeMaterial)

  PROTECTED METHODS
    (^) setColorTransform():void (CompositeMaterial)

  PROPERTY DETAIL

    bitmap:BitmapData[read-only]
      Returns the bitmapData object being used as the material texture.
      Implementation
       public function get bitmap():BitmapData


    normalMap:BitmapData[read-only]
      Returns the bitmapData object being used as the material normal map.
      Implementation
       public function get normalMap():BitmapData


    shininess:Number[read-write]
      The exponential dropoff value used for specular highlights.
      Implementation
       public function get shininess():Number
       public function set shininess(value:Number):void


    specular:Number[read-write]
      Coefficient for specular light level.
      Implementation
       public function get specular():Number
       public function set specular(value:Number):void

  CONSTRUCTOR DETAIL

    public function Dot3MovieMaterial(movie:Sprite, normalMap:BitmapData, init:Object = null) 
      Parameters
       movie:Sprite - The movieclip to be used as the material's texture.
       normalMap:BitmapData - The bitmapData object to be used as the material's DOT3 map.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       shininess:Number (default = 20)
       specular:Number (default = 0.7)
  CODE EXAMPLES

    
      There are currently no examples for this class


DrawBitmap
==========
  Package : away3d.core.draw
  Class : public class DrawBitmap
  Inheritance : DrawPrimitive
  Description : Unscaled bitmap drawing primitive

  PUBLIC PROPERTIES
        bitmap : BitmapData - The bitmapData object used as the bitmap primitive texture. (DrawBitmap)
    (^) create : Function - Placeholder function for creating new drawing primitives from a cache of objects. (DrawPrimitive)
    (^) maxX : Number - Indicates the maximum x value of the drawing primitive. (DrawPrimitive)
    (^) maxY : Number - Indicates the maximum y value of the drawing primitive. (DrawPrimitive)
    (^) maxZ : Number - Indicates the maximum z value of the drawing primitive. (DrawPrimitive)
    (^) minX : Number - Indicates the minimum x value of the drawing primitive. (DrawPrimitive)
    (^) minY : Number - Indicates the minimum y value of the drawing primitive. (DrawPrimitive)
    (^) minZ : Number - Indicates the minimum z value of the drawing primitive. (DrawPrimitive)
    (^) projection : Projection - Reference to the last projection object used for the primitive (DrawPrimitive)
    (^) quadrant : PrimitiveQuadrantTreeNode - Reference to the last quadrant used by the drawing primitive. (DrawPrimitive)
        screenvertex : ScreenVertex -  (DrawBitmap)
    (^) screenZ : Number - Indicates the screen z value of the drawing primitive (used for z-sorting). (DrawPrimitive)
    (^) source : Object3D - The parent 3d object of the drawing primitive. (DrawPrimitive)

  PUBLIC METHODS
        calc():void - Calculates the min, max and screen properties required for rendering the drawing primitive. (DrawBitmap)
        clear():void - Deletes the data currently held by the drawing primitive. (DrawBitmap)
        contains(x:Number, y:Number):Boolean - Determines whether the given point lies inside the drawing primitive (DrawBitmap)
    (^) getZ(x:Number, y:Number):Number - Calulates the screen z value of a precise point on the drawing primitive. (DrawPrimitive)
    (^) quarter(focus:Number):Array - Cuts the drawing primitive into 4 equally sized drawing primitives. (DrawPrimitive)
        render():void - Draws the primitive to the view. (DrawBitmap)
    (^) toString():String - Used to trace the values of a drawing primitive. (DrawPrimitive)

  PROPERTY DETAIL

    public var bitmap:BitmapData 
      The bitmapData object used as the bitmap primitive texture.

    public var screenvertex:ScreenVertex 
  METHOD DETAIL

    public override function calc():void 
      Calculates the min, max and screen properties required for rendering the drawing primitive.

    public override function clear():void 
      Deletes the data currently held by the drawing primitive.

    public override function contains(x:Number, y:Number):Boolean 
      Determines whether the given point lies inside the drawing primitive
      Parameters
       x:Number - The x position of the point to be tested.
       y:Number - The y position of the point to be tested.
       Returns
       Boolean - The result of the test.

    public override function render():void 
      Draws the primitive to the view.
  CODE EXAMPLES

    
      There are currently no examples for this class


DrawDisplayObject
=================
  Package : away3d.core.draw
  Class : public class DrawDisplayObject
  Inheritance : DrawPrimitive
  Description : 

  PUBLIC PROPERTIES
    (^) create : Function - Placeholder function for creating new drawing primitives from a cache of objects. (DrawPrimitive)
        displayobject : DisplayObject - A reference to the displayobject used by the drawing primitive. (DrawDisplayObject)
    (^) maxX : Number - Indicates the maximum x value of the drawing primitive. (DrawPrimitive)
    (^) maxY : Number - Indicates the maximum y value of the drawing primitive. (DrawPrimitive)
    (^) maxZ : Number - Indicates the maximum z value of the drawing primitive. (DrawPrimitive)
    (^) minX : Number - Indicates the minimum x value of the drawing primitive. (DrawPrimitive)
    (^) minY : Number - Indicates the minimum y value of the drawing primitive. (DrawPrimitive)
    (^) minZ : Number - Indicates the minimum z value of the drawing primitive. (DrawPrimitive)
    (^) projection : Projection - Reference to the last projection object used for the primitive (DrawPrimitive)
    (^) quadrant : PrimitiveQuadrantTreeNode - Reference to the last quadrant used by the drawing primitive. (DrawPrimitive)
        screenvertex : ScreenVertex - The screenvertex used to position the drawing primitive in the view. (DrawDisplayObject)
    (^) screenZ : Number - Indicates the screen z value of the drawing primitive (used for z-sorting). (DrawPrimitive)
        session : AbstractRenderSession - A reference to the render session used by the drawing primitive. (DrawDisplayObject)
    (^) source : Object3D - The parent 3d object of the drawing primitive. (DrawPrimitive)

  PUBLIC METHODS
        calc():void - Calculates the min, max and screen properties required for rendering the drawing primitive. (DrawDisplayObject)
        clear():void - Deletes the data currently held by the drawing primitive. (DrawDisplayObject)
        contains(x:Number, y:Number):Boolean - Determines whether the given point lies inside the drawing primitive (DrawDisplayObject)
    (^) getZ(x:Number, y:Number):Number - Calulates the screen z value of a precise point on the drawing primitive. (DrawPrimitive)
    (^) quarter(focus:Number):Array - Cuts the drawing primitive into 4 equally sized drawing primitives. (DrawPrimitive)
        render():void - Draws the primitive to the view. (DrawDisplayObject)
    (^) toString():String - Used to trace the values of a drawing primitive. (DrawPrimitive)

  PROPERTY DETAIL

    public var displayobject:DisplayObject 
      A reference to the displayobject used by the drawing primitive.

    public var screenvertex:ScreenVertex 
      The screenvertex used to position the drawing primitive in the view.

    public var session:AbstractRenderSession 
      A reference to the render session used by the drawing primitive.
  METHOD DETAIL

    public override function calc():void 
      Calculates the min, max and screen properties required for rendering the drawing primitive.

    public override function clear():void 
      Deletes the data currently held by the drawing primitive.

    public override function contains(x:Number, y:Number):Boolean 
      Determines whether the given point lies inside the drawing primitive
      Parameters
       x:Number - The x position of the point to be tested.
       y:Number - The y position of the point to be tested.
       Returns
       Boolean - The result of the test.

    public override function render():void 
      Draws the primitive to the view.
  CODE EXAMPLES

    
      There are currently no examples for this class


DrawFog
=======
  Package : away3d.core.draw
  Class : public class DrawFog
  Inheritance : DrawPrimitive
  Description : Fog drawing primitive

  PUBLIC PROPERTIES
    (^) create : Function - Placeholder function for creating new drawing primitives from a cache of objects. (DrawPrimitive)
        material : IFogMaterial - The material used to render the drawing primitive. (DrawFog)
    (^) maxX : Number - Indicates the maximum x value of the drawing primitive. (DrawPrimitive)
    (^) maxY : Number - Indicates the maximum y value of the drawing primitive. (DrawPrimitive)
    (^) maxZ : Number - Indicates the maximum z value of the drawing primitive. (DrawPrimitive)
    (^) minX : Number - Indicates the minimum x value of the drawing primitive. (DrawPrimitive)
    (^) minY : Number - Indicates the minimum y value of the drawing primitive. (DrawPrimitive)
    (^) minZ : Number - Indicates the minimum z value of the drawing primitive. (DrawPrimitive)
    (^) projection : Projection - Reference to the last projection object used for the primitive (DrawPrimitive)
    (^) quadrant : PrimitiveQuadrantTreeNode - Reference to the last quadrant used by the drawing primitive. (DrawPrimitive)
    (^) screenZ : Number - Indicates the screen z value of the drawing primitive (used for z-sorting). (DrawPrimitive)
    (^) source : Object3D - The parent 3d object of the drawing primitive. (DrawPrimitive)

  PUBLIC METHODS
    (^) calc():void - Calculates the min, max and screen properties required for rendering the drawing primitive. (DrawPrimitive)
    (^) clear():void - Deletes the data currently held by the drawing primitive. (DrawPrimitive)
    (^) contains(x:Number, y:Number):Boolean - Determines whether the given point lies inside the drawing primitive (DrawPrimitive)
    (^) getZ(x:Number, y:Number):Number - Calulates the screen z value of a precise point on the drawing primitive. (DrawPrimitive)
    (^) quarter(focus:Number):Array - Cuts the drawing primitive into 4 equally sized drawing primitives. (DrawPrimitive)
        render():void - Draws the primitive to the view. (DrawFog)
    (^) toString():String - Used to trace the values of a drawing primitive. (DrawPrimitive)

  PROPERTY DETAIL

    public var material:IFogMaterial 
      The material used to render the drawing primitive.
  METHOD DETAIL

    public override function render():void 
      Draws the primitive to the view.
  CODE EXAMPLES

    
      There are currently no examples for this class


DrawGroup
=========
  Package : away3d.core.draw
  Class : public class DrawGroup
  Inheritance : DrawPrimitive
  Implements : IPrimitiveConsumer
  Description : 

  PUBLIC PROPERTIES
    (^) create : Function - Placeholder function for creating new drawing primitives from a cache of objects. (DrawPrimitive)
    (^) maxX : Number - Indicates the maximum x value of the drawing primitive. (DrawPrimitive)
    (^) maxY : Number - Indicates the maximum y value of the drawing primitive. (DrawPrimitive)
    (^) maxZ : Number - Indicates the maximum z value of the drawing primitive. (DrawPrimitive)
    (^) minX : Number - Indicates the minimum x value of the drawing primitive. (DrawPrimitive)
    (^) minY : Number - Indicates the minimum y value of the drawing primitive. (DrawPrimitive)
    (^) minZ : Number - Indicates the minimum z value of the drawing primitive. (DrawPrimitive)
        primitives : Array - The primitives contained in the group. (DrawGroup)
    (^) projection : Projection - Reference to the last projection object used for the primitive (DrawPrimitive)
    (^) quadrant : PrimitiveQuadrantTreeNode - Reference to the last quadrant used by the drawing primitive. (DrawPrimitive)
    (^) screenZ : Number - Indicates the screen z value of the drawing primitive (used for z-sorting). (DrawPrimitive)
    (^) source : Object3D - The parent 3d object of the drawing primitive. (DrawPrimitive)

  PUBLIC METHODS
    (^) calc():void - Calculates the min, max and screen properties required for rendering the drawing primitive. (DrawPrimitive)
        clear():void - Deletes the data currently held by the drawing primitive. (DrawGroup)
        contains(x:Number, y:Number):Boolean - Determines whether the given point lies inside the drawing primitive (DrawGroup)
    (^) getZ(x:Number, y:Number):Number - Calulates the screen z value of a precise point on the drawing primitive. (DrawPrimitive)
        primitive(pri:DrawPrimitive):void - Adds a drawing primitive to the primitive group (DrawGroup)
    (^) quarter(focus:Number):Array - Cuts the drawing primitive into 4 equally sized drawing primitives. (DrawPrimitive)
        render():void - Draws the primitive to the view. (DrawGroup)
    (^) toString():String - Used to trace the values of a drawing primitive. (DrawPrimitive)

  PROPERTY DETAIL

    public var primitives:Array 
      The primitives contained in the group.
  METHOD DETAIL

    public override function clear():void 
      Deletes the data currently held by the drawing primitive.

    public override function contains(x:Number, y:Number):Boolean 
      Determines whether the given point lies inside the drawing primitive
      Parameters
       x:Number - The x position of the point to be tested.
       y:Number - The y position of the point to be tested.
       Returns
       Boolean - The result of the test.

    public function primitive(pri:DrawPrimitive):void 
      Adds a drawing primitive to the primitive group
      Parameters
       pri:DrawPrimitive - The drawing primitive to add.

    public override function render():void 
      Draws the primitive to the view.
  CODE EXAMPLES

    
      There are currently no examples for this class


DrawPrimitive
=============
  Package : away3d.core.draw
  Class : public class DrawPrimitive
  Subclasses : Blocker, DrawBitmap, DrawDisplayObject, DrawFog, DrawGroup, DrawScaledBitmap, DrawSegment, DrawTriangle
  Description : Abstract class for all drawing primitives

  PUBLIC PROPERTIES
        create : Function - Placeholder function for creating new drawing primitives from a cache of objects. (DrawPrimitive)
        maxX : Number - Indicates the maximum x value of the drawing primitive. (DrawPrimitive)
        maxY : Number - Indicates the maximum y value of the drawing primitive. (DrawPrimitive)
        maxZ : Number - Indicates the maximum z value of the drawing primitive. (DrawPrimitive)
        minX : Number - Indicates the minimum x value of the drawing primitive. (DrawPrimitive)
        minY : Number - Indicates the minimum y value of the drawing primitive. (DrawPrimitive)
        minZ : Number - Indicates the minimum z value of the drawing primitive. (DrawPrimitive)
        projection : Projection - Reference to the last projection object used for the primitive (DrawPrimitive)
        quadrant : PrimitiveQuadrantTreeNode - Reference to the last quadrant used by the drawing primitive. (DrawPrimitive)
        screenZ : Number - Indicates the screen z value of the drawing primitive (used for z-sorting). (DrawPrimitive)
        source : Object3D - The parent 3d object of the drawing primitive. (DrawPrimitive)

  PUBLIC METHODS
        calc():void - Calculates the min, max and screen properties required for rendering the drawing primitive. (DrawPrimitive)
        clear():void - Deletes the data currently held by the drawing primitive. (DrawPrimitive)
        contains(x:Number, y:Number):Boolean - Determines whether the given point lies inside the drawing primitive (DrawPrimitive)
        getZ(x:Number, y:Number):Number - Calulates the screen z value of a precise point on the drawing primitive. (DrawPrimitive)
        quarter(focus:Number):Array - Cuts the drawing primitive into 4 equally sized drawing primitives. (DrawPrimitive)
        render():void - Draws the primitive to the view. (DrawPrimitive)
        toString():String - Used to trace the values of a drawing primitive. (DrawPrimitive)

  PROPERTY DETAIL

    public var create:Function 
      Placeholder function for creating new drawing primitives from a cache of objects. Saves recreating objects and GC problems.

    public var maxX:Number 
      Indicates the maximum x value of the drawing primitive.

    public var maxY:Number 
      Indicates the maximum y value of the drawing primitive.

    public var maxZ:Number 
      Indicates the maximum z value of the drawing primitive.

    public var minX:Number 
      Indicates the minimum x value of the drawing primitive.

    public var minY:Number 
      Indicates the minimum y value of the drawing primitive.

    public var minZ:Number 
      Indicates the minimum z value of the drawing primitive.

    public var projection:Projection 
      Reference to the last projection object used for the primitive

    public var quadrant:PrimitiveQuadrantTreeNode 
      Reference to the last quadrant used by the drawing primitive. Used in PrimitiveQuadrantTree
      See also
      away3d.core.render.PrimitiveQuadrantTree


    public var screenZ:Number 
      Indicates the screen z value of the drawing primitive (used for z-sorting).

    public var source:Object3D 
      The parent 3d object of the drawing primitive.
  METHOD DETAIL

    public function calc():void 
      Calculates the min, max and screen properties required for rendering the drawing primitive.

    public function clear():void 
      Deletes the data currently held by the drawing primitive.

    public function contains(x:Number, y:Number):Boolean 
      Determines whether the given point lies inside the drawing primitive
      Parameters
       x:Number - The x position of the point to be tested.
       y:Number - The y position of the point to be tested.
       Returns
       Boolean - The result of the test.

    public function getZ(x:Number, y:Number):Number 
      Calulates the screen z value of a precise point on the drawing primitive.
      Parameters
       x:Number - The x position of the point to be tested.
       y:Number - The y position of the point to be tested.
       Returns
       Number - The screen z value (used in z-sorting).

    public function quarter(focus:Number):Array 
      Cuts the drawing primitive into 4 equally sized drawing primitives. Used in z-sorting correction.
      Parameters
       focus:Number - The focus value of the camera being used in the view.
       Returns
       Array
       See also
       away3d.cameras.Camera3D


    public function render():void 
      Draws the primitive to the view.

    public function toString():String 
      Used to trace the values of a drawing primitive.
      Returns
      String - A string representation of the drawing primitive.
  CODE EXAMPLES

    
      There are currently no examples for this class


DrawScaledBitmap
================
  Package : away3d.core.draw
  Class : public class DrawScaledBitmap
  Inheritance : DrawPrimitive
  Description : Scaled bitmap primitive

  PUBLIC PROPERTIES
        bitmap : BitmapData - The bitmapData object used as the scaled bitmap primitive texture. (DrawScaledBitmap)
    (^) create : Function - Placeholder function for creating new drawing primitives from a cache of objects. (DrawPrimitive)
    (^) maxX : Number - Indicates the maximum x value of the drawing primitive. (DrawPrimitive)
    (^) maxY : Number - Indicates the maximum y value of the drawing primitive. (DrawPrimitive)
    (^) maxZ : Number - Indicates the maximum z value of the drawing primitive. (DrawPrimitive)
    (^) minX : Number - Indicates the minimum x value of the drawing primitive. (DrawPrimitive)
    (^) minY : Number - Indicates the minimum y value of the drawing primitive. (DrawPrimitive)
    (^) minZ : Number - Indicates the minimum z value of the drawing primitive. (DrawPrimitive)
    (^) projection : Projection - Reference to the last projection object used for the primitive (DrawPrimitive)
    (^) quadrant : PrimitiveQuadrantTreeNode - Reference to the last quadrant used by the drawing primitive. (DrawPrimitive)
        rotation : Number - A rotation value used to rotate the scaled bitmap primitive. (DrawScaledBitmap)
        scale : Number - A scaling value used to scale the scaled bitmap primitive. (DrawScaledBitmap)
        screenvertex : ScreenVertex - The screenvertex used to position the scaled bitmap primitive in the view. (DrawScaledBitmap)
    (^) screenZ : Number - Indicates the screen z value of the drawing primitive (used for z-sorting). (DrawPrimitive)
        smooth : Boolean - Determines whether the texture bitmap is smoothed (bilinearly filtered) when drawn to screen. (DrawScaledBitmap)
    (^) source : Object3D - The parent 3d object of the drawing primitive. (DrawPrimitive)

  PUBLIC METHODS
        calc():void - Calculates the min, max and screen properties required for rendering the drawing primitive. (DrawScaledBitmap)
        clear():void - Deletes the data currently held by the drawing primitive. (DrawScaledBitmap)
        contains(x:Number, y:Number):Boolean - Determines whether the given point lies inside the drawing primitive (DrawScaledBitmap)
    (^) getZ(x:Number, y:Number):Number - Calulates the screen z value of a precise point on the drawing primitive. (DrawPrimitive)
    (^) quarter(focus:Number):Array - Cuts the drawing primitive into 4 equally sized drawing primitives. (DrawPrimitive)
        render():void - Draws the primitive to the view. (DrawScaledBitmap)
    (^) toString():String - Used to trace the values of a drawing primitive. (DrawPrimitive)

  PROPERTY DETAIL

    public var bitmap:BitmapData 
      The bitmapData object used as the scaled bitmap primitive texture.

    public var rotation:Number 
      A rotation value used to rotate the scaled bitmap primitive.

    public var scale:Number 
      A scaling value used to scale the scaled bitmap primitive.

    public var screenvertex:ScreenVertex 
      The screenvertex used to position the scaled bitmap primitive in the view.

    public var smooth:Boolean 
      Determines whether the texture bitmap is smoothed (bilinearly filtered) when drawn to screen.
  METHOD DETAIL

    public override function calc():void 
      Calculates the min, max and screen properties required for rendering the drawing primitive.

    public override function clear():void 
      Deletes the data currently held by the drawing primitive.

    public override function contains(x:Number, y:Number):Boolean 
      Determines whether the given point lies inside the drawing primitive
      Parameters
       x:Number - The x position of the point to be tested.
       y:Number - The y position of the point to be tested.
       Returns
       Boolean - The result of the test.

    public override function render():void 
      Draws the primitive to the view.
  CODE EXAMPLES

    
      There are currently no examples for this class


DrawSegment
===========
  Package : away3d.core.draw
  Class : public class DrawSegment
  Inheritance : DrawPrimitive
  Description : Line segment drawing primitive

  PUBLIC PROPERTIES
    (^) create : Function - Placeholder function for creating new drawing primitives from a cache of objects. (DrawPrimitive)
        length : Number - The screen length of the segment primitive. (DrawSegment)
        material : ISegmentMaterial - The material of the segment primitive. (DrawSegment)
    (^) maxX : Number - Indicates the maximum x value of the drawing primitive. (DrawPrimitive)
    (^) maxY : Number - Indicates the maximum y value of the drawing primitive. (DrawPrimitive)
    (^) maxZ : Number - Indicates the maximum z value of the drawing primitive. (DrawPrimitive)
    (^) minX : Number - Indicates the minimum x value of the drawing primitive. (DrawPrimitive)
    (^) minY : Number - Indicates the minimum y value of the drawing primitive. (DrawPrimitive)
    (^) minZ : Number - Indicates the minimum z value of the drawing primitive. (DrawPrimitive)
    (^) projection : Projection - Reference to the last projection object used for the primitive (DrawPrimitive)
    (^) quadrant : PrimitiveQuadrantTreeNode - Reference to the last quadrant used by the drawing primitive. (DrawPrimitive)
    (^) screenZ : Number - Indicates the screen z value of the drawing primitive (used for z-sorting). (DrawPrimitive)
    (^) source : Object3D - The parent 3d object of the drawing primitive. (DrawPrimitive)
        v0 : ScreenVertex - The v0 screenvertex of the segment primitive. (DrawSegment)
        v1 : ScreenVertex - The v1 screenvertex of the segment primitive. (DrawSegment)

  PUBLIC METHODS
        calc():void - Calculates the min, max and screen properties required for rendering the drawing primitive. (DrawSegment)
        clear():void - Deletes the data currently held by the drawing primitive. (DrawSegment)
        contains(x:Number, y:Number):Boolean - Determines whether the given point lies inside the drawing primitive (DrawSegment)
        getZ(x:Number, y:Number):Number - Calulates the screen z value of a precise point on the drawing primitive. (DrawSegment)
        quarter(focus:Number):Array - Cuts the drawing primitive into 4 equally sized drawing primitives. (DrawSegment)
        render():void - Draws the primitive to the view. (DrawSegment)
        toString():String - Used to trace the values of a drawing primitive. (DrawSegment)

  PROPERTY DETAIL

    public var length:Number 
      The screen length of the segment primitive.

    public var material:ISegmentMaterial 
      The material of the segment primitive.

    public var v0:ScreenVertex 
      The v0 screenvertex of the segment primitive.

    public var v1:ScreenVertex 
      The v1 screenvertex of the segment primitive.
  METHOD DETAIL

    public override function calc():void 
      Calculates the min, max and screen properties required for rendering the drawing primitive.

    public override function clear():void 
      Deletes the data currently held by the drawing primitive.

    public override function contains(x:Number, y:Number):Boolean 
      Determines whether the given point lies inside the drawing primitive
      Parameters
       x:Number - The x position of the point to be tested.
       y:Number - The y position of the point to be tested.
       Returns
       Boolean - The result of the test.

    public override function getZ(x:Number, y:Number):Number 
      Calulates the screen z value of a precise point on the drawing primitive.
      Parameters
       x:Number - The x position of the point to be tested.
       y:Number - The y position of the point to be tested.
       Returns
       Number - The screen z value (used in z-sorting).

    public override function quarter(focus:Number):Array 
      Cuts the drawing primitive into 4 equally sized drawing primitives. Used in z-sorting correction.
      Parameters
       focus:Number - The focus value of the camera being used in the view.
       Returns
       Array

    public override function render():void 
      Draws the primitive to the view.

    public override function toString():String 
      Used to trace the values of a drawing primitive.
      Returns
      String - A string representation of the drawing primitive.
  CODE EXAMPLES

    
      There are currently no examples for this class


DrawTriangle
============
  Package : away3d.core.draw
  Class : public class DrawTriangle
  Inheritance : DrawPrimitive
  Description : Triangle drawing primitive

  PUBLIC PROPERTIES
        area : Number - The calulated area of the triangle primitive. (DrawTriangle)
        backface : Boolean = false - Indicates whether the face of the triangle primitive is facing away from the camera. (DrawTriangle)
    (^) create : Function - Placeholder function for creating new drawing primitives from a cache of objects. (DrawPrimitive)
        face : Face - A reference to the face object used by the triangle primitive. (DrawTriangle)
        invtexturemapping : Matrix - The inverse texturemapping matrix of the triangle primitive texture. (DrawTriangle)
        material : ITriangleMaterial - The bitmapData object used as the triangle primitive texture. (DrawTriangle)
    (^) maxX : Number - Indicates the maximum x value of the drawing primitive. (DrawPrimitive)
    (^) maxY : Number - Indicates the maximum y value of the drawing primitive. (DrawPrimitive)
    (^) maxZ : Number - Indicates the maximum z value of the drawing primitive. (DrawPrimitive)
    (^) minX : Number - Indicates the minimum x value of the drawing primitive. (DrawPrimitive)
    (^) minY : Number - Indicates the minimum y value of the drawing primitive. (DrawPrimitive)
    (^) minZ : Number - Indicates the minimum z value of the drawing primitive. (DrawPrimitive)
    (^) projection : Projection - Reference to the last projection object used for the primitive (DrawPrimitive)
    (^) quadrant : PrimitiveQuadrantTreeNode - Reference to the last quadrant used by the drawing primitive. (DrawPrimitive)
    (^) screenZ : Number - Indicates the screen z value of the drawing primitive (used for z-sorting). (DrawPrimitive)
    (^) source : Object3D - The parent 3d object of the drawing primitive. (DrawPrimitive)
        texturemapping : Matrix - The texturemapping matrix of the triangle primitive texture. (DrawTriangle)
        uv0 : UV - The uv0 uv coordinate of the triangle primitive. (DrawTriangle)
        uv1 : UV - The uv1 uv coordinate of the triangle primitive. (DrawTriangle)
        uv2 : UV - The uv2 uv coordinate of the triangle primitive. (DrawTriangle)
        v0 : ScreenVertex - The v0 screenvertex of the triangle primitive. (DrawTriangle)
        v1 : ScreenVertex - The v1 screenvertex of the triangle primitive. (DrawTriangle)
        v2 : ScreenVertex - The v2 screenvertex of the triangle primitive. (DrawTriangle)

  PUBLIC METHODS
        calc():void - Calculates the min, max and screen properties required for rendering the drawing primitive. (DrawTriangle)
        clear():void - Deletes the data currently held by the drawing primitive. (DrawTriangle)
        contains(x:Number, y:Number):Boolean - Determines whether the given point lies inside the drawing primitive (DrawTriangle)
        distanceToCenter(x:Number, y:Number):Number -  (DrawTriangle)
        getUV(x:Number, y:Number):UV - Calulates the uv value of a precise point on the drawing primitive. (DrawTriangle)
        getZ(x:Number, y:Number):Number - Calulates the screen z value of a precise point on the drawing primitive. (DrawTriangle)
        quarter(focus:Number):Array - Cuts the drawing primitive into 4 equally sized drawing primitives. (DrawTriangle)
        render():void - Draws the primitive to the view. (DrawTriangle)
        toString():String - Used to trace the values of a drawing primitive. (DrawTriangle)
        transformUV(material:IUVMaterial):Matrix - Calculates from the uv coordinates the mapping matrix required to draw the triangle primitive. (DrawTriangle)

  PROPERTY DETAIL

    public var area:Number 
      The calulated area of the triangle primitive.

    public var backface:Boolean = false 
      Indicates whether the face of the triangle primitive is facing away from the camera.

    public var face:Face 
      A reference to the face object used by the triangle primitive.

    public var invtexturemapping:Matrix 
      The inverse texturemapping matrix of the triangle primitive texture.

    public var material:ITriangleMaterial 
      The bitmapData object used as the triangle primitive texture.

    public var texturemapping:Matrix 
      The texturemapping matrix of the triangle primitive texture.

    public var uv0:UV 
      The uv0 uv coordinate of the triangle primitive.

    public var uv1:UV 
      The uv1 uv coordinate of the triangle primitive.

    public var uv2:UV 
      The uv2 uv coordinate of the triangle primitive.

    public var v0:ScreenVertex 
      The v0 screenvertex of the triangle primitive.

    public var v1:ScreenVertex 
      The v1 screenvertex of the triangle primitive.

    public var v2:ScreenVertex 
      The v2 screenvertex of the triangle primitive.
  METHOD DETAIL

    public override function calc():void 
      Calculates the min, max and screen properties required for rendering the drawing primitive.

    public override function clear():void 
      Deletes the data currently held by the drawing primitive.

    public final override function contains(x:Number, y:Number):Boolean 
      Determines whether the given point lies inside the drawing primitive
      Parameters
       x:Number - The x position of the point to be tested.
       y:Number - The y position of the point to be tested.
       Returns
       Boolean - The result of the test.

    public final function distanceToCenter(x:Number, y:Number):Number 
      Parameters
       x:Number
       y:Number
       Returns
       Number

    public function getUV(x:Number, y:Number):UV 
      Calulates the uv value of a precise point on the drawing primitive. Used to determine the mouse position in interactive materials.
      Parameters
       x:Number - The x position of the point to be tested.
       y:Number - The y position of the point to be tested.
       Returns
       UV - The uv value.

    public final override function getZ(x:Number, y:Number):Number 
      Calulates the screen z value of a precise point on the drawing primitive.
      Parameters
       x:Number - The x position of the point to be tested.
       y:Number - The y position of the point to be tested.
       Returns
       Number - The screen z value (used in z-sorting).

    public final override function quarter(focus:Number):Array 
      Cuts the drawing primitive into 4 equally sized drawing primitives. Used in z-sorting correction.
      Parameters
       focus:Number - The focus value of the camera being used in the view.
       Returns
       Array

    public override function render():void 
      Draws the primitive to the view.

    public override function toString():String 
      Used to trace the values of a drawing primitive.
      Returns
      String - A string representation of the drawing primitive.

    public final function transformUV(material:IUVMaterial):Matrix 
      Calculates from the uv coordinates the mapping matrix required to draw the triangle primitive.
      Parameters
       material:IUVMaterial
       Returns
       Matrix
  CODE EXAMPLES

    
      There are currently no examples for this class


Elevation
=========
  Package : away3d.extrusions
  Class : public class Elevation

  PUBLIC METHODS
        -  (Elevation)
        generate(sourceBmd:BitmapData, channel:String = "r", subdivisionX:int = 10, subdivisionY:int = 10, scalingX:Number = 1, scalingY:Number = 1, elevate:Number = .5):Array -  (Elevation)

  CONSTRUCTOR DETAIL

    public function Elevation() 
      Class returns a multidimentional array based on pixel information that can be passed to the SkinExtrude class.
  METHOD DETAIL

    public function generate(sourceBmd:BitmapData, channel:String = "r", subdivisionX:int = 10, subdivisionY:int = 10, scalingX:Number = 1, scalingY:Number = 1, elevate:Number = .5):Array 
      Parameters
       sourceBmd:BitmapData
       channel:String (default = "r")
       subdivisionX:int (default = 10)
       subdivisionY:int (default = 10)
       scalingX:Number (default = 1)
       scalingY:Number (default = 1)
       elevate:Number (default = .5)
       Returns
       Array
  CODE EXAMPLES

    
      There are currently no examples for this class


ElevationReader
===============
  Package : away3d.extrusions
  Class : public class ElevationReader

  PUBLIC PROPERTIES
        source : BitmapData - [read-only] (ElevationReader)

  PUBLIC METHODS
        -  (ElevationReader)
        getLevel(x:Number, y:Number, offset:Number = 0):Number -  (ElevationReader)
        traceLevels(sourceBmd:BitmapData, channel:String = "r", subdivisionX:int = 10, subdivisionY:int = 10, factorX:Number = 1, factorY:Number = 1, elevate:Number = .5):void -  (ElevationReader)

  PROPERTY DETAIL

    source:BitmapData[read-only]
      Implementation
       public function get source():BitmapData

  CONSTRUCTOR DETAIL

    public function ElevationReader(smoothness:int = 0) 
      Parameters
       smoothness:int (default = 0)
  METHOD DETAIL

    public function getLevel(x:Number, y:Number, offset:Number = 0):Number 
      Parameters
       x:Number
       y:Number
       offset:Number (default = 0)
       Returns
       Number

    public function traceLevels(sourceBmd:BitmapData, channel:String = "r", subdivisionX:int = 10, subdivisionY:int = 10, factorX:Number = 1, factorY:Number = 1, elevate:Number = .5):void 
      Parameters
       sourceBmd:BitmapData
       channel:String (default = "r")
       subdivisionX:int (default = 10)
       subdivisionY:int (default = 10)
       factorX:Number (default = 1)
       factorY:Number (default = 1)
       elevate:Number (default = .5)
  CODE EXAMPLES

    
      There are currently no examples for this class


EnviroBitmapMaterial
====================
  Package : away3d.materials
  Class : public class EnviroBitmapMaterial
  Inheritance : CompositeMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - Defines an alpha value for the layer container. (CompositeMaterial)
        bitmap : BitmapData - [read-only] Returns the bitmapData object being used as the material texture. (EnviroBitmapMaterial)
    (^) blendMode : String - Defines a blendMode value for the layer container. (CompositeMaterial)
    (^) color : uint - Defines a colored tint for the layer container. (CompositeMaterial)
        enviroMap : BitmapData - [read-only] Returns the bitmapData object being used as the material environment map. (EnviroBitmapMaterial)
    (^) materials : Array - An array of bitmapmaterial objects to be overlayed sequentially. (CompositeMaterial)
        mode : String - Setting for possible mapping methods. (EnviroBitmapMaterial)
        reflectiveness : Number - Coefficient for the reflectiveness of the material. (EnviroBitmapMaterial)
    (^) visible : Boolean - Indicates whether the material is visible (CompositeMaterial)

  PROTECTED PROPERTIES
        (EnviroBitmapMaterial)
    (^) renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (CompositeMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (CompositeMaterial)
    (^) updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (CompositeMaterial)

  PROTECTED METHODS
    (^) setColorTransform():void (CompositeMaterial)

  PROPERTY DETAIL

    bitmap:BitmapData[read-only]
      Returns the bitmapData object being used as the material texture.
      Implementation
       public function get bitmap():BitmapData


    enviroMap:BitmapData[read-only]
      Returns the bitmapData object being used as the material environment map.
      Implementation
       public function get enviroMap():BitmapData


    mode:String[read-write]
      Setting for possible mapping methods.
      Implementation
       public function get mode():String
       public function set mode(value:String):void


    reflectiveness:Number[read-write]
      Coefficient for the reflectiveness of the material.
      Implementation
       public function get reflectiveness():Number
       public function set reflectiveness(value:Number):void

  CONSTRUCTOR DETAIL

    public function EnviroBitmapMaterial(bitmap:BitmapData, enviroMap:BitmapData, init:Object = null) 
      Parameters
       bitmap:BitmapData - The bitmapData object to be used as the material's texture.
       enviroMap:BitmapData - The bitmapData object to be used as the material's normal map.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       mode:String (default = "linear")
       reflectiveness:Number (default = 0.5, min:0, max:1)
  CODE EXAMPLES

    
      There are currently no examples for this class


EnviroBitmapMaterialCache
=========================
  Package : away3d.materials
  Class : public class EnviroBitmapMaterialCache
  Inheritance : BitmapMaterialContainer, BitmapMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - Defines an alpha value for the texture bitmap. (BitmapMaterial)
        bitmap : BitmapData - [read-only] Returns the bitmapData object being used as the material texture. (EnviroBitmapMaterialCache)
    (^) blendMode : String - Defines a blendMode value for the texture bitmap. (BitmapMaterial)
    (^) cache : Boolean - Defines whether each created bitmapData surface is to be cached, or updated every frame. (BitmapMaterialContainer)
    (^) color : uint - Defines a colored tint for the texture bitmap. (BitmapMaterial)
    (^) debug : Boolean = false - Toggles debug mode: textured triangles are drawn with white outlines, precision correction triangles are drawn with blue outlines. (BitmapMaterial)
        enviroMap : BitmapData - [read-only] Returns the bitmapData object being used as the material environment map. (EnviroBitmapMaterialCache)
    (^) height : Number - Returns the height of the bitmapData being used as the material texture. (BitmapMaterial)
    (^) materials : Array - An array of bitmapmaterial objects to be overlayed sequentially. (BitmapMaterialContainer)
        mode : String - Setting for possible mapping methods. (EnviroBitmapMaterialCache)
    (^) precision : Number - Corrects distortion caused by the affine transformation (non-perpective) of textures. (BitmapMaterial)
        reflectiveness : Number - Coefficient for the reflectiveness of the material. (EnviroBitmapMaterialCache)
    (^) repeat : Boolean = false - Determines if texture bitmap will tile in uv-space (BitmapMaterial)
    (^) smooth : Boolean = false - Determines if texture bitmap is smoothed (bilinearly filtered) when drawn to screen. (BitmapMaterial)
    (^) transparent : Boolean - Defines whether the caching bitmapData objects are transparent (BitmapMaterialContainer)
    (^) visible : Boolean - Indicates whether the material is visible (BitmapMaterial)
    (^) width : Number - Returns the width of the bitmapData being used as the material texture. (BitmapMaterial)

  PROTECTED PROPERTIES
        (EnviroBitmapMaterialCache)
    (^) addOnResize(listener:Function):void - Default method for adding a materialresize event listener (BitmapMaterial)
    (^) getPixel32(u:Number, v:Number):uint - Returns the argb value of the bitmapData pixel at the given u v coordinate. (BitmapMaterial)
    (^) removeOnResize(listener:Function):void - Default method for removing a materialresize event listener (BitmapMaterial)
    (^) renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (BitmapMaterialContainer)
    (^) renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (BitmapMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (BitmapMaterial)
    (^) update():void - Clear and updates the currrent bitmapData surface on all faces. (BitmapMaterialContainer)
    (^) updateMaterial(source:Object3D, view:View3D):void (BitmapMaterialContainer)

  PROTECTED METHODS
    (^) getMapping(tri:DrawTriangle):Matrix - Calculates the mapping matrix required to draw the triangle texture to screen. (BitmapMaterialContainer)
    (^) setColorTransform():void (BitmapMaterial)
    (^) updateRenderBitmap():void (BitmapMaterialContainer)

  EVENTS
    (^) (BitmapMaterial)

  PROPERTY DETAIL

    bitmap:BitmapData[read-only]
      Returns the bitmapData object being used as the material texture.
      Implementation
       public function get bitmap():BitmapData


    enviroMap:BitmapData[read-only]
      Returns the bitmapData object being used as the material environment map.
      Implementation
       public function get enviroMap():BitmapData


    mode:String[read-write]
      Setting for possible mapping methods.
      Implementation
       public function get mode():String
       public function set mode(value:String):void


    reflectiveness:Number[read-write]
      Coefficient for the reflectiveness of the material.
      Implementation
       public function get reflectiveness():Number
       public function set reflectiveness(value:Number):void

  CONSTRUCTOR DETAIL

    public function EnviroBitmapMaterialCache(bitmap:BitmapData, enviroMap:BitmapData, init:Object = null) 
      Parameters
       bitmap:BitmapData - The bitmapData object to be used as the material's texture.
       enviroMap:BitmapData - The bitmapData object to be used as the material's environment map.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       mode:String (default = "linear")
       reflectiveness:Number (default = 0.5, min:0, max:1)
  CODE EXAMPLES

    
      There are currently no examples for this class


EnviroColorMaterial
===================
  Package : away3d.materials
  Class : public class EnviroColorMaterial
  Inheritance  Implements : ITriangleMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) bitmap : BitmapData - Returns the bitmapData object being used as the shader environment map. (EnviroShader)
    (^) blendMode : String - Defines a blendMode value for the shader bitmap. (AbstractShader)
        color : uint - Defines the color of the material. (EnviroColorMaterial)
    (^) debug : Boolean - Determines if faces with the shader applied are drawn with outlines (AbstractShader)
    (^) height : Number - Returns the width of the bitmapData being used as the shader environment map. (EnviroShader)
    (^) mode : String - Setting for possible mapping methods. (EnviroShader)
        reflectiveness : Number - [write-only] Coefficient for the reflectiveness of the environment map. (EnviroColorMaterial)
    (^) smooth : Boolean - Determines if the shader bitmap is smoothed (bilinearly filtered) when drawn to screen (AbstractShader)
    (^) visible : Boolean - Indicates whether the material is visible (AbstractShader)
    (^) width : Number - Returns the height of the bitmapData being used as the shader environment map. (EnviroShader)

  PROTECTED PROPERTIES
        (EnviroColorMaterial)
    (^) getMapping(source:Mesh, face:Face):Matrix -  (EnviroShader)
    (^) renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (AbstractShader)
    (^) renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (EnviroShader)
        renderTriangle(tri:DrawTriangle):void - Sends the material data coupled with data from the DrawTriangle primitive to the render session. (EnviroColorMaterial)
    (^) updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (EnviroShader)

  PROTECTED METHODS
    (^) clearFaceDictionary(source:Object3D, view:View3D):void - Clears face value objects when shader requires updating (EnviroShader)
    (^) getLightingShape(layer:Sprite, light:LightPrimitive):Shape - Returns a shape object for use by light shaders (AbstractShader)
    (^) getShape(layer:Sprite):Shape - Returns a shape object for use by environment shaders. (AbstractShader)
    (^) renderShader(face:Face):void - Renders the shader to the specified face. (EnviroShader)

  PROPERTY DETAIL

    color:uint[read-write]
      Defines the color of the material.
      Implementation
       public function get color():uint
       public function set color(value:uint):void


    reflectiveness:Number[write-only]
      Coefficient for the reflectiveness of the environment map.
      Implementation
       public function set reflectiveness(value:Number):void

  CONSTRUCTOR DETAIL

    public function EnviroColorMaterial(color:*, enviroMap:BitmapData, init:Object = null) 
      Parameters
       color:* - A string, hex value or colorname representing the color of the material.
       enviroMap:BitmapData - The bitmapData object to be used as the material's environment map.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
  METHOD DETAIL

    public function renderTriangle(tri:DrawTriangle):void 
      Sends the material data coupled with data from the DrawTriangle primitive to the render session.
      Parameters
       tri:DrawTriangle
  CODE EXAMPLES

    
      There are currently no examples for this class


EnviroShader
============
  Package : away3d.materials.shaders
  Class : public class EnviroShader
  Inheritance : AbstractShader
  Subclasses : EnviroColorMaterial
  Description : 

  PUBLIC PROPERTIES
        bitmap : BitmapData - [read-only] Returns the bitmapData object being used as the shader environment map. (EnviroShader)
    (^) blendMode : String - Defines a blendMode value for the shader bitmap. (AbstractShader)
    (^) debug : Boolean - Determines if faces with the shader applied are drawn with outlines (AbstractShader)
        height : Number - [read-only] Returns the width of the bitmapData being used as the shader environment map. (EnviroShader)
        mode : String - Setting for possible mapping methods. (EnviroShader)
        reflectiveness : Number - Coefficient for the reflectiveness of the environment map. (EnviroShader)
    (^) smooth : Boolean - Determines if the shader bitmap is smoothed (bilinearly filtered) when drawn to screen (AbstractShader)
    (^) visible : Boolean - Indicates whether the material is visible (AbstractShader)
        width : Number - [read-only] Returns the height of the bitmapData being used as the shader environment map. (EnviroShader)

  PROTECTED PROPERTIES
        (EnviroShader)
        getMapping(source:Mesh, face:Face):Matrix -  (EnviroShader)
    (^) renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (AbstractShader)
        renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (EnviroShader)
        updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (EnviroShader)

  PROTECTED METHODS
        clearFaceDictionary(source:Object3D, view:View3D):void - Clears face value objects when shader requires updating (EnviroShader)
    (^) getLightingShape(layer:Sprite, light:LightPrimitive):Shape - Returns a shape object for use by light shaders (AbstractShader)
    (^) getShape(layer:Sprite):Shape - Returns a shape object for use by environment shaders. (AbstractShader)
        renderShader(face:Face):void - Renders the shader to the specified face. (EnviroShader)

  PROPERTY DETAIL

    bitmap:BitmapData[read-only]
      Returns the bitmapData object being used as the shader environment map.
      Implementation
       public function get bitmap():BitmapData


    height:Number[read-only]
      Returns the width of the bitmapData being used as the shader environment map.
      Implementation
       public function get height():Number


    public var mode:String 
      Setting for possible mapping methods.

    reflectiveness:Number[read-write]
      Coefficient for the reflectiveness of the environment map.
      Implementation
       public function get reflectiveness():Number
       public function set reflectiveness(value:Number):void


    width:Number[read-only]
      Returns the height of the bitmapData being used as the shader environment map.
      Implementation
       public function get width():Number

  CONSTRUCTOR DETAIL

    public function EnviroShader(bitmap:BitmapData, init:Object = null) 
      Parameters
       bitmap:BitmapData - The bitmapData object to be used as the material's environment map.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
  METHOD DETAIL

    protected override function clearFaceDictionary(source:Object3D, view:View3D):void 
      Clears face value objects when shader requires updating
      Parameters
       source:Object3D - The parent 3d object of the face.
       view:View3D - The view rendering the draw triangle.

    public function getMapping(source:Mesh, face:Face):Matrix 
      Parameters
       source:Mesh
       face:Face
       Returns
       Matrix

    public override function renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void 
      Renders a material layer for the specified triangle.
      Parameters
       tri:DrawTriangle - The drawtriangle used for render information.
       layer:Sprite - The parent layer into which the triangle is drawn.
       level:int - Defines the sprite level for the layer.

    protected override function renderShader(face:Face):void 
      Renders the shader to the specified face.
      Parameters
       face:Face - The face object being rendered.

    public override function updateMaterial(source:Object3D, view:View3D):void 
      Called once per render loop when material is visible.
      Parameters
       source:Object3D
       view:View3D
  CODE EXAMPLES

    
      There are currently no examples for this class


Face
====
  Package : away3d.core.base
  Class : public class Face
  Inheritance : BaseMeshElement
  Description : 

  PUBLIC PROPERTIES
        area : Number - [read-only] Returns the calculated 2 dimensional area of the face. (Face)
        back : ITriangleMaterial - Defines the optional back material of the face. (Face)
        extra : Object - An optional untyped object that can contain used-defined properties. (Face)
        material : ITriangleMaterial - Defines the material of the face. (Face)
        maxU : Number - [read-only] Returns the maximum u value of the face (Face)
        maxV : Number - [read-only] Returns the maximum v value of the face (Face)
        maxX : Number - [read-only] Returns the maximum x value of the face (Face)
        maxY : Number - [read-only] Returns the maximum y value of the face (Face)
        maxZ : Number - [read-only] Returns the maximum zx value of the face (Face)
        minU : Number - [read-only] Returns the minimum u value of the face (Face)
        minV : Number - [read-only] Returns the minimum v value of the face (Face)
        minX : Number - [read-only] Returns the minimum x value of the face (Face)
        minY : Number - [read-only] Returns the minimum y value of the face (Face)
        minZ : Number - [read-only] Returns the minimum z value of the face (Face)
        normal : Number3D - [read-only] Returns the normal vector of the face. (Face)
        parent : Mesh - Defines the parent 3d object of the face. (Face)
        radius2 : Number - [read-only] Returns the squared bounding radius of the face. (Face)
        uv0 : UV - Defines the uv0 coordinate of the face. (Face)
        uv1 : UV - Defines the uv1 coordinate of the face. (Face)
        uv2 : UV - Defines the uv2 coordinate of the face. (Face)
        uvs : Array - [read-only] Returns an array of uv objects that are used by the face. (Face)
        v0 : Vertex - Defines the v0 vertex of the face. (Face)
        v1 : Vertex - Defines the v1 vertex of the face. (Face)
        v2 : Vertex - Defines the v2 vertex of the face. (Face)
        vertices : Array - [read-only] Returns an array of vertex objects that are used by the face. (Face)
    (^) visible : Boolean - Defines whether the 3d element is visible in the scene. (BaseMeshElement)

  PUBLIC METHODS
        (Face)
        addOnMappingChange(listener:Function):void - Default method for adding a mappingchanged event listener (Face)
        addOnMaterialChange(listener:Function):void - Default method for adding a materialchanged event listener (Face)
    (^) addOnVertexChange(listener:Function):void - Default method for adding a vertexchanged event listener (BaseMeshElement)
    (^) addOnVertexValueChange(listener:Function):void - Default method for adding a vertexvaluechanged event listener (BaseMeshElement)
    (^) addOnVisibleChange(listener:Function):void - Default method for adding a visiblechanged event listener (BaseMeshElement)
        invert():void (Face)
        removeOnMappingChange(listener:Function):void - Default method for removing a mappingchanged event listener (Face)
        removeOnMaterialChange(listener:Function):void - Default method for removing a materialchanged event listener (Face)
    (^) removeOnVertexChange(listener:Function):void - Default method for removing a vertexchanged event listener (BaseMeshElement)
    (^) removeOnVertexValueChange(listener:Function):void - Default method for removing a vertexvaluechanged event listener (BaseMeshElement)
    (^) removeOnVisibleChange(listener:Function):void - Default method for removing a visiblechanged event listener (BaseMeshElement)

  EVENTS
        (Face)
        (Face)
    (^) (BaseMeshElement)
    (^) (BaseMeshElement)
    (^) (BaseMeshElement)

  PROPERTY DETAIL

    area:Number[read-only]
      Returns the calculated 2 dimensional area of the face.
      Implementation
       public function get area():Number


    back:ITriangleMaterial[read-write]
      Defines the optional back material of the face. Displays when the face is pointing away from the camera.
      Implementation
       public function get back():ITriangleMaterial
       public function set back(value:ITriangleMaterial):void


    public var extra:Object 
      An optional untyped object that can contain used-defined properties.

    material:ITriangleMaterial[read-write]
      Defines the material of the face.
      Implementation
       public function get material():ITriangleMaterial
       public function set material(value:ITriangleMaterial):void


    maxU:Number[read-only]
      Returns the maximum u value of the face
      Implementation
       public function get maxU():Number
       See also
       away3d.core.base.UV.u


    maxV:Number[read-only]
      Returns the maximum v value of the face
      Implementation
       public function get maxV():Number
       See also
       away3d.core.base.UV.v


    maxX:Number[read-only]
      Returns the maximum x value of the face
      Implementation
       public function get maxX():Number
       See also
       maxY
       property
       maxY:Number[read-only]

    maxY:Number[read-only]
       Returns the maximum y value of the face
       Implementation
       public function get maxY():Number
       See also
       maxZ
       property
       maxZ:Number[read-only]

    maxZ:Number[read-only]
       Returns the maximum zx value of the face
       Implementation
       public function get maxZ():Number
       See also
       minU
       property
       minU:Number[read-only]

    minU:Number[read-only]
       Returns the minimum u value of the face
       Implementation
       public function get minU():Number
       See also
       away3d.core.base.UV.u


    minV:Number[read-only]
      Returns the minimum v value of the face
      Implementation
       public function get minV():Number
       See also
       away3d.core.base.UV.v


    minX:Number[read-only]
      Returns the minimum x value of the face
      Implementation
       public function get minX():Number
       See also
       minY
       property
       minY:Number[read-only]

    minY:Number[read-only]
       Returns the minimum y value of the face
       Implementation
       public function get minY():Number
       See also
       minZ
       property
       minZ:Number[read-only]

    minZ:Number[read-only]
       Returns the minimum z value of the face
       Implementation
       public function get minZ():Number
       See also
       normal
       property
       normal:Number3D[read-only]

    normal:Number3D[read-only]
       Returns the normal vector of the face.
       Implementation
       public function get normal():Number3D


    public var parent:Mesh 
      Defines the parent 3d object of the face.

    radius2:Number[read-only]
      Returns the squared bounding radius of the face.
      Implementation
       public function get radius2():Number


    uv0:UV[read-write]
      Defines the uv0 coordinate of the face.
      Implementation
       public function get uv0():UV
       public function set uv0(value:UV):void


    uv1:UV[read-write]
      Defines the uv1 coordinate of the face.
      Implementation
       public function get uv1():UV
       public function set uv1(value:UV):void


    uv2:UV[read-write]
      Defines the uv2 coordinate of the face.
      Implementation
       public function get uv2():UV
       public function set uv2(value:UV):void


    uvs:Array[read-only]
      Returns an array of uv objects that are used by the face.
      Implementation
       public function get uvs():Array


    v0:Vertex[read-write]
      Defines the v0 vertex of the face.
      Implementation
       public function get v0():Vertex
       public function set v0(value:Vertex):void


    v1:Vertex[read-write]
      Defines the v1 vertex of the face.
      Implementation
       public function get v1():Vertex
       public function set v1(value:Vertex):void


    v2:Vertex[read-write]
      Defines the v2 vertex of the face.
      Implementation
       public function get v2():Vertex
       public function set v2(value:Vertex):void


    vertices:Array[read-only]
      Returns an array of vertex objects that are used by the face.
      Implementation
       public function get vertices():Array

  CONSTRUCTOR DETAIL

    public function Face(v0:Vertex, v1:Vertex, v2:Vertex, material:ITriangleMaterial = null, uv0:UV = null, uv1:UV = null, uv2:UV = null) 
      Parameters
       v0:Vertex - The first vertex object of the triangle
       v1:Vertex - The second vertex object of the triangle
       v2:Vertex - The third vertex object of the triangle
       material:ITriangleMaterial (default = null) - The material used by the triangle to render
       uv0:UV (default = null) - [optional] The first uv object of the triangle
       uv1:UV (default = null) - [optional] The second uv object of the triangle
       uv2:UV (default = null) - [optional] The third uv object of the triangle
       See also
       away3d.core.base.Vertex
       away3d.materials.ITriangleMaterial
       away3d.core.base.UV

  METHOD DETAIL

    public function addOnMappingChange(listener:Function):void 
      Default method for adding a mappingchanged event listener
      Parameters
       listener:Function - The listener function

    public function addOnMaterialChange(listener:Function):void 
      Default method for adding a materialchanged event listener
      Parameters
       listener:Function - The listener function

    public function invert():void 
      Inverts the geometry of the face object by swapping the v1, v2 and uv1, uv2 points.

    public function removeOnMappingChange(listener:Function):void 
      Default method for removing a mappingchanged event listener
      Parameters
       listener:Function - The listener function

    public function removeOnMaterialChange(listener:Function):void 
      Default method for removing a materialchanged event listener
      Parameters
       listener:Function - The listener function
  EVENT DETAIL

    Event object type: away3d.events.FaceEvent
      Dispatched when the uv mapping of the face changes.

    Event object type: away3d.events.FaceEvent
      Dispatched when the material of the face changes.
  CODE EXAMPLES

    
      There are currently no examples for this class


FaceData
========
  Package : away3d.loaders.data
  Class : public class FaceData

  PUBLIC PROPERTIES
        materialData : MaterialData - Holds teh material data for the face. (FaceData)
        uv0 : int - Index of uv coordinate 0. (FaceData)
        uv1 : int - Index of uv coordinate 1. (FaceData)
        uv2 : int - Index of uv coordinate 2. (FaceData)
        v0 : int - Index of vertex 0. (FaceData)
        v1 : int - Index of vertex 1. (FaceData)
        v2 : int - Index of vertex 2. (FaceData)
        visible : Boolean - Determines whether the face is visible. (FaceData)

  PROPERTY DETAIL

    public var materialData:MaterialData 
      Holds teh material data for the face.

    public var uv0:int 
      Index of uv coordinate 0.

    public var uv1:int 
      Index of uv coordinate 1.

    public var uv2:int 
      Index of uv coordinate 2.

    public var v0:int 
      Index of vertex 0.

    public var v1:int 
      Index of vertex 1.

    public var v2:int 
      Index of vertex 2.

    public var visible:Boolean 
      Determines whether the face is visible.
  CODE EXAMPLES

    
      There are currently no examples for this class


FaceDictionaryVO
================
  Package : away3d.core.utils
  Class : public class FaceDictionaryVO

  PUBLIC PROPERTIES
        bitmap : BitmapData -  (FaceDictionaryVO)
        dirty : Boolean -  (FaceDictionaryVO)

  PUBLIC METHODS
        -  (FaceDictionaryVO)
        clear():void -  (FaceDictionaryVO)
        reset(width:Number, height:Number):void -  (FaceDictionaryVO)

  PROPERTY DETAIL

    public var bitmap:BitmapData 

    public var dirty:Boolean 
  CONSTRUCTOR DETAIL

    public function FaceDictionaryVO(width:Number = 0, height:Number = 0) 
      Parameters
       width:Number (default = 0)
       height:Number (default = 0)
  METHOD DETAIL

    public function clear():void 

    public function reset(width:Number, height:Number):void 
      Parameters
       width:Number
       height:Number
  CODE EXAMPLES

    
      There are currently no examples for this class


FaceEvent
=========
  Package : away3d.events
  Class : public class FaceEvent
  Inheritance
  PUBLIC PROPERTIES
        : Face
 face : Face  Description : 
 - A reference to the face object that is relevant to the event. (FaceEvent)

  PUBLIC METHODS
        (FaceEvent)
        clone():Event - Creates a copy of the FaceEvent object and sets the value of each property to match that of the original. (FaceEvent)

  PUBLIC CONSTANTS
        MAPPING_CHANGED : String = "mappingchanged" - [static] Defines the value of the type property of a mappingchanged event object. (FaceEvent)
        MATERIAL_CHANGED : String = "materialchanged" - [static] Defines the value of the type property of a materialchanged event object. (FaceEvent)

  PROPERTY DETAIL

    public var face:Face 
      A reference to the face object that is relevant to the event.
  CONSTRUCTOR DETAIL

    public function FaceEvent(type:String, face:Face) 
      Parameters
       type:String - The type of the event. Possible values are: FaceEvent.MAPPING_CHANGED and FaceEvent.MATERIAL_CHANGED.
       face:Face - A reference to the face object that is relevant to the event.
  METHOD DETAIL

    public override function clone():Event 
      Creates a copy of the FaceEvent object and sets the value of each property to match that of the original.
      Returns
      Event
  CONSTANT DETAIL

    public static const MAPPING_CHANGED:String = "mappingchanged" 
      Defines the value of the type property of a mappingchanged event object.

    public static const MATERIAL_CHANGED:String = "materialchanged" 
      Defines the value of the type property of a materialchanged event object.
  CODE EXAMPLES

    
      There are currently no examples for this class


FaceVO
======
  Package : away3d.core.utils
  Class : public class FaceVO

  PUBLIC PROPERTIES
        backface : Boolean = false -  (FaceVO)
        bitmap : BitmapData -  (FaceVO)
        cleared : Boolean = true -  (FaceVO)
        color : uint -  (FaceVO)
        height : int -  (FaceVO)
        invalidated : Boolean = true -  (FaceVO)
        mapping : Matrix -  (FaceVO)
        resized : Boolean -  (FaceVO)
        source : Object3D -  (FaceVO)
        updated : Boolean = false -  (FaceVO)
        view : View3D -  (FaceVO)
        width : int -  (FaceVO)

  PUBLIC METHODS
        -  (FaceVO)
        clear():void -  (FaceVO)
        resize(width:Number, height:Number, transparent:Boolean = true):void -  (FaceVO)

  PROPERTY DETAIL

    public var backface:Boolean = false 

    public var bitmap:BitmapData 

    public var cleared:Boolean = true 

    public var color:uint 

    public var height:int 

    public var invalidated:Boolean = true 

    public var mapping:Matrix 

    public var resized:Boolean 

    public var source:Object3D 

    public var updated:Boolean = false 

    public var view:View3D 

    public var width:int 
  CONSTRUCTOR DETAIL

    public function FaceVO(source:Object3D = null, view:View3D = null) 
      Parameters
       source:Object3D (default = null)
       view:View3D (default = null)
  METHOD DETAIL

    public function clear():void 

    public function resize(width:Number, height:Number, transparent:Boolean = true):void 
      Parameters
       width:Number
       height:Number
       transparent:Boolean (default = true)
  CODE EXAMPLES

    
      There are currently no examples for this class


FindHit
=======
  Package : away3d.core.render
  Class : public class FindHit

  PUBLIC METHODS
        (FindHit)
        getMouseEvent(type:String):MouseEvent3D - Returns a 3d mouse event object populated with the properties from the hit point. (FindHit)

  CONSTRUCTOR DETAIL

    public function FindHit(view:View3D, primitives:Array, x:Number, y:Number) 
      Parameters
       view:View3D - The view to be used.
       primitives:Array - The primitives that have been rendered in the last frame.
       x:Number - The x coordinate of the point to test.
       y:Number - The y coordinate of the point to test.
  METHOD DETAIL

    public function getMouseEvent(type:String):MouseEvent3D 
      Returns a 3d mouse event object populated with the properties from the hit point.
      Parameters
       type:String
       Returns
       MouseEvent3D
  CODE EXAMPLES

    
      There are currently no examples for this class


FogFilter
=========
  Package : away3d.core.filter
  Class : public class FogFilter
  Implements : IPrimitiveFilter
  Description : 

  PUBLIC PROPERTIES
        material : IFogMaterial - Defines the material used by the fog layers. (FogFilter)

  PROTECTED PROPERTIES
        ini : Init - Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor. (FogFilter)

  PUBLIC METHODS
        (FogFilter)
        filter(primitives:Array, scene:Scene3D, camera:Camera3D, clip:Clipping):Array - Applies the filter to the primitive array. (FogFilter)
        toString():String - Used to trace the values of a filter. (FogFilter)

  PROPERTY DETAIL

    protected var ini:Init 
      Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor.

    material:IFogMaterial[read-write]
      Defines the material used by the fog layers.
      Implementation
       public function get material():IFogMaterial
       public function set material(value:IFogMaterial):void

  CONSTRUCTOR DETAIL

    public function FogFilter(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       material:Material
       minZ:Number (default = 1000, min:0)
       maxZ:Number (default = 5000, min:0)
       subdivisions:Int (default = 20, min:1, max:50)
       materials:Array
  METHOD DETAIL

    public function filter(primitives:Array, scene:Scene3D, camera:Camera3D, clip:Clipping):Array 
      Applies the filter to the primitive array.
      Parameters
       primitives:Array - The primitives to be filtered.
       scene:Scene3D - The scene to which the primitives belongs.
       camera:Camera3D - The camera being used in the renderer for the primitives.
       clip:Clipping - The clipping object used in the renderer for the primitive's view.
       Returns
       Array

    public function toString():String 
      Used to trace the values of a filter.
      Returns
      String - A string representation of the filter object.
  CODE EXAMPLES

    
      There are currently no examples for this class


Frame
=====
  Package : away3d.core.base
  Class : public class Frame
  Implements : IFrame
  Description : 

  PUBLIC PROPERTIES
        vertexpositions : Array - An array of vertex position objects. (Frame)

  PUBLIC METHODS
        (Frame)
        adjust(k:Number = 1):void - Adjusts the position of all vertex objects in the frame incrementally. (Frame)

  PROPERTY DETAIL

    public var vertexpositions:Array 
      An array of vertex position objects.
  CONSTRUCTOR DETAIL

    public function Frame() 
  METHOD DETAIL

    public function adjust(k:Number = 1):void 
      Adjusts the position of all vertex objects in the frame incrementally.
      Parameters
       k:Number (default = 1) - The fraction by which to adjust the vertex values.
  CODE EXAMPLES

    
      There are currently no examples for this class


GeodesicSphere
==============
  Package : away3d.primitives
  Class : public class GeodesicSphere
  Inheritance : AbstractPrimitive, Mesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
        fractures : Number - Defines the fractures of the sphere. (GeodesicSphere)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
        radius : Number - Defines the radius of the sphere. (GeodesicSphere)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractPrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (GeodesicSphere)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (GeodesicSphere)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    fractures:Number[read-write]
      Defines the fractures of the sphere. Defaults to 2.
      Implementation
       public function get fractures():Number
       public function set fractures(value:Number):void


    radius:Number[read-write]
      Defines the radius of the sphere. Defaults to 100.
      Implementation
       public function get radius():Number
       public function set radius(value:Number):void

  CONSTRUCTOR DETAIL

    public function GeodesicSphere(init:Object = null) 
      Constructor for a geodesic sphere object where all the faces are of a constant size unlike a regular sphere object where faces decrease in size as they approach the poles of the sphere.
      The init object parameters are : 'radius' defines the radius of the sphere and 'fractures' which defines the level of subdivision of the surface of the sphere.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
  METHOD DETAIL

    public override function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.
  CODE EXAMPLES

    
      There are currently no examples for this class


GridPlane
=========
  Package : away3d.primitives
  Class : public class GridPlane
  Inheritance : AbstractWirePrimitive, WireMesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) elements : Array - Returns an array of the elements contained in the wiremesh object. (WireMesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
        height : Number - Defines the height of the grid. (GridPlane)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ISegmentMaterial - Defines the material used to render the segments in the wiremesh object. (WireMesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractWirePrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) segments : Array - Returns an array of the segments contained in the wiremesh object. (WireMesh)
        segmentsH : Number - Defines the number of vertical segments that make up the grid. (GridPlane)
        segmentsW : Number - Defines the number of horizontal segments that make up the grid. (GridPlane)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
        width : Number - Defines the width of the grid. (GridPlane)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
        yUp : Boolean - Defines whether the coordinates of the grid points use a yUp orientation (true) or a zUp orientation (false). (GridPlane)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (GridPlane)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) addSegment(segment:Segment):void - Adds a segment object to the wiremesh object. (WireMesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (GridPlane)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (WireMesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) removeSegment(segment:Segment):void - Removes a segment object to the wiremesh object. (WireMesh)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    height:Number[read-write]
      Defines the height of the grid. Defaults to 100.
      Implementation
       public function get height():Number
       public function set height(value:Number):void


    segmentsH:Number[read-write]
      Defines the number of vertical segments that make up the grid. Defaults to 1.
      Implementation
       public function get segmentsH():Number
       public function set segmentsH(value:Number):void


    segmentsW:Number[read-write]
      Defines the number of horizontal segments that make up the grid. Defaults to 1.
      Implementation
       public function get segmentsW():Number
       public function set segmentsW(value:Number):void


    width:Number[read-write]
      Defines the width of the grid. Defaults to 100.
      Implementation
       public function get width():Number
       public function set width(value:Number):void


    yUp:Boolean[read-write]
      Defines whether the coordinates of the grid points use a yUp orientation (true) or a zUp orientation (false). Defaults to true.
      Implementation
       public function get yUp():Boolean
       public function set yUp(value:Boolean):void

  CONSTRUCTOR DETAIL

    public function GridPlane(init:Object = null) 
      Constructor for a grid object. The init object parameters are : 'width'/'height' defines the size of the grid, 'segments' defines the number of segments for width and height unless overriden, 'segmentsW' defines number segments the grid is split into horizontally and 'segmentsH' how many segments grid is split into vertically.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       width:Number (default = 100, min:0)
       height:Number (default = 100, min:0)
       segments:Int (default = 1, min:1)
       segmentsW:Int (default = segments, min:1)
       segmentsH:Int (default = segments, min:1)
       yUp:Boolean (default = true)
  METHOD DETAIL

    public override function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.
  CODE EXAMPLES

    
      There are currently no examples for this class


HoverCamera3D
=============
  Package : away3d.cameras
  Class : public class HoverCamera3D
  Inheritance : Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) aperture : Number (Camera3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (Object3D)
        distance : Number = 800 - Distance between the camera and the specified target. (HoverCamera3D)
    (^) dof : Boolean (Camera3D)
    (^) doflevels : Number = 16 (Camera3D)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) focus : Number - A divisor value for the perspective depth of the view. (Camera3D)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) maxblur : Number = 150 (Camera3D)
        maxtiltangle : Number = 90 (HoverCamera3D)
    (^) maxX : Number - Returns the maximum x value of the 3d object (Object3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (Object3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (Object3D)
        mintiltangle : Number = 0 (HoverCamera3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (Object3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (Object3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (Object3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
        panangle : Number = 0 - Rotation of the camera in degrees around the y axis. (HoverCamera3D)
    (^) parent : ObjectContainer3D (TargetCamera3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
        steps : Number = 8 (HoverCamera3D)
    (^) target : Object3D - The 3d object targeted by the camera. (TargetCamera3D)
        targetpanangle : Number = 0 (HoverCamera3D)
        targettiltangle : Number = 90 (HoverCamera3D)
        tiltangle : Number = 90 - Elevation angle of the camera in degrees. (HoverCamera3D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) view : Matrix3D - Returns the transformation matrix used to resolve the scene to the view. (TargetCamera3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
        yfactor : Number = 2 - Fractional difference in distance between the horizontal camera orientation and vertical camera orientation. (HoverCamera3D)
    (^) z : Number (Object3D)
    (^) zoom : Number - Provides an overall scale value to the view (Camera3D)

  PROTECTED PROPERTIES
        (HoverCamera3D)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) clone(object:* = null):* (Camera3D)
    (^) disableDof():void (Camera3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) enableDof():void (Camera3D)
        hover():Boolean (HoverCamera3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pan(angle:Number):void - Rotates the camera in its horizontal plane. (Camera3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Object3D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (Object3D)
    (^) screen(object:Object3D, vertex:Vertex = null):ScreenVertex (Camera3D)
    (^) tick(time:int):void (Object3D)
    (^) tilt(angle:Number):void - Rotates the camera in its vertical plane. (Camera3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
        update():Boolean - Updates the camera position. (HoverCamera3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PROPERTY DETAIL

    public var distance:Number = 800 
      Distance between the camera and the specified target. Defaults to 800.

    public var maxtiltangle:Number = 90 
      Maximum bounds for the tiltangle. Defaults to 90.
      See also
      tiltangle


    public var mintiltangle:Number = 0 
      Minimum bounds for the tiltangle. Defaults to 0.
      See also
      tiltangle


    public var panangle:Number = 0 
      Rotation of the camera in degrees around the y axis. Defaults to 0.

    public var steps:Number = 8 
      Fractional step taken each time the hover() method is called. Defaults to 8. Affects the speed at which the tiltangle and panangle resolve to their targets.
      See also
      tiltangle
      panangle


    public var targetpanangle:Number = 0 
      Target value for the panangle. Defaults to 0.
      See also
      panangle


    public var targettiltangle:Number = 90 
      Target value for the tiltangle. Defaults to 90.
      See also
      tiltangle


    public var tiltangle:Number = 90 
      Elevation angle of the camera in degrees. Defaults to 90.

    public var yfactor:Number = 2 
      Fractional difference in distance between the horizontal camera orientation and vertical camera orientation. Defaults to 2.
      See also
      distance

  CONSTRUCTOR DETAIL

    public function HoverCamera3D(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       yfactor:Number (default = yfactor)
       distance:Number (default = distance)
       panangle:Number (default = panangle)
       tiltangle:Number (default = tiltangle)
       targetpanangle:Number (default = targetpanangle)
       targettiltangle:Number (default = targettiltangle)
       mintiltangle:Number (default = mintiltangle)
       maxtiltangle:Number (default = maxtiltangle)
       steps:Number (default = steps)
  METHOD DETAIL

    public function hover():Boolean 
      Updates the tiltangle and panangle values, then calls update(). Values are calculated using the defined targettiltangle, targetpanangle and steps variables.
      Returns
      Boolean - True if the camera position was updated, otherwise false.
      See also
      tiltangle
      panangle
      targettiltangle
      targetpanangle
      steps
      update()


    public function update():Boolean 
      Updates the camera position. Position is calculated using the current values of tiltangle, panangle, distance and yfactor.
      Returns
      Boolean - True if the camera position was updated, otherwise false.
      See also
      tiltangle
      panangle
      distance
      yfactor

  CODE EXAMPLES

    
      HoverCamera3d Example
      //Replace the code below into the first frame of
      //the lesson Lesson_Basic_03_Meshes.fla
      // import core library
      import away3d.core.scene.*;
      // import file format loaders
      import away3d.loaders.*;
      //import math objects
      import away3d.core.math.*;
      //
      import away3d.cameras.*;
      // create a 3D-viewport
      var camera = new HoverCamera3D({zoom:3, focus:200, distance:1000});
      // create a 3D-viewport
      camera.tiltangle = 40;
      camera.targettiltangle = 40;
      camera.mintiltangle =  20;
      camera.maxtiltangle = 50;
      camera.yfactor = 1;
      camera.steps = 7;
      var view:View3D = new View3D({camera:camera, x:300, y:200});
      // add viewport to the stage
      addChild(view);
      // start mesh loading
      var loader:Object3DLoader = Obj.load("resources/turtle.obj",
      {material:"turtle_texture", name:"turtle", scaling:0.1, y:50, x:10, z:
      10, loadersize:300});
      // add the loader object to the scene
      view.scene.addChild(loader);
      //
      camera.update();
      loader.rotationX = -90;
      //
      var rotCamera:Boolean = false;
      var lastMouseX:Number = mouseX;
      var lastMouseY:Number = mouseY;
      var firstClick:Boolean = true;
      //
      addEventListener(Event.ENTER_FRAME, onEnterFrame);
      function onEnterFrame(event:Event):void {
      //
      if (rotCamera) {
      if (firstClick == true) {
      firstClick = false;
      lastMouseX = view.mouseX;
      lastMouseY = view.mouseY;
      trace("frist click");
      }
      //
      var dragX = (view.mouseX - lastMouseX);
      var dragY = (view.mouseY - lastMouseY);
      //
      lastMouseX = view.mouseX;
      lastMouseY = view.mouseY;
      //
      camera.targetpanangle += dragX;
      camera.targettiltangle += dragY
      camera.hover();
      } else {
      //
      }
      // rerender viewport on each frame
      view.render();
      }
      var hit:MovieClip = new MovieClip();
      hit.graphics.beginFill(0xFF0000);
      hit.graphics.drawRect(0, 0, 500, 600);
      hit.graphics.endFill();
      addChild(hit);
      hit.alpha = 0;
      hit.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
      function mouseDownHandler(evt:MouseEvent):void {
      rotCamera = true;
      }
      hit.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
      function mouseUpHandler(evt:MouseEvent):void {
      rotCamera = false;
      firstClick = true;
      }
      hit.addEventListener(MouseEvent.MOUSE_WHEEL, onMouseEvent);
      function onMouseEvent(event:MouseEvent):void {
      trace(camera.zoom);
      var dir = (event.delta &gt; 0) ? .5 : -.5;
      camera.zoom = Math.max(2, Math.min(8, (camera.zoom+dir)));
      //camera.distanceTo(-40);
      }

IAnimation
==========
  Package : away3d.core.base
  Interface : public interface IAnimation
  Implementors : Animation
  Description : Interface for objects that can animate the vertex values in a mesh

  PUBLIC METHODS
        update(mesh:BaseMesh):void - Updates the positions of vertex objects in the mesh to the current frame values (IAnimation)

  METHOD DETAIL

    public function update(mesh:BaseMesh):void 
      Updates the positions of vertex objects in the mesh to the current frame values
      Parameters
       mesh:BaseMesh - The mesh on which the animation object acts
       See also
       away3d.core.base.Frame

  CODE EXAMPLES

    
      There are currently no examples for this class


IBlockerConsumer
================
  Package : away3d.core.block
  Interface : public interface IBlockerConsumer
  Implementors : BlockerArray
  Description : 

  PUBLIC METHODS
        blocker(block:Blocker):void - Adds blocker primitive to the consumer. (IBlockerConsumer)

  METHOD DETAIL

    public function blocker(block:Blocker):void 
      Adds blocker primitive to the consumer.
      Parameters
       block:Blocker - The blocker primitive to add.
  CODE EXAMPLES

    
      There are currently no examples for this class


IBlockerProvider
================
  Package : away3d.core.block
  Interface : public interface IBlockerProvider
  Implementors : ConvexBlock
  Description : 

  PUBLIC METHODS
        blockers(consumer:IBlockerConsumer):void (IBlockerProvider)

  METHOD DETAIL

    public function blockers(consumer:IBlockerConsumer):void 
      Called from the BlockerTraverser when passing Blocker objects to the blocker consumer object
      Parameters
       consumer:IBlockerConsumer - The consumer instance
       See also
       away3d.core.traverse.BlockerTraverser
       away3d.core.block.Blocker

  CODE EXAMPLES

    
      There are currently no examples for this class


IClonable
=========
  Package : away3d.core.utils
  Interface : public interface IClonable
  Implementors : AmbientLight3D, DirectionalLight3D, Object3D, PointLight3D
  Description : Interface for object that can be cloned

  PUBLIC METHODS
        clone(object:* = null):* -  (IClonable)

  METHOD DETAIL

    public function clone(object:* = null):* 
      Parameters
       object:* (default = null)
       Returns
       *
  CODE EXAMPLES

    
      There are currently no examples for this class


IFogMaterial
============
  Package : away3d.materials
  Interface : ITriangleMaterial, IMaterial
  Implementors : ColorMaterial
  Description : Interface for fog filter materials

  PUBLIC PROPERTIES
        alpha : Number - Determines the alpha value of the material (IFogMaterial)
    (^) visible : Boolean - Indicates whether the material is visible (IMaterial)

  PUBLIC METHODS
        clone():IFogMaterial (IFogMaterial)
        renderFog(fog:DrawFog):void - Sends the material data coupled with data from the DrawFog primitive to the render session (IFogMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (ITriangleMaterial)

  PROPERTY DETAIL

    alpha:Number[read-write]
      Determines the alpha value of the material
      Implementation
       public function get alpha():Number
       public function set alpha(value:Number):void

  METHOD DETAIL

    public function clone():IFogMaterial 
      Duplicates the material's properties to another IFogMaterial object
      Returns
      IFogMaterial - The new object instance with duplicated properties applied

    public function renderFog(fog:DrawFog):void 
      Sends the material data coupled with data from the DrawFog primitive to the render session
      Parameters
       fog:DrawFog
  CODE EXAMPLES

    
      There are currently no examples for this class


IFrame
======
  Package : away3d.core.base
  Interface : public interface IFrame
  Implementors : Frame
  Description : Interface for objects that store the vertex values for a single frame of animation

  PUBLIC METHODS
        adjust(k:Number = 1):void - Adjusts the position of all vertex objects in the frame incrementally. (IFrame)

  METHOD DETAIL

    public function adjust(k:Number = 1):void 
      Adjusts the position of all vertex objects in the frame incrementally.
      Parameters
       k:Number (default = 1) - The fraction by which to adjust the vertex values.
  CODE EXAMPLES

    
      There are currently no examples for this class


ILayerMaterial
==============
  Package : away3d.materials
  Interface : IMaterial
  Implementors : BitmapMaterial, BitmapMaterialContainer, CompositeMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) visible : Boolean - Indicates whether the material is visible (IMaterial)

  PUBLIC METHODS
        renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (ILayerMaterial)
        renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (ILayerMaterial)

  METHOD DETAIL

    public function renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO 
      Renders a bitmapData surface object for the speficied face.
      Parameters
       face:Face - The face object onto which the rendered sufrace is applied.
       containerRect:Rectangle - The rectangle object defining the bounds of the face in uv-space.
       parentFaceVO:FaceVO - The value object of the preceeding surface.
       Returns
       FaceVO
       See also
       away3d.materials.BitmapMaterailContainer


    public function renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void 
      Renders a material layer for the specified triangle.
      Parameters
       tri:DrawTriangle - The drawtriangle used for render information.
       layer:Sprite - The parent layer into which the triangle is drawn.
       level:int - Defines the sprite level for the layer.
  CODE EXAMPLES

    
      There are currently no examples for this class


ILightConsumer
==============
  Package : away3d.core.light
  Interface : public interface ILightConsumer
  Implementors : LightArray
  Description : Interface for containers capable of storing lighting info

  PUBLIC METHODS
        ambientLight(ambient:AmbientLight):void - Adds an ambient light primitive to the light consumer. (ILightConsumer)
        directionalLight(directional:DirectionalLight):void - Adds an directional light primitive to the light consumer. (ILightConsumer)
        pointLight(point:PointLight):void - Adds an point light primitive to the light consumer. (ILightConsumer)

  METHOD DETAIL

    public function ambientLight(ambient:AmbientLight):void 
      Adds an ambient light primitive to the light consumer.
      Parameters
       ambient:AmbientLight - The light primitive to add.

    public function directionalLight(directional:DirectionalLight):void 
      Adds an directional light primitive to the light consumer.
      Parameters
       directional:DirectionalLight - The light primitive to add.

    public function pointLight(point:PointLight):void 
      Adds an point light primitive to the light consumer.
      Parameters
       point:PointLight - The light primitive to add.
  CODE EXAMPLES

    
      There are currently no examples for this class


ILightProvider
==============
  Package : away3d.core.light
  Interface : public interface ILightProvider
  Implementors : AmbientLight3D, DirectionalLight3D, PointLight3D
  Description : Interface for objects that provide lighting to the scene

  PUBLIC METHODS
        light(consumer:ILightConsumer):void (ILightProvider)

  METHOD DETAIL

    public function light(consumer:ILightConsumer):void 
      Called from the PrimitiveTraverser when passing LightPrimitive objects to the light consumer object
      Parameters
       consumer:ILightConsumer - The consumer instance.
       See also
       ../traverse/PrimitiveTraverser.html
       ../light/LightPrimitive.html
       ../light/ILightConsumer.html

  CODE EXAMPLES

    
      There are currently no examples for this class


ILODObject
==========
  Package : away3d.containers
  Interface : public interface ILODObject
  Implementors : LODObject
  Description : Interface for objects that can toggle their visibily depending on view and distance to camera

  PUBLIC METHODS
        matchLOD(view:View3D):Boolean (ILODObject)

  METHOD DETAIL

    public function matchLOD(view:View3D):Boolean 
      Used in ProjectionTraverser to determine whether the 3d object is visible.
      Parameters
       view:View3D - The view being used to calulate the perspective.
       Returns
       Boolean - Defines whether the LOD object is visible.
       See also
       away3d.core.traverse.ProjectionTraverser
       away3d.containers.LODObject.maxp
       away3d.containers.LODObject.minp

  CODE EXAMPLES

    
      There are currently no examples for this class


IMaterial
=========
  Package : away3d.materials
  Interface : public interface IMaterial
  Subinterfaces : ILayerMaterial, ISegmentMaterial, ITriangleMaterial, IUVMaterial
  Description : Interface for all objects that can serve as a material

  PUBLIC PROPERTIES
        visible : Boolean - [read-only] Indicates whether the material is visible (IMaterial)

  PROPERTY DETAIL

    visible:Boolean[read-only]
      Indicates whether the material is visible
      Implementation
       public function get visible():Boolean

  CODE EXAMPLES

    
      There are currently no examples for this class


IMeshElement
============
  Package : away3d.core.base
  Interface : public interface IMeshElement
  Implementors : BaseMeshElement
  Description : d element of a mesh

  PUBLIC PROPERTIES
        maxX : Number - [read-only] Returns the maximum x value of the 3d element (IMeshElement)
        maxY : Number - [read-only] Returns the minimum y value of the 3d element (IMeshElement)
        maxZ : Number - [read-only] Returns the minimum z value of the 3d element (IMeshElement)
        minX : Number - [read-only] Returns the minimum x value of the 3d element (IMeshElement)
        minY : Number - [read-only] Returns the maximum y value of the 3d element (IMeshElement)
        minZ : Number - [read-only] Returns the maximum z value of the 3d element (IMeshElement)
        radius2 : Number - [read-only] Returns the squared bounding radius of the 3d element (IMeshElement)
        vertices : Array - [read-only] (IMeshElement)
        visible : Boolean - Defines whether the 3d element is visible in the scene. (IMeshElement)

  PUBLIC METHODS
        addOnVertexChange(listener:Function):void - Default method for adding a vertexchanged event listener (IMeshElement)
        addOnVertexValueChange(listener:Function):void - Default method for adding a vertexvaluechanged event listener (IMeshElement)
        addOnVisibleChange(listener:Function):void - Default method for adding a visiblechanged event listener (IMeshElement)
        removeOnVertexChange(listener:Function):void - Default method for removing a vertexchanged event listener (IMeshElement)
        removeOnVertexValueChange(listener:Function):void - Default method for removing a vertexvaluechanged event listener (IMeshElement)
        removeOnVisibleChange(listener:Function):void - Default method for removing a visiblechanged event listener (IMeshElement)

  PROPERTY DETAIL

    maxX:Number[read-only]
      Returns the maximum x value of the 3d element
      Implementation
       public function get maxX():Number


    maxY:Number[read-only]
      Returns the minimum y value of the 3d element
      Implementation
       public function get maxY():Number


    maxZ:Number[read-only]
      Returns the minimum z value of the 3d element
      Implementation
       public function get maxZ():Number


    minX:Number[read-only]
      Returns the minimum x value of the 3d element
      Implementation
       public function get minX():Number


    minY:Number[read-only]
      Returns the maximum y value of the 3d element
      Implementation
       public function get minY():Number


    minZ:Number[read-only]
      Returns the maximum z value of the 3d element
      Implementation
       public function get minZ():Number


    radius2:Number[read-only]
      Returns the squared bounding radius of the 3d element
      Implementation
       public function get radius2():Number


    vertices:Array[read-only]
      Implementation
       public function get vertices():Array


    visible:Boolean[read-write]
      Defines whether the 3d element is visible in the scene.
      Implementation
       public function get visible():Boolean
       public function set visible(value:Boolean):void

  METHOD DETAIL

    public function addOnVertexChange(listener:Function):void 
      Default method for adding a vertexchanged event listener
      Parameters
       listener:Function - The listener function

    public function addOnVertexValueChange(listener:Function):void 
      Default method for adding a vertexvaluechanged event listener
      Parameters
       listener:Function - The listener function

    public function addOnVisibleChange(listener:Function):void 
      Default method for adding a visiblechanged event listener
      Parameters
       listener:Function - The listener function

    public function removeOnVertexChange(listener:Function):void 
      Default method for removing a vertexchanged event listener
      Parameters
       listener:Function - The listener function

    public function removeOnVertexValueChange(listener:Function):void 
      Default method for removing a vertexvaluechanged event listener
      Parameters
       listener:Function - The listener function

    public function removeOnVisibleChange(listener:Function):void 
      Default method for removing a visiblechanged event listener
      Parameters
       listener:Function - The listener function
  CODE EXAMPLES

    
      There are currently no examples for this class


Init
====
  Package : away3d.core.utils
  Class : public class Init

  PUBLIC METHODS
        -  (Init)
        getArray(name:String):Array -  (Init)
        getBitmap(name:String):BitmapData -  (Init)
        getBoolean(name:String, def:Boolean):Boolean -  (Init)
        getColor(name:String, def:uint):uint -  (Init)
        getCubeMaterials(name:String):CubeMaterialsData -  (Init)
        getInit(name:String):Init -  (Init)
        getInt(name:String, def:int, bounds:Object = null):int -  (Init)
        getMaterial(name:String):ITriangleMaterial -  (Init)
        getNumber(name:String, def:Number, bounds:Object = null):Number -  (Init)
        getNumber3D(name:String):Number3D -  (Init)
        getObject(name:String, type:Class = null):Object -  (Init)
        getObject3D(name:String):Object3D -  (Init)
        getObjectOrInit(name:String, type:Class = null):Object -  (Init)
        getPosition(name:String):Number3D -  (Init)
        getSegmentMaterial(name:String):ISegmentMaterial -  (Init)
        getString(name:String, def:String):String -  (Init)
        parse(init:Object):Init - [static] (Init)

  CONSTRUCTOR DETAIL

    public function Init(init:Object) 
      Parameters
       init:Object
  METHOD DETAIL

    arcane function addForCheck():void 

    arcane static function checkUnusedArguments():void 

    public function getArray(name:String):Array 
      Parameters
       name:String
       Returns
       Array

    public function getBitmap(name:String):BitmapData 
      Parameters
       name:String
       Returns
       BitmapData

    public function getBoolean(name:String, def:Boolean):Boolean 
      Parameters
       name:String
       def:Boolean
       Returns
       Boolean

    public function getColor(name:String, def:uint):uint 
      Parameters
       name:String
       def:uint
       Returns
       uint

    public function getCubeMaterials(name:String):CubeMaterialsData 
      Parameters
       name:String
       Returns
       CubeMaterialsData

    public function getInit(name:String):Init 
      Parameters
       name:String
       Returns
       Init

    public function getInt(name:String, def:int, bounds:Object = null):int 
      Parameters
       name:String
       def:int
       bounds:Object (default = null)
       Returns
       int

    public function getMaterial(name:String):ITriangleMaterial 
      Parameters
       name:String
       Returns
       ITriangleMaterial

    public function getNumber(name:String, def:Number, bounds:Object = null):Number 
      Parameters
       name:String
       def:Number
       bounds:Object (default = null)
       Returns
       Number

    public function getNumber3D(name:String):Number3D 
      Parameters
       name:String
       Returns
       Number3D

    public function getObject(name:String, type:Class = null):Object 
      Parameters
       name:String
       type:Class (default = null)
       Returns
       Object

    public function getObject3D(name:String):Object3D 
      Parameters
       name:String
       Returns
       Object3D

    public function getObjectOrInit(name:String, type:Class = null):Object 
      Parameters
       name:String
       type:Class (default = null)
       Returns
       Object

    public function getPosition(name:String):Number3D 
      Parameters
       name:String
       Returns
       Number3D

    public function getSegmentMaterial(name:String):ISegmentMaterial 
      Parameters
       name:String
       Returns
       ISegmentMaterial

    public function getString(name:String, def:String):String 
      Parameters
       name:String
       def:String
       Returns
       String

    public static function parse(init:Object):Init 
      Parameters
       init:Object
       Returns
       Init

    arcane function removeFromCheck():void 
  CODE EXAMPLES

    
      There are currently no examples for this class


IPhysicsScene
=============
  Package : away3d.containers
  Interface : public interface IPhysicsScene

  PUBLIC METHODS
        updateTime(time:int):void -  (IPhysicsScene)

  METHOD DETAIL

    public function updateTime(time:int):void 
      Parameters
       time:int
  CODE EXAMPLES

    
      There are currently no examples for this class


IPrimitiveConsumer
==================
  Package : away3d.core.draw
  Interface : public interface IPrimitiveConsumer
  Implementors : DrawGroup, PrimitiveArray, PrimitiveQuadrantTree, PrimitiveVolumeBlock
  Description : Interface for containers capable of drawing primitives

  PUBLIC METHODS
        primitive(pri:DrawPrimitive):void - Adds a drawing primitive to the primitive consumer (IPrimitiveConsumer)

  METHOD DETAIL

    public function primitive(pri:DrawPrimitive):void 
      Adds a drawing primitive to the primitive consumer
      Parameters
       pri:DrawPrimitive - The drawing primitive to add.
  CODE EXAMPLES

    
      There are currently no examples for this class


IPrimitiveFilter
================
  Package : away3d.core.filter
  Interface : public interface IPrimitiveFilter
  Implementors : FogFilter, ZDepthFilter, ZSortFilter
  Description : Interface for filters that work on primitive arrays

  PUBLIC METHODS
        filter(primitives:Array, scene:Scene3D, camera:Camera3D, clip:Clipping):Array - Applies the filter to the primitive array. (IPrimitiveFilter)

  METHOD DETAIL

    public function filter(primitives:Array, scene:Scene3D, camera:Camera3D, clip:Clipping):Array 
      Applies the filter to the primitive array.
      Parameters
       primitives:Array - The primitives to be filtered.
       scene:Scene3D - The scene to which the primitives belongs.
       camera:Camera3D - The camera being used in the renderer for the primitives.
       clip:Clipping - The clipping object used in the renderer for the primitive's view.
       Returns
       Array
  CODE EXAMPLES

    
      There are currently no examples for this class


IPrimitiveProvider
==================
  Package : away3d.core.draw
  Interface : public interface IPrimitiveProvider
  Implementors : AmbientLight3D, ConvexBlock, DebugObjectContainer3D, DirectionalLight3D, DirSprite2D, DofSprite2D, Mesh, MovieClipSprite, ObjectContainer3D, PointLight3D, Sprite2D, WireMesh
  Description : Interface for objects that provide drawing primitives to the rendering process

  PUBLIC METHODS
        primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (IPrimitiveProvider)

  METHOD DETAIL

    public function primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void 
      Called from the PrimitiveTraverser when passing DrawPrimitive objects to the primitive consumer object
      Parameters
       consumer:IPrimitiveConsumer - The consumer instance
       session:AbstractRenderSession - The render session of the 3d object
       See also
       away3d.core.traverse.PrimitiveTraverser
       away3d.core.draw.DrawPrimitive

  CODE EXAMPLES

    
      There are currently no examples for this class


IPrimitiveQuadrantFilter
========================
  Package : away3d.core.filter
  Interface : public interface IPrimitiveQuadrantFilter
  Implementors : AnotherRivalFilter, QuadrantRiddleFilter
  Description : Interface for filters that work on primitive quadrant trees

  PUBLIC METHODS
        filter(pritree:PrimitiveQuadrantTree, scene:Scene3D, camera:Camera3D, clip:Clipping):void - Applies the filter to the quadrant tree. (IPrimitiveQuadrantFilter)

  METHOD DETAIL

    public function filter(pritree:PrimitiveQuadrantTree, scene:Scene3D, camera:Camera3D, clip:Clipping):void 
      Applies the filter to the quadrant tree.
      Parameters
       pritree:PrimitiveQuadrantTree - The quadrant tree to be filtered.
       scene:Scene3D - The scene to which the quadrant tree belongs.
       camera:Camera3D - The camera being used in the renderer for the quadrant tree
       clip:Clipping - The clipping object used in the renderer for the quadrant tree's view.
  CODE EXAMPLES

    
      There are currently no examples for this class


IPrimitiveVolumeBlockFilter
===========================
  Package : away3d.core.filter
  Interface : public interface IPrimitiveVolumeBlockFilter

  PUBLIC METHODS
        filter(blocklist:PrimitiveVolumeBlock, scene:Scene3D, camera:Camera3D, clip:Clipping):void - Applies the filter to the volume block. (IPrimitiveVolumeBlockFilter)

  METHOD DETAIL

    public function filter(blocklist:PrimitiveVolumeBlock, scene:Scene3D, camera:Camera3D, clip:Clipping):void 
      Applies the filter to the volume block.
      Parameters
       blocklist:PrimitiveVolumeBlock - The volume block tree to be filtered.
       scene:Scene3D - The scene to which the volume block tree belongs.
       camera:Camera3D - The camera being used in the renderer for the volume block tree
       clip:Clipping - The clipping object used in the renderer for the volume block tree's view.
  CODE EXAMPLES

    
      There are currently no examples for this class


IRenderer
=========
  Package : away3d.core.render
  Interface : public interface IRenderer
  Implementors : BasicRenderer, QuadrantRenderer
  Description : Interface for renderers capable of rendering a scene to a view

  PUBLIC PROPERTIES
        session : AbstractRenderSession - Defines the render session object used by the renderer. (IRenderer)

  PUBLIC METHODS
        render(view:View3D):Array - Executes the render pipe that resolves the 3d scene into the view. (IRenderer)
        toString():String - Used to trace the values of a renderer. (IRenderer)

  PROPERTY DETAIL

    session:AbstractRenderSession[read-write]
      Defines the render session object used by the renderer.
      Implementation
       public function get session():AbstractRenderSession
       public function set session(value:AbstractRenderSession):void

  METHOD DETAIL

    public function render(view:View3D):Array 
      Executes the render pipe that resolves the 3d scene into the view.
      Parameters
       view:View3D
       Returns
       Array

    public function toString():String 
      Used to trace the values of a renderer.
      Returns
      String - A string representation of the renderer object.
  CODE EXAMPLES

    
      There are currently no examples for this class


ISegmentMaterial
================
  Package : away3d.materials
  Interface : IMaterial
  Implementors : WireframeMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) visible : Boolean - Indicates whether the material is visible (IMaterial)

  PUBLIC METHODS
        renderSegment(seg:DrawSegment):void (ISegmentMaterial)

  METHOD DETAIL

    public function renderSegment(seg:DrawSegment):void 
      Sends data from the material coupled with data from the DrawSegment primitive to the render session.
      Parameters
       seg:DrawSegment
  CODE EXAMPLES

    
      There are currently no examples for this class


ITriangleMaterial
=================
  Package : away3d.materials
  Interface : IMaterial
  Subinterfaces : IFogMaterial
  Implementors : AnimatedBitmapMaterial, BitmapFileMaterial, BitmapMaterial, BitmapMaterialContainer, CenterLightingMaterial, ColorMaterial, CompositeMaterial, EnviroColorMaterial, MovieMaterial, TransformBitmapMaterial, WireColorMaterial, WireframeMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) visible : Boolean - Indicates whether the material is visible (IMaterial)

  PUBLIC METHODS
        renderTriangle(tri:DrawTriangle):void (ITriangleMaterial)

  METHOD DETAIL

    public function renderTriangle(tri:DrawTriangle):void 
      Sends data from the material coupled with data from the DrawTriangle primitive to the render session.
      Parameters
       tri:DrawTriangle
  CODE EXAMPLES

    
      There are currently no examples for this class


IUpdatingMaterial
=================
  Package : away3d.materials
  Interface : public interface IUpdatingMaterial
  Implementors : BitmapMaterial, BitmapMaterialContainer, CenterLightingMaterial, CompositeMaterial
  Description : Interface for materials that require updating every render loop

  PUBLIC METHODS
        updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (IUpdatingMaterial)

  METHOD DETAIL

    public function updateMaterial(source:Object3D, view:View3D):void 
      Called once per render loop when material is visible.
      Parameters
       source:Object3D
       view:View3D
  CODE EXAMPLES

    
      There are currently no examples for this class


IUVMaterial
===========
  Package : away3d.materials
  Interface : IMaterial
  Implementors : AnimatedBitmapMaterial, BitmapFileMaterial, BitmapMaterial, MovieMaterial, TransformBitmapMaterial, WhiteShadingBitmapMaterial
  Description : Interface for materials that use uv texture coordinates

  PUBLIC PROPERTIES
        bitmap : BitmapData - [read-only] Returns the bitmapData object being used as the material texture. (IUVMaterial)
        height : Number - [read-only] Returns the height of the bitmapData being used as the material texture. (IUVMaterial)
    (^) visible : Boolean - Indicates whether the material is visible (IMaterial)
        width : Number - [read-only] Returns the width of the bitmapData being used as the material texture. (IUVMaterial)

  PUBLIC METHODS
        addOnResize(listener:Function):void - Default method for adding a materialresize event listener (IUVMaterial)
        getPixel32(u:Number, v:Number):uint - Returns the argb value of the bitmapData pixel at the given u v coordinate. (IUVMaterial)
        removeOnResize(listener:Function):void - Default method for removing a materialresize event listener (IUVMaterial)

  PROPERTY DETAIL

    bitmap:BitmapData[read-only]
      Returns the bitmapData object being used as the material texture.
      Implementation
       public function get bitmap():BitmapData


    height:Number[read-only]
      Returns the height of the bitmapData being used as the material texture.
      Implementation
       public function get height():Number


    width:Number[read-only]
      Returns the width of the bitmapData being used as the material texture.
      Implementation
       public function get width():Number

  METHOD DETAIL

    public function addOnResize(listener:Function):void 
      Default method for adding a materialresize event listener
      Parameters
       listener:Function - The listener function

    public function getPixel32(u:Number, v:Number):uint 
      Returns the argb value of the bitmapData pixel at the given u v coordinate.
      Parameters
       u:Number - The u (horizontal) texture coordinate.
       v:Number - The v (verical) texture coordinate.
       Returns
       uint - The argb pixel value.

    public function removeOnResize(listener:Function):void 
      Default method for removing a materialresize event listener
      Parameters
       listener:Function - The listener function
  CODE EXAMPLES

    
      There are currently no examples for this class


Kmz
===
  Package : away3d.loaders
  Class : public class Kmz

  PUBLIC PROPERTIES
        container : ObjectContainer3D - 3d container object used for storing the parsed kmz scene. (Kmz)
        containerData : ContainerData - Container data object used for storing the parsed kmz data structure. (Kmz)
        materialLibrary : MaterialLibrary - Reference container for all materials used in the kmz scene. (Kmz)

  PUBLIC METHODS
        (Kmz)
        load(url:String, init:Object = null):Object3DLoader - [static] Loads and parses a kmz file into a 3d container object. (Kmz)
        parse(data:*, init:Object = null, loader:Object3DLoader = null):ObjectContainer3D - [static] Creates a 3d container object from the raw binary data of a kmz file. (Kmz)

  PROPERTY DETAIL

    public var container:ObjectContainer3D 
      3d container object used for storing the parsed kmz scene.

    public var containerData:ContainerData 
      Container data object used for storing the parsed kmz data structure.

    public var materialLibrary:MaterialLibrary 
      Reference container for all materials used in the kmz scene.
  CONSTRUCTOR DETAIL

    public function Kmz(datastream:ByteArray, init:Object = null) 
      Parameters
       datastream:ByteArray - The binary zip data of a loaded file.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       See also
       away3d.loaders.Kmz.parse()
       away3d.loaders.Kmz.load()

  METHOD DETAIL

    public static function load(url:String, init:Object = null):Object3DLoader 
      Loads and parses a kmz file into a 3d container object.
      Parameters
       url:String - The url location of the file to load.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Returns
       Object3DLoader - A 3d loader object that can be used as a placeholder in a scene while the file is loading.

    public static function parse(data:*, init:Object = null, loader:Object3DLoader = null):ObjectContainer3D 
      Creates a 3d container object from the raw binary data of a kmz file.
      Parameters
       data:* - The birnay zip data of a loaded file.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       loader:Object3DLoader (default = null) - [optional] Not intended for direct use.
       Returns
       ObjectContainer3D - A 3d container object representation of the kmz file.
  CODE EXAMPLES

    
      There are currently no examples for this class


Lathe
=====
  Package : away3d.extrusions
  Class : public class Lathe
  Inheritance : Mesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        -  (Lathe)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  CONSTRUCTOR DETAIL

    public function Lathe(aPoints:Array, init:Object = null) 
      Class generates a Mesh from Number3D in a circular fashion
      Parameters
       aPoints:Array
       init:Object (default = null)
  CODE EXAMPLES

    
      There are currently no examples for this class


LightArray
==========
  Package : away3d.core.light
  Class : public class LightArray
  Implements : ILightConsumer
  Description : 

  PUBLIC PROPERTIES
        ambients : Array - The ambient light primitives stored in the consumer. (LightArray)
        directionals : Array - The directional light primitives stored in the consumer. (LightArray)
        numLights : int - The total number of light primitives stored in the consumer. (LightArray)
        points : Array - The point light primitives stored in the consumer. (LightArray)

  PUBLIC METHODS
        ambientLight(ambient:AmbientLight):void - Adds an ambient light primitive to the light consumer. (LightArray)
        clear():void - Clears all light primitives from the consumer. (LightArray)
        directionalLight(directional:DirectionalLight):void - Adds an directional light primitive to the light consumer. (LightArray)
        pointLight(point:PointLight):void - Adds an point light primitive to the light consumer. (LightArray)

  PROPERTY DETAIL

    public var ambients:Array 
      The ambient light primitives stored in the consumer.

    public var directionals:Array 
      The directional light primitives stored in the consumer.

    public var numLights:int 
      The total number of light primitives stored in the consumer.

    public var points:Array 
      The point light primitives stored in the consumer.
  METHOD DETAIL

    public function ambientLight(ambient:AmbientLight):void 
      Adds an ambient light primitive to the light consumer.
      Parameters
       ambient:AmbientLight - The light primitive to add.

    public function clear():void 
      Clears all light primitives from the consumer.

    public function directionalLight(directional:DirectionalLight):void 
      Adds an directional light primitive to the light consumer.
      Parameters
       directional:DirectionalLight - The light primitive to add.

    public function pointLight(point:PointLight):void 
      Adds an point light primitive to the light consumer.
      Parameters
       point:PointLight - The light primitive to add.
  CODE EXAMPLES

    
      There are currently no examples for this class


LightPrimitive
==============
  Package : away3d.core.light
  Class : public class LightPrimitive
  Subclasses : AmbientLight, DirectionalLight, PointLight
  Description : 

  PUBLIC PROPERTIES
        ambient : Number - Coefficient for the ambient light intensity. (LightPrimitive)
        ambientBitmap : BitmapData - Lightmap for ambient intensity. (LightPrimitive)
        ambientDiffuseBitmap : BitmapData - Combined lightmap for ambient and diffuse intensities. (LightPrimitive)
        blue : Number - Blue component level. (LightPrimitive)
        diffuse : Number - Coefficient for the diffuse light intensity. (LightPrimitive)
        diffuseBitmap : BitmapData - Lightmap for diffuse intensity. (LightPrimitive)
        green : Number - Green component level. (LightPrimitive)
        red : Number - Red component level. (LightPrimitive)
        specular : Number - Coefficient for the specular light intensity. (LightPrimitive)
        specularBitmap : BitmapData - Lightmap for specular intensity. (LightPrimitive)

  PROPERTY DETAIL

    public var ambient:Number 
      Coefficient for the ambient light intensity.

    public var ambientBitmap:BitmapData 
      Lightmap for ambient intensity.

    public var ambientDiffuseBitmap:BitmapData 
      Combined lightmap for ambient and diffuse intensities.

    public var blue:Number 
      Blue component level.

    public var diffuse:Number 
      Coefficient for the diffuse light intensity.

    public var diffuseBitmap:BitmapData 
      Lightmap for diffuse intensity.

    public var green:Number 
      Green component level.

    public var red:Number 
      Red component level.

    public var specular:Number 
      Coefficient for the specular light intensity.

    public var specularBitmap:BitmapData 
      Lightmap for specular intensity.
  CODE EXAMPLES

    
      There are currently no examples for this class


Line2D
======
  Package : away3d.core.draw
  Class : public class Line2D

  PUBLIC PROPERTIES
        a : Number -  (Line2D)
        b : Number -  (Line2D)
        c : Number -  (Line2D)

  PUBLIC METHODS
        -  (Line2D)
        cross(u:Line2D, v:Line2D):ScreenVertex - [static] (Line2D)
        distance(v:ScreenVertex):Number -  (Line2D)
        from2points(v0:ScreenVertex, v1:ScreenVertex):Line2D - [static] (Line2D)
        side(x:Number, y:Number):Number -  (Line2D)
        sideV(v:ScreenVertex):Number -  (Line2D)
        toString():String -  (Line2D)

  PROPERTY DETAIL

    public var a:Number 

    public var b:Number 

    public var c:Number 
  CONSTRUCTOR DETAIL

    public function Line2D(a:Number, b:Number, c:Number) 
      Parameters
       a:Number
       b:Number
       c:Number
  METHOD DETAIL

    public static function cross(u:Line2D, v:Line2D):ScreenVertex 
      Parameters
       u:Line2D
       v:Line2D
       Returns
       ScreenVertex

    public function distance(v:ScreenVertex):Number 
      Parameters
       v:ScreenVertex
       Returns
       Number

    public static function from2points(v0:ScreenVertex, v1:ScreenVertex):Line2D 
      Parameters
       v0:ScreenVertex
       v1:ScreenVertex
       Returns
       Line2D

    public function side(x:Number, y:Number):Number 
      Parameters
       x:Number
       y:Number
       Returns
       Number

    public function sideV(v:ScreenVertex):Number 
      Parameters
       v:ScreenVertex
       Returns
       Number

    public function toString():String 
      Returns
      String
  CODE EXAMPLES

    
      There are currently no examples for this class


LineSegment
===========
  Package : away3d.primitives
  Class : public class LineSegment
  Inheritance : WireMesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) elements : Array - Returns an array of the elements contained in the wiremesh object. (WireMesh)
        end : Vertex - Defines the ending vertex. (LineSegment)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ISegmentMaterial - Defines the material used to render the segments in the wiremesh object. (WireMesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) segments : Array - Returns an array of the segments contained in the wiremesh object. (WireMesh)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
        start : Vertex - Defines the starting vertex. (LineSegment)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (LineSegment)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) addSegment(segment:Segment):void - Adds a segment object to the wiremesh object. (WireMesh)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (WireMesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) removeSegment(segment:Segment):void - Removes a segment object to the wiremesh object. (WireMesh)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    end:Vertex[read-write]
      Defines the ending vertex of the segment
      Defines the ending vertex.
      Implementation
       public function get end():Vertex
       public function set end(value:Vertex):void


    start:Vertex[read-write]
      Defines the starting vertex of the segment.
      Defines the starting vertex.
      Implementation
       public function get start():Vertex
       public function set start(value:Vertex):void

  CONSTRUCTOR DETAIL

    public function LineSegment(init:Object = null) 
      Constructor for a line segment object. The init object parameter 'edge' defines the length of the line segment to be created.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       edge:Number (default = 100, min:0)
  CODE EXAMPLES

    
      There are currently no examples for this class


LoaderEvent
===========
  Package : away3d.events
  Class : public class LoaderEvent
  Inheritance
  PUBLIC PROPERTIES
        : Object3DLoader
 loader : Object3DLoader  Description : 
 - A reference to the loader object that is relevant to the event. (LoaderEvent)

  PUBLIC METHODS
        (LoaderEvent)
        clone():Event - Creates a copy of the LoaderEvent object and sets the value of each property to match that of the original. (LoaderEvent)

  PUBLIC CONSTANTS
        LOAD_ERROR : String = "loaderror" - [static] Defines the value of the type property of a loaderror event object. (LoaderEvent)
        LOAD_SUCCESS : String = "loadsuccess" - [static] Defines the value of the type property of a loadsuccess event object. (LoaderEvent)

  PROPERTY DETAIL

    public var loader:Object3DLoader 
      A reference to the loader object that is relevant to the event.
  CONSTRUCTOR DETAIL

    public function LoaderEvent(type:String, loader:Object3DLoader) 
      Parameters
       type:String - The type of the event. Possible values are: LoaderEvent.LOAD_SUCCESS and LoaderEvent.LOAD_ERROR.
       loader:Object3DLoader - A reference to the loader object that is relevant to the event.
  METHOD DETAIL

    public override function clone():Event 
      Creates a copy of the LoaderEvent object and sets the value of each property to match that of the original.
      Returns
      Event
  CONSTANT DETAIL

    public static const LOAD_ERROR:String = "loaderror" 
      Defines the value of the type property of a loaderror event object.

    public static const LOAD_SUCCESS:String = "loadsuccess" 
      Defines the value of the type property of a loadsuccess event object.
  CODE EXAMPLES

    
      There are currently no examples for this class


LODObject
=========
  Package : away3d.containers
  Class : public class LODObject
  Inheritance : Object3D
  Implements : ILODObject
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (ObjectContainer3D)
    (^) children : Array - Returns the children of the container as an array of 3d objects (ObjectContainer3D)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
        maxp : Number - The maximum perspective value from which the 3d object can be viewed. (LODObject)
    (^) maxX : Number - Returns the maximum x value of the 3d object (ObjectContainer3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (ObjectContainer3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (ObjectContainer3D)
        minp : Number - The minimum perspective value from which the 3d object can be viewed. (LODObject)
    (^) minX : Number - Returns the minimum x value of the 3d object (ObjectContainer3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (ObjectContainer3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (ObjectContainer3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (LODObject)
    (^) addChild(child:Object3D):void - Adds a 3d object to the scene as a child of the container (ObjectContainer3D)
    (^) addChildren(... childarray):void - Adds an array of 3d objects to the scene as children of the container (ObjectContainer3D)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) clone(object:* = null):* (ObjectContainer3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) getChildByName(name:String):Object3D - Returns a 3d object specified by name from the child array of the container (ObjectContainer3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
        matchLOD(view:View3D):Boolean (LODObject)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the 3d object without moving the contents (ObjectContainer3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Object3D)
    (^) removeChild(child:Object3D):void - Removes a 3d object from the child array of the container (ObjectContainer3D)
    (^) removeChildByName(name:String):void - Removes a 3d object from the child array of the container (ObjectContainer3D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (ObjectContainer3D)
    (^) tick(time:int):void (Object3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (ObjectContainer3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PROPERTY DETAIL

    public var maxp:Number 
      The maximum perspective value from which the 3d object can be viewed.

    public var minp:Number 
      The minimum perspective value from which the 3d object can be viewed.
  CONSTRUCTOR DETAIL

    public function LODObject(init:Object = null, ... childarray) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       ... childarray - An array of children to be added on instatiation.
       Init Parameters
       maxp:Number (default = Infinity)
       minp:Number (default = 0)
  METHOD DETAIL

    public function matchLOD(view:View3D):Boolean 
      Used in ProjectionTraverser to determine whether the 3d object is visible.
      Parameters
       view:View3D - The view being used to calulate the perspective.
       Returns
       Boolean - Defines whether the LOD object is visible.
       See also
       away3d.core.traverse.ProjectionTraverser
       maxp
       minp

  CODE EXAMPLES

    
      There are currently no examples for this class


LogoCube
========
  Package : away3d.primitives
  Class : public class LogoCube
  Inheritance : Cube, AbstractPrimitive, Mesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) cubeMaterials : CubeMaterialsData - Defines the face materials of the cube. (Cube)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) depth : Number - Defines the depth of the cube. (Cube)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) height : Number - Defines the height of the cube. (Cube)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractPrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) width : Number - Defines the width of the cube. (Cube)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (LogoCube)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
    (^) buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (Cube)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  CONSTRUCTOR DETAIL

    public function LogoCube(init:Object = null) 
      Constructor for a logo cube object. This creates cube with a logo representation on each face.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
  CODE EXAMPLES

    
      There are currently no examples for this class


MaterialData
============
  Package : away3d.loaders.data
  Class : public class MaterialData

  PUBLIC PROPERTIES
        ambientColor : int - Optional ambient color of the material. (MaterialData)
        diffuseColor : int - Optional diffuse color of the material. (MaterialData)
        faces : Array - Array of indexes representing the faces that use the material. (MaterialData)
        material : ITriangleMaterial - Reference to the material object of the resulting material. (MaterialData)
        materialType : String = "wireframeMaterial" - String representing the material type. (MaterialData)
        name : String - The name of the material used as a unique reference. (MaterialData)
        specularColor : int - Optional specular color of the material. (MaterialData)
        textureBitmap : BitmapData - Reference to the bitmapData object of the texture image. (MaterialData)
        textureFileName : String - Reference to the filename of the texture image. (MaterialData)

  PUBLIC CONSTANTS
        SHADING_MATERIAL : String = "shadingMaterial" - [static] String representing a shaded material. (MaterialData)
        TEXTURE_MATERIAL : String = "textureMaterial" - [static] String representing a texture material. (MaterialData)
        WIREFRAME_MATERIAL : String = "wireframeMaterial" - [static] String representing a wireframe material. (MaterialData)

  PROPERTY DETAIL

    public var ambientColor:int 
      Optional ambient color of the material.

    public var diffuseColor:int 
      Optional diffuse color of the material.

    public var faces:Array 
      Array of indexes representing the faces that use the material.

    public var material:ITriangleMaterial 
      Reference to the material object of the resulting material.

    public var materialType:String = "wireframeMaterial" 
      String representing the material type.

    public var name:String 
      The name of the material used as a unique reference.

    public var specularColor:int 
      Optional specular color of the material.

    public var textureBitmap:BitmapData 
      Reference to the bitmapData object of the texture image.

    public var textureFileName:String 
      Reference to the filename of the texture image.
  CONSTANT DETAIL

    public static const SHADING_MATERIAL:String = "shadingMaterial" 
      String representing a shaded material.

    public static const TEXTURE_MATERIAL:String = "textureMaterial" 
      String representing a texture material.

    public static const WIREFRAME_MATERIAL:String = "wireframeMaterial" 
      String representing a wireframe material.
  CODE EXAMPLES

    
      There are currently no examples for this class


MaterialEvent
=============
  Package : away3d.events
  Class : public class MaterialEvent
  Inheritance
  PUBLIC PROPERTIES
        extra : Object - A reference to a user defined extra object that is relevant to the event. (MaterialEvent)
        : IMaterial
 material : IMaterial  Description : 
 - A reference to the material object that is relevant to the event. (MaterialEvent)

  PUBLIC METHODS
        (MaterialEvent)
        clone():Event - Creates a copy of the MaterialEvent object and sets the value of each property to match that of the original. (MaterialEvent)

  PUBLIC CONSTANTS
        CHANGED : String = "materialchanged" - [static] Defines the value of the type property of a materialchanged event object. (MaterialEvent)
        RESIZED : String = "materialresize" - [static] Defines the value of the type property of a materialresize event object. (MaterialEvent)

  PROPERTY DETAIL

    public var extra:Object 
      A reference to a user defined extra object that is relevant to the event.

    public var material:IMaterial 
      A reference to the material object that is relevant to the event.
  CONSTRUCTOR DETAIL

    public function MaterialEvent(type:String, material:IMaterial) 
      Parameters
       type:String - The type of the event. Possible values are: MaterialEvent.RESIZED.
       material:IMaterial - A reference to the material object that is relevant to the event.
  METHOD DETAIL

    public override function clone():Event 
      Creates a copy of the MaterialEvent object and sets the value of each property to match that of the original.
      Returns
      Event
  CONSTANT DETAIL

    public static const CHANGED:String = "materialchanged" 
      Defines the value of the type property of a materialchanged event object.

    public static const RESIZED:String = "materialresize" 
      Defines the value of the type property of a materialresize event object.
  CODE EXAMPLES

    
      There are currently no examples for this class


MaterialLibrary
===============
  Package : away3d.loaders.utils
  Class : public dynamic class MaterialLibrary
  Inheritance
  PUBLIC PROPERTIES
        autoLoadTextures : Boolean - Determines whether textures should be loaded automatically. (MaterialLibrary)
        loadRequired : Boolean - Flag to determine if any of the contained textures require a file load. (MaterialLibrary)
        texturePath : String - The root directory path to the texture files. (MaterialLibrary)

  PUBLIC METHODS
        : MaterialData
  Description : 
 addMaterial(name:String):MaterialData - Adds a material name reference to the library. (MaterialLibrary)
        texturesLoaded(loadQueue:TextureLoadQueue):void (MaterialLibrary)

  PROPERTY DETAIL

    public var autoLoadTextures:Boolean 
      Determines whether textures should be loaded automatically.

    public var loadRequired:Boolean 
      Flag to determine if any of the contained textures require a file load.

    public var texturePath:String 
      The root directory path to the texture files.
  METHOD DETAIL

    public function addMaterial(name:String):MaterialData 
      Adds a material name reference to the library.
      Parameters
       name:String
       Returns
       MaterialData

    public function texturesLoaded(loadQueue:TextureLoadQueue):void 
      Called after all textures have been loaded from the TextureLoader class.
      Parameters
       loadQueue:TextureLoadQueue
       See also
       away3d.loaders.utils.TextureLoader

  CODE EXAMPLES

    
      There are currently no examples for this class


Matrix3D
========
  Package : away3d.core.math
  Class : public final class Matrix3D

  PUBLIC PROPERTIES
        det : Number - [read-only] Returns the 3d matrix object's determinant. (Matrix3D)
        position : Number3D - [read-only] Returns a 3d number representing the translation imposed by the 3dmatrix. (Matrix3D)
        sxx : Number - The value in the first row and first column of the Matrix object, which affect the rotation and scaling of a 3d object. (Matrix3D)
        sxy : Number - The value in the first row and second column of the Matrix object, which affect the rotation and scaling of a 3d object. (Matrix3D)
        sxz : Number - The value in the first row and third column of the Matrix object, which affect the rotation and scaling of a 3d object. (Matrix3D)
        syx : Number - The value in the second row and first column of the Matrix object, which affect the rotation and scaling of a 3d object. (Matrix3D)
        syy : Number - The value in the second row and second column of the Matrix object, which affect the rotation and scaling of a 3d object. (Matrix3D)
        syz : Number - The value in the second row and third column of the Matrix object, which affect the rotation and scaling of a 3d object. (Matrix3D)
        szx : Number - The value in the third row and first column of the Matrix object, which affects the rotation and scaling of a 3d object. (Matrix3D)
        szy : Number - The value in the third row and second column of the Matrix object, which affect the rotation and scaling of a 3d object. (Matrix3D)
        szz : Number - The value in the third row and third column of the Matrix object, which affect the rotation and scaling of a 3d object. (Matrix3D)
        tx : Number - The value in the first row and forth column of the Matrix object, which affects the positioning along the x axis of a 3d object. (Matrix3D)
        ty : Number - The value in the second row and fourth column of the Matrix object, which affects the positioning along the y axis of a 3d object. (Matrix3D)
        tz : Number - The value in the third row and fourth column of the Matrix object, which affects the positioning along the z axis of a 3d object. (Matrix3D)

  PUBLIC METHODS
        (Matrix3D)
        array2matrix(ar:Array):void - Fills the 3d matrix object with values from an array with 3d matrix values ordered from right to left and up to down. (Matrix3D)
        clone(m:Matrix3D):Matrix3D - Fill the 3d matrix with all matrix values of the given 3d matrix. (Matrix3D)
        copy3x3(m:Matrix3D):Matrix3D - Fill the 3d matrix with the 3x3 rotation matrix section of the given 3d matrix. (Matrix3D)
        inverse(m:Matrix3D):void - Fills the 3d matrix object with the result from the inverse calulation of the given 3d matrix. (Matrix3D)
        matrix2euler():Number3D - Returns the euler angle represented by the 3x3 matrix rotation. (Matrix3D)
        multiply(m1:Matrix3D, m2:Matrix3D):void - Fills the 3d matrix object with the result from a 3x4 multipication of two 3d matrix objects. (Matrix3D)
        multiply3x3(m1:Matrix3D, m2:Matrix3D):void - Fills the 3d matrix object with the result from a 3x3 multipication of two 3d matrix objects. (Matrix3D)
        quaternion2matrix(quarternion:Quaternion):void - Fills the 3d matrix object with values representing the transformation made by the given quaternion. (Matrix3D)
        rotationMatrix(u:Number, v:Number, w:Number, angle:Number):void - Fills the 3d matrix object with values representing the given rotation around a vector. (Matrix3D)
        scale(x:Number, y:Number, z:Number):void - Scales the 3d matrix by the given amount in each dimension (Matrix3D)
        scaleMatrix(u:Number, v:Number, w:Number):void - Fills the 3d matrix object with values representing the given scaling. (Matrix3D)
        toString():String - Used to trace the values of a 3d matrix. (Matrix3D)
        translationMatrix(u:Number, v:Number, w:Number):void - Fills the 3d matrix object with values representing the given translation. (Matrix3D)

  PROPERTY DETAIL

    det:Number[read-only]
      Returns the 3d matrix object's determinant.
      Implementation
       public function get det():Number


    position:Number3D[read-only]
      Returns a 3d number representing the translation imposed by the 3dmatrix.
      Implementation
       public function get position():Number3D


    public var sxx:Number 
      The value in the first row and first column of the Matrix object, which affect the rotation and scaling of a 3d object.

    public var sxy:Number 
      The value in the first row and second column of the Matrix object, which affect the rotation and scaling of a 3d object.

    public var sxz:Number 
      The value in the first row and third column of the Matrix object, which affect the rotation and scaling of a 3d object.

    public var syx:Number 
      The value in the second row and first column of the Matrix object, which affect the rotation and scaling of a 3d object.

    public var syy:Number 
      The value in the second row and second column of the Matrix object, which affect the rotation and scaling of a 3d object.

    public var syz:Number 
      The value in the second row and third column of the Matrix object, which affect the rotation and scaling of a 3d object.

    public var szx:Number 
      The value in the third row and first column of the Matrix object, which affects the rotation and scaling of a 3d object.

    public var szy:Number 
      The value in the third row and second column of the Matrix object, which affect the rotation and scaling of a 3d object.

    public var szz:Number 
      The value in the third row and third column of the Matrix object, which affect the rotation and scaling of a 3d object.

    public var tx:Number 
      The value in the first row and forth column of the Matrix object, which affects the positioning along the x axis of a 3d object.

    public var ty:Number 
      The value in the second row and fourth column of the Matrix object, which affects the positioning along the y axis of a 3d object.

    public var tz:Number 
      The value in the third row and fourth column of the Matrix object, which affects the positioning along the z axis of a 3d object.
  CONSTRUCTOR DETAIL

    public function Matrix3D() 
  METHOD DETAIL

    public function array2matrix(ar:Array):void 
      Fills the 3d matrix object with values from an array with 3d matrix values ordered from right to left and up to down.
      Parameters
       ar:Array

    public function clone(m:Matrix3D):Matrix3D 
      Fill the 3d matrix with all matrix values of the given 3d matrix.
      Parameters
       m:Matrix3D - THe 3d matrix to copy from.
       Returns
       Matrix3D

    public function copy3x3(m:Matrix3D):Matrix3D 
      Fill the 3d matrix with the 3x3 rotation matrix section of the given 3d matrix.
      Parameters
       m:Matrix3D - THe 3d matrix to copy from.
       Returns
       Matrix3D

    public function inverse(m:Matrix3D):void 
      Fills the 3d matrix object with the result from the inverse calulation of the given 3d matrix.
      Parameters
       m:Matrix3D - The 3d matrix object used for the inverse calulation.

    public function matrix2euler():Number3D 
      Returns the euler angle represented by the 3x3 matrix rotation.
      Returns
      Number3D - A 3d number representing the 3 euler angles.

    public function multiply(m1:Matrix3D, m2:Matrix3D):void 
      Fills the 3d matrix object with the result from a 3x4 multipication of two 3d matrix objects.
      Parameters
       m1:Matrix3D - The first 3d matrix in the multipication.
       m2:Matrix3D

    public function multiply3x3(m1:Matrix3D, m2:Matrix3D):void 
      Fills the 3d matrix object with the result from a 3x3 multipication of two 3d matrix objects. The translation values are taken from the first matrix.
      Parameters
       m1:Matrix3D - The first 3d matrix in the multipication.
       m2:Matrix3D

    public function quaternion2matrix(quarternion:Quaternion):void 
      Fills the 3d matrix object with values representing the transformation made by the given quaternion.
      Parameters
       quarternion:Quaternion - The quarterion object to convert.

    public function rotationMatrix(u:Number, v:Number, w:Number, angle:Number):void 
      Fills the 3d matrix object with values representing the given rotation around a vector.
      Parameters
       u:Number - The x value of the rotation vector.
       v:Number - The y value of the rotation vector.
       w:Number - The z value of the rotation vector.
       angle:Number - The angle in radians of the rotation.

    public function scale(x:Number, y:Number, z:Number):void 
      Scales the 3d matrix by the given amount in each dimension
      Parameters
       x:Number - The scale value along the x axis.
       y:Number - The scale value along the y axis.
       z:Number - The scale value along the z axis.

    public function scaleMatrix(u:Number, v:Number, w:Number):void 
      Fills the 3d matrix object with values representing the given scaling.
      Parameters
       u:Number - The scale along the x axis.
       v:Number - The scale along the y axis.
       w:Number - The scale along the z axis..

    public function toString():String 
      Used to trace the values of a 3d matrix.
      Returns
      String - A string representation of the 3d matrix object.

    public function translationMatrix(u:Number, v:Number, w:Number):void 
      Fills the 3d matrix object with values representing the given translation.
      Parameters
       u:Number - The translation along the x axis.
       v:Number - The translation along the y axis.
       w:Number - The translation along the z axis..
  CODE EXAMPLES

    
      There are currently no examples for this class


Max3DS
======
  Package : away3d.loaders
  Class : public class Max3DS

  PUBLIC PROPERTIES
        container : ObjectContainer3D - 3d container object used for storing the parsed 3ds object. (Max3DS)
        materialLibrary : MaterialLibrary - Reference container for all materials used in the 3ds object. (Max3DS)
        meshDataList : Array - Array of mesh data objects used for storing the parsed 3ds data structure. (Max3DS)

  PUBLIC METHODS
        (Max3DS)
        load(url:String, init:Object = null):Object3DLoader - [static] Loads and parses a 3ds file into a 3d container object. (Max3DS)
        loadTextures(data:*, init:Object = null):Object3DLoader - [static] Loads and parses the textures for a 3ds file into a 3d container object. (Max3DS)
        parse(data:*, init:Object = null, loader:Object3DLoader = null):ObjectContainer3D - [static] Creates a 3d container object from the raw binary data of a 3ds file. (Max3DS)

  PROPERTY DETAIL

    public var container:ObjectContainer3D 
      3d container object used for storing the parsed 3ds object.

    public var materialLibrary:MaterialLibrary 
      Reference container for all materials used in the 3ds object.

    public var meshDataList:Array 
      Array of mesh data objects used for storing the parsed 3ds data structure.
  CONSTRUCTOR DETAIL

    public function Max3DS(data:ByteArray, init:Object = null) 
      Parameters
       data:ByteArray - The binary data of a loaded file.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       texturePath:String (default = "")
       autoLoadTextures:Boolean (default = true)
       material:Material
       centerMeshes:Boolean (default = false)
       materials:Object
       See also
       away3d.loaders.Max3DS.parse()
       away3d.loaders.Max3DS.load()

  METHOD DETAIL

    public static function load(url:String, init:Object = null):Object3DLoader 
      Loads and parses a 3ds file into a 3d container object.
      Parameters
       url:String - The url location of the file to load.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Returns
       Object3DLoader - A 3d loader object that can be used as a placeholder in a scene while the file is loading.

    public static function loadTextures(data:*, init:Object = null):Object3DLoader 
      Loads and parses the textures for a 3ds file into a 3d container object.
      Parameters
       data:* - The binary data of a loaded file.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Returns
       Object3DLoader - A 3d loader object that can be used as a placeholder in a scene while the textures are loading.

    public static function parse(data:*, init:Object = null, loader:Object3DLoader = null):ObjectContainer3D 
      Creates a 3d container object from the raw binary data of a 3ds file.
      Parameters
       data:* - The binary data of a loaded file.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       loader:Object3DLoader (default = null) - [optional] Not intended for direct use.
       Returns
       ObjectContainer3D - A 3d container object representation of the 3ds file.
  CODE EXAMPLES

    
      There are currently no examples for this class


Md2
===
  Package : away3d.loaders
  Class : public class Md2

  PUBLIC METHODS
        (Md2)
        load(url:String, init:Object = null):Object3DLoader - [static] Loads and parses an md2 file into a 3d mesh object. (Md2)
        parse(data:*, init:Object = null, loader:Object3DLoader = null):Mesh - [static] Creates a 3d mesh object from the raw xml data of an md2 file. (Md2)

  CONSTRUCTOR DETAIL

    public function Md2(data:ByteArray, init:Object = null) 
      Parameters
       data:ByteArray - The binary data of a loaded file.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       See also
       away3d.loaders.Md2.parse()
       away3d.loaders.Md2.load()

  METHOD DETAIL

    public static function load(url:String, init:Object = null):Object3DLoader 
      Loads and parses an md2 file into a 3d mesh object.
      Parameters
       url:String - The url location of the file to load.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Returns
       Object3DLoader - A 3d loader object that can be used as a placeholder in a scene while the file is loading.

    public static function parse(data:*, init:Object = null, loader:Object3DLoader = null):Mesh 
      Creates a 3d mesh object from the raw xml data of an md2 file.
      Parameters
       data:* - The binary data of a loaded file.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       loader:Object3DLoader (default = null) - [optional] Not intended for direct use.
       Returns
       Mesh - A 3d mesh object representation of the md2 file.
  CODE EXAMPLES

    
      There are currently no examples for this class


Md2still
========
  Package : away3d.loaders
  Class : public class Md2still

  PUBLIC METHODS
        (Md2still)
        load(url:String, init:Object = null):Object3DLoader - [static] Loads and parses an md2 file into a 3d mesh object. (Md2still)
        parse(data:*, init:Object = null, loader:Object3DLoader = null):Mesh - [static] Creates a 3d mesh object from the raw xml data of an md2 file. (Md2still)

  CONSTRUCTOR DETAIL

    public function Md2still(data:ByteArray, init:Object = null) 
      Parameters
       data:ByteArray - The binary data of a loaded file.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       scaling:Number (default = 1)
       See also
       away3d.loaders.Md2Still.parse()
       away3d.loaders.Md2Still.load()

  METHOD DETAIL

    public static function load(url:String, init:Object = null):Object3DLoader 
      Loads and parses an md2 file into a 3d mesh object.
      Parameters
       url:String - The url location of the file to load.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Returns
       Object3DLoader - A 3d loader object that can be used as a placeholder in a scene while the file is loading.

    public static function parse(data:*, init:Object = null, loader:Object3DLoader = null):Mesh 
      Creates a 3d mesh object from the raw xml data of an md2 file.
      Parameters
       data:* - The binary data of a loaded file.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       loader:Object3DLoader (default = null) - [optional] Not intended for direct use.
       Returns
       Mesh - A 3d mesh object representation of the md2 file.
  CODE EXAMPLES

    
      There are currently no examples for this class


Mesh
====
  Package : away3d.core.base
  Class : public class Mesh
  Inheritance : BaseMesh
  Implements : IPrimitiveProvider
  Subclasses : AbstractPrimitive, Animator, Lathe, SeaTurtle, SegmentsExtrude, SkinExtrude, Skybox, Skybox6, Triangle
  Description : d object containing face and segment elements

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
        back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
        bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
        debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
        elements : Array - [read-only] Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
        faces : Array - [read-only] Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
        indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
        material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
        outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (Mesh)
        addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
        asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
        asXML():XML - Returns an xml representation of the mesh (Mesh)
        clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
        invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
        movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
        primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
        quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
        removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    public var back:ITriangleMaterial 
      Defines a triangle material to be used for the backface of all faces in the 3d object.

    public var bothsides:Boolean 
      Indicates whether both the front and reverse sides of a face should be rendered.

    public var debugbb:Boolean 
      Indicates whether a debug bounding box should be rendered around the 3d object.

    elements:Array[read-only]
      Returns an array of the elements contained in the mesh object.
      Implementation
       public function get elements():Array


    faces:Array[read-only]
      Returns an array of the faces contained in the mesh object.
      Implementation
       public function get faces():Array


    public var indexes:Array 

    material:ITriangleMaterial[read-write]
      Defines the material used to render the faces in the mesh object. Individual material settings on faces will override this setting.
      Implementation
       public function get material():ITriangleMaterial
       public function set material(value:ITriangleMaterial):void
       See also
       away3d.core.base.Face.material


    public var outline:ISegmentMaterial 
      Defines a segment material to be used for outlining the 3d object.
  CONSTRUCTOR DETAIL

    public function Mesh(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       material:Material
       outline:SegmentMaterial
       back:Material
       bothsides:Boolean (default = false)
       debugbb:Boolean (default = false)
  METHOD DETAIL

    public function addFace(face:Face):void 
      Adds a face object to the mesh object.
      Parameters
       face:Face - The face object to be added.

    public function asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String 
      Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh.
      Parameters
       classname:String (default = null) - [optional] Defines the class name used in the output string. Defaults to Away3DObject.
       packagename:String (default = "") - [optional] Defines the package name used in the output string. Defaults to no package.
       round:Boolean (default = false) - [optional] Rounds all values to 4 decimal places. Defaults to false.
       animated:Boolean (default = false) - [optional] Defines whether animation data should be saved. Defaults to false.
       Returns
       String - A string to be pasted into a new .as file

    public function asXML():XML 
      Returns an xml representation of the mesh
      Returns
      XML - An xml object containing mesh information

    public override function clone(object:* = null):* 
      Duplicates the mesh properties to another 3d object.
      Parameters
       object:* (default = null) - [optional] The new object instance into which all properties are copied. The default is Mesh.
       Returns
       * - The new object instance with duplicated properties applied.

    public function invertFaces():void 
      Inverts the geometry of all face objects.
      See also
      away3d.code.base.Face.invert()


    public function movePivot(dx:Number, dy:Number, dz:Number):void 
      Moves the origin point of the mesh without moving the contents.
      Parameters
       dx:Number - The amount of movement along the local x axis.
       dy:Number - The amount of movement along the local y axis.
       dz:Number - The amount of movement along the local z axis.

    public override function primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void 
      Called from the PrimitiveTraverser when passing DrawPrimitive objects to the primitive consumer object
      Parameters
       consumer:IPrimitiveConsumer - The consumer instance
       session:AbstractRenderSession - The render session of the 3d object
       See also
       away3d.core.traverse.PrimitiveTraverser
       away3d.core.draw.DrawTriangle
       away3d.core.draw.DrawSegment


    public function quarterFaces():void 
      Divides a face object into 4 equal sized face objects. Used to segment a mesh in order to reduce affine persepective distortion.
      See also
      away3d.primitives.SkyBox


    public function removeFace(face:Face):void 
      Removes a face object from the mesh object.
      Parameters
       face:Face - The face object to be removed.
  CODE EXAMPLES

    
      There are currently no examples for this class


MeshData
========
  Package : away3d.loaders.data
  Class : public class MeshData
  Inheritance : ObjectData
  Description : d object

  PUBLIC PROPERTIES
        faces : Array - Array of face data objects. (MeshData)
        materials : Array - Optional assigned materials to the mesh. (MeshData)
    (^) name : String - The name of the 3d object used as a unique reference. (ObjectData)
    (^) transform : Matrix3D - The 3d transformation matrix for the 3d object (ObjectData)
        uvs : Array - Array of uv objects. (MeshData)
        vertices : Array - Array of vertex objects. (MeshData)

  PROPERTY DETAIL

    public var faces:Array 
      Array of face data objects.
      See also
      away3d.loaders.data.FaceData


    public var materials:Array 
      Optional assigned materials to the mesh.

    public var uvs:Array 
      Array of uv objects. see

    public var vertices:Array 
      Array of vertex objects.
      See also
      away3d.core.base.Vertex

  CODE EXAMPLES

    
      There are currently no examples for this class


MeshElementEvent
================
  Package : away3d.events
  Class : public class MeshElementEvent
  Inheritance
  PUBLIC PROPERTIES
        : IMeshElement
 element : IMeshElement  Description : 
 - A reference to the element object that is relevant to the event. (MeshElementEvent)

  PUBLIC METHODS
        (MeshElementEvent)
        clone():Event - Creates a copy of the MeshElementEvent object and sets the value of each property to match that of the original. (MeshElementEvent)

  PUBLIC CONSTANTS
        VERTEX_CHANGED : String = "vertexchanged" - [static] Defines the value of the type property of a vertexchanged event object. (MeshElementEvent)
        VERTEXVALUE_CHANGED : String = "vertexvaluechanged" - [static] Defines the value of the type property of a vertexvaluechanged event object. (MeshElementEvent)
        VISIBLE_CHANGED : String = "visiblechanged" - [static] Defines the value of the type property of a visiblechanged event object. (MeshElementEvent)

  PROPERTY DETAIL

    public var element:IMeshElement 
      A reference to the element object that is relevant to the event.
  CONSTRUCTOR DETAIL

    public function MeshElementEvent(type:String, element:IMeshElement) 
      Parameters
       type:String - The type of the event. Possible values are: MeshElementEvent.VERTEX_CHANGED, MeshElementEvent.VERTEXVALUE_CHANGED and MeshElementEvent.VISIBLE_CHANGED.
       element:IMeshElement - A reference to the element object that is relevant to the event.
  METHOD DETAIL

    public override function clone():Event 
      Creates a copy of the MeshElementEvent object and sets the value of each property to match that of the original.
      Returns
      Event
  CONSTANT DETAIL

    public static const VERTEX_CHANGED:String = "vertexchanged" 
      Defines the value of the type property of a vertexchanged event object.

    public static const VERTEXVALUE_CHANGED:String = "vertexvaluechanged" 
      Defines the value of the type property of a vertexvaluechanged event object.

    public static const VISIBLE_CHANGED:String = "visiblechanged" 
      Defines the value of the type property of a visiblechanged event object.
  CODE EXAMPLES

    
      There are currently no examples for this class


MeshMaterialData
================
  Package : away3d.loaders.data
  Class : public class MeshMaterialData

  PUBLIC PROPERTIES
        faceList : Array - A list of faces which are to be drawn with the material. (MeshMaterialData)
        name : String - The name of the material used as a unique reference. (MeshMaterialData)

  PROPERTY DETAIL

    public var faceList:Array 
      A list of faces which are to be drawn with the material.

    public var name:String 
      The name of the material used as a unique reference.
  CODE EXAMPLES

    
      There are currently no examples for this class


Morpher
=======
  Package : away3d.core.base
  Class : public class Morpher
  Inheritance
  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (Object3D)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) : Matrix3D
 inverseSceneTransform : Matrix3D  Description : 
 -  (Object3D)
    (^) maxX : Number - Returns the maximum x value of the 3d object (Object3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (Object3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (Object3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (Object3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (Object3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (Object3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (Morpher)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
        finish(comp:BaseMesh):void - resets all vertex objects to the external mesh positions (Morpher)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
        mix(comp:BaseMesh, k:Number):void - interpolates the vertex objects position values between the current vertex positions and the external vertex positions (Morpher)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Object3D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (Object3D)
        start():void - resets all vertex objects to 0,0,0 (Morpher)
    (^) tick(time:int):void (Object3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  CONSTRUCTOR DETAIL

    public function Morpher(vertices:BaseMesh) 
      Parameters
       vertices:BaseMesh - A mesh object used to define the starting vertices.
  METHOD DETAIL

    public function finish(comp:BaseMesh):void 
      resets all vertex objects to the external mesh positions
      Parameters
       comp:BaseMesh - The external mesh used for vertex values

    public function mix(comp:BaseMesh, k:Number):void 
      interpolates the vertex objects position values between the current vertex positions and the external vertex positions
      Parameters
       comp:BaseMesh - The external mesh used for interpolating values
       k:Number - The increment used on the weighting value

    public function start():void 
      resets all vertex objects to 0,0,0
  CODE EXAMPLES

    
      There are currently no examples for this class


MouseEvent3D
============
  Package : away3d.events
  Class : public class MouseEvent3D
  Inheritance
  PUBLIC PROPERTIES
        ctrlKey : Boolean - Indicates whether the Control key is active (true) or inactive (false). (MouseEvent3D)
        : DrawPrimitive
 drawpri : DrawPrimitive  Description : 
 - The draw primitive inside which the event took place. (MouseEvent3D)
        element : Object - The 3d element inside which the event took place. (MouseEvent3D)
        material : IUVMaterial - The material of the 3d element inside which the event took place. (MouseEvent3D)
        object : Object3D - The 3d object inside which the event took place. (MouseEvent3D)
        sceneX : Number - The x coordinate at which the event occurred in global scene coordinates. (MouseEvent3D)
        sceneY : Number - The y coordinate at which the event occurred in global scene coordinates. (MouseEvent3D)
        sceneZ : Number - The z coordinate at which the event occurred in global scene coordinates. (MouseEvent3D)
        screenX : Number - The horizontal coordinate at which the event occurred in view coordinates. (MouseEvent3D)
        screenY : Number - The vertical coordinate at which the event occurred in view coordinates. (MouseEvent3D)
        screenZ : Number - The depth coordinate at which the event occurred in view coordinates. (MouseEvent3D)
        shiftKey : Boolean - Indicates whether the Shift key is active (true) or inactive (false). (MouseEvent3D)
        uv : UV - The uv coordinate inside the draw primitive where the event took place. (MouseEvent3D)
        view : View3D - The view object inside which the event took place. (MouseEvent3D)

  PUBLIC METHODS
        (MouseEvent3D)
        clone():Event - Creates a copy of the MouseEvent3D object and sets the value of each property to match that of the original. (MouseEvent3D)

  PUBLIC CONSTANTS
        MOUSE_DOWN : String = "mouseDown3D" - [static] Defines the value of the type property of a mouseDown3D event object. (MouseEvent3D)
        MOUSE_MOVE : String = "mouseMove3D" - [static] Defines the value of the type property of a mouseMove3D event object. (MouseEvent3D)
        MOUSE_OUT : String = "mouseOut3D" - [static] Defines the value of the type property of a mouseOut3D event object. (MouseEvent3D)
        MOUSE_OVER : String = "mouseOver3D" - [static] Defines the value of the type property of a mouseOver3D event object. (MouseEvent3D)
        MOUSE_UP : String = "mouseUp3D" - [static] Defines the value of the type property of a mouseUp3D event object. (MouseEvent3D)

  PROPERTY DETAIL

    public var ctrlKey:Boolean 
      Indicates whether the Control key is active (true) or inactive (false).

    public var drawpri:DrawPrimitive 
      The draw primitive inside which the event took place.

    public var element:Object 
      The 3d element inside which the event took place.

    public var material:IUVMaterial 
      The material of the 3d element inside which the event took place.

    public var object:Object3D 
      The 3d object inside which the event took place.

    public var sceneX:Number 
      The x coordinate at which the event occurred in global scene coordinates.

    public var sceneY:Number 
      The y coordinate at which the event occurred in global scene coordinates.

    public var sceneZ:Number 
      The z coordinate at which the event occurred in global scene coordinates.

    public var screenX:Number 
      The horizontal coordinate at which the event occurred in view coordinates.

    public var screenY:Number 
      The vertical coordinate at which the event occurred in view coordinates.

    public var screenZ:Number 
      The depth coordinate at which the event occurred in view coordinates.

    public var shiftKey:Boolean 
      Indicates whether the Shift key is active (true) or inactive (false).

    public var uv:UV 
      The uv coordinate inside the draw primitive where the event took place.

    public var view:View3D 
      The view object inside which the event took place.
  CONSTRUCTOR DETAIL

    public function MouseEvent3D(type:String) 
      Parameters
       type:String - The type of the event. Possible values are: MouseEvent3D.MOUSE_OVER, MouseEvent3D.MOUSE_OUT, MouseEvent3D.MOUSE_UP, MouseEvent3D.MOUSE_DOWN and MouseEvent3D.MOUSE_MOVE.
  METHOD DETAIL

    public override function clone():Event 
      Creates a copy of the MouseEvent3D object and sets the value of each property to match that of the original.
      Returns
      Event
  CONSTANT DETAIL

    public static const MOUSE_DOWN:String = "mouseDown3D" 
      Defines the value of the type property of a mouseDown3D event object.

    public static const MOUSE_MOVE:String = "mouseMove3D" 
      Defines the value of the type property of a mouseMove3D event object.

    public static const MOUSE_OUT:String = "mouseOut3D" 
      Defines the value of the type property of a mouseOut3D event object.

    public static const MOUSE_OVER:String = "mouseOver3D" 
      Defines the value of the type property of a mouseOver3D event object.

    public static const MOUSE_UP:String = "mouseUp3D" 
      Defines the value of the type property of a mouseUp3D event object.
  CODE EXAMPLES

    
      Dynamic Mouse Objects
      view.mouseZeroMove=true;
      myObject.name='away3D_name';
      myObject.addOnMouseOver(mymouseFunction);
      function mymouseFunction(event:MouseEvent3D):void {
      var temp=event.object;
      trace(temp.name);
      }
      *Lesson_Basic_05_MouseEvents.fla
      // import core library
      import away3d.core.scene.*;
      // import geometry primitives
      import away3d.objects.*;
      // import materials
      import away3d.core.material.*;
      // import mesh type
      import away3d.core.mesh.*;
      // create a 3D-viewport
      var view:View3D = new View3D({x:300, y:200});
      // add viewport to the stage
      addChild(view);
      // create carousel
      var plane:Mesh = new RegularPolygon({material:"grey#", radius:500, y:-100, pushback:true});
      var sphere1:Mesh = new Sphere({material:"blue#", radius:100, x:350});
      var sphere2:Mesh = new Sphere({material:"cyan#", radius:100, x:-350});
      var sphere3:Mesh = new Sphere({material:"green#", radius:100, z:350});
      var sphere4:Mesh = new Sphere({material:"lime#", radius:100, z:-350});
      var carousel:Object3D = new ObjectContainer3D(sphere1, sphere2, sphere3, sphere4, plane);
      // add carousel to the scene
      view.scene.addChild(carousel);
      // register mouse event handler
      carousel.addOnMouseDown(onCarouselMouseDown);
      function onCarouselMouseDown(event:MouseEvent3D):void {
      // set the clicked mesh a new material
      (event.object as Mesh).material = new WireColorMaterial("random");
      }
      // every frame
      addEventListener(Event.ENTER_FRAME, onEnterFrame);
      function onEnterFrame(event:Event):void {
      // rotate carousel
      carousel.rotationY = getTimer() / 100;
      // rerender viewport
      view.render();
      }
      From Lesson_Basic_05_MouseEvents.fla

MovieClipSprite
===============
  Package : away3d.sprites
  Class : public class MovieClipSprite
  Inheritance : Object3D
  Implements : IPrimitiveProvider
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (Object3D)
        deltaZ : Number - An optional offset value added to the z depth used to sort the sprite (MovieClipSprite)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) maxX : Number - Returns the maximum x value of the 3d object (Object3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (Object3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (Object3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (Object3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (Object3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (Object3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
        movieclip : DisplayObject - Defines the displayobject to use for the sprite texture. (MovieClipSprite)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
        rescale : Boolean - Defines whether the sprite should scale with distance from the camera. (MovieClipSprite)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
        scaling : Number - Defines the overall scaling of the sprite object (MovieClipSprite)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (MovieClipSprite)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
        primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (MovieClipSprite)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (Object3D)
    (^) tick(time:int):void (Object3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PROPERTY DETAIL

    public var deltaZ:Number 
      An optional offset value added to the z depth used to sort the sprite

    public var movieclip:DisplayObject 
      Defines the displayobject to use for the sprite texture.

    public var rescale:Boolean 
      Defines whether the sprite should scale with distance from the camera. Defaults to false

    public var scaling:Number 
      Defines the overall scaling of the sprite object
  CONSTRUCTOR DETAIL

    public function MovieClipSprite(movieclip:DisplayObject, init:Object = null) 
      Parameters
       movieclip:DisplayObject - The displayobject to use as the sprite texture.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       scaling:Number (default = 1)
       deltaZ:Number (default = 0)
       rescale:Boolean (default = false)
  METHOD DETAIL

    public override function primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void 
      Called from the PrimitiveTraverser when passing DrawPrimitive objects to the primitive consumer object
      Parameters
       consumer:IPrimitiveConsumer - The consumer instance
       session:AbstractRenderSession - The render session of the 3d object
       See also
       away3d.core.traverse.PrimitiveTraverser
       away3d.core.draw.DrawDisplayObject

  CODE EXAMPLES

    
      There are currently no examples for this class


MovieMaterial
=============
  Package : away3d.materials
  Class : public class MovieMaterial
  Inheritance : TransformBitmapMaterial, BitmapMaterial
  Implements : ITriangleMaterial, IUVMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - Defines an alpha value for the texture bitmap. (BitmapMaterial)
        autoUpdate : Boolean - Indicates whether the texture bitmap is updated on every frame (MovieMaterial)
    (^) bitmap : BitmapData - Returns the bitmapData object being used as the material texture. (BitmapMaterial)
    (^) blendMode : String - Defines a blendMode value for the texture bitmap. (BitmapMaterial)
    (^) color : uint - Defines a colored tint for the texture bitmap. (BitmapMaterial)
    (^) debug : Boolean = false - Toggles debug mode: textured triangles are drawn with white outlines, precision correction triangles are drawn with blue outlines. (BitmapMaterial)
    (^) globalProjection : Boolean - Determines whether a projected texture uses offsetX, offsetY and projectionVector values relative to scene cordinates. (TransformBitmapMaterial)
        height : Number - [read-only] Returns the height of the bitmapData being used as the material texture. (MovieMaterial)
        interactive : Boolean -  (MovieMaterial)
        movie : Sprite - Defines the movieclip used for rendering the material (MovieMaterial)
    (^) offsetX : Number - Offsets the x coordinates of the texture in uv-space (TransformBitmapMaterial)
    (^) offsetY : Number - Offsets the y coordinates of the texture in uv-space (TransformBitmapMaterial)
    (^) precision : Number - Corrects distortion caused by the affine transformation (non-perpective) of textures. (BitmapMaterial)
    (^) projectionVector : Number3D - Projects the texture in object space, ignoring the uv coordinates of the vertex objects. (TransformBitmapMaterial)
    (^) repeat : Boolean = false - Determines if texture bitmap will tile in uv-space (BitmapMaterial)
    (^) rotation : Number - Rotates the texture in uv-space (TransformBitmapMaterial)
    (^) scaleX : Number - Scales the x coordinates of the texture in uv-space (TransformBitmapMaterial)
    (^) scaleY : Number - Scales the y coordinates of the texture in uv-space (TransformBitmapMaterial)
    (^) smooth : Boolean = false - Determines if texture bitmap is smoothed (bilinearly filtered) when drawn to screen. (BitmapMaterial)
    (^) throughProjection : Boolean - Determines whether a projected texture is visble on the faces pointing away from the projection. (TransformBitmapMaterial)
    (^) transform : Matrix - Transforms the texture in uv-space (TransformBitmapMaterial)
        transparent : Boolean - Defines the transparent property of the texture bitmap created from the movie (MovieMaterial)
    (^) visible : Boolean - Indicates whether the material is visible (BitmapMaterial)
        width : Number - [read-only] Returns the width of the bitmapData being used as the material texture. (MovieMaterial)

  PROTECTED PROPERTIES
        (MovieMaterial)
    (^) addOnResize(listener:Function):void - Default method for adding a materialresize event listener (BitmapMaterial)
    (^) getPixel32(u:Number, v:Number):uint - Returns the argb value of the bitmapData pixel at the given u v coordinate. (TransformBitmapMaterial)
    (^) removeOnResize(listener:Function):void - Default method for removing a materialresize event listener (BitmapMaterial)
    (^) renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (TransformBitmapMaterial)
    (^) renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (BitmapMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (TransformBitmapMaterial)
        update():void - Updates the texture bitmap with the current frame of the movieclip object (MovieMaterial)
        updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (MovieMaterial)

  PROTECTED METHODS
    (^) getMapping(tri:DrawTriangle):Matrix - Calculates the mapping matrix required to draw the triangle texture to screen. (TransformBitmapMaterial)
    (^) setColorTransform():void (BitmapMaterial)
    (^) updateRenderBitmap():void (BitmapMaterial)

  EVENTS
    (^) (BitmapMaterial)

  PROPERTY DETAIL

    public var autoUpdate:Boolean 
      Indicates whether the texture bitmap is updated on every frame

    height:Number[read-only]
      Returns the height of the bitmapData being used as the material texture.
      Implementation
       public function get height():Number


    public var interactive:Boolean 

    public var movie:Sprite 
      Defines the movieclip used for rendering the material

    public var transparent:Boolean 
      Defines the transparent property of the texture bitmap created from the movie
      See also
      movie


    width:Number[read-only]
      Returns the width of the bitmapData being used as the material texture.
      Implementation
       public function get width():Number

  CONSTRUCTOR DETAIL

    public function MovieMaterial(movie:Sprite, init:Object = null) 
      Parameters
       movie:Sprite - The sprite object to be used as the material's texture.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       transparent:Boolean (default = true)
       autoUpdate:Boolean (default = true)
       interactive:Boolean (default = false)
  METHOD DETAIL

    public function update():void 
      Updates the texture bitmap with the current frame of the movieclip object
      See also
      movie


    public override function updateMaterial(source:Object3D, view:View3D):void 
      Called once per render loop when material is visible.
      Parameters
       source:Object3D
       view:View3D
  CODE EXAMPLES

    
      Using MovieMaterial (Animated MovieClip as material)
      var materialA:MovieMaterial=new MovieMaterial(mymovieclip);
      planeA=new Plane({material:materialA,width:500,height:500,segmentsW:1,segmentsH:1});
      planeA.bothsides=true;

Number3D
========
  Package : away3d.core.math
  Class : public final class Number3D

  PUBLIC PROPERTIES
        BACKWARD : Number3D - [static] A 3d number object representing a relative direction backward. (Number3D)
        DOWN : Number3D - [static] A 3d number object representing a relative direction down. (Number3D)
        FORWARD : Number3D - [static] A 3d number object representing a relative direction forward. (Number3D)
        LEFT : Number3D - [static] A 3d number object representing a relative direction left. (Number3D)
        modulo : Number - [read-only] The modulo of the 3d number object. (Number3D)
        modulo2 : Number - [read-only] The squared modulo of the 3d number object. (Number3D)
        RIGHT : Number3D - [static] A 3d number object representing a relative direction right. (Number3D)
        UP : Number3D - [static] A 3d number object representing a relative direction up. (Number3D)
        x : Number - The horizontal coordinate of the 3d number object. (Number3D)
        y : Number - The vertical coordinate of the 3d number object. (Number3D)
        z : Number - The depth coordinate of the 3d number object. (Number3D)

  PUBLIC METHODS
        (Number3D)
        add(v:Number3D, w:Number3D):void - Fills the 3d number object with the result from an addition of two 3d numbers. (Number3D)
        clone():Number3D (Number3D)
        closestPointOnPlane(p:Number3D, k:Number3D, n:Number3D):Number3D - Calculates a 3d number object representing the closest point on a given plane to a given 3d point. (Number3D)
        cross(v:Number3D, w:Number3D):void - Fills the 3d number object with the result from an cross product of two 3d numbers. (Number3D)
        distance(w:Number3D):Number - Calculates the distance from the 3d number object to the given 3d number. (Number3D)
        dot(w:Number3D):Number - Calculates the dot product of the 3d number object with the given 3d number. (Number3D)
        getAngle(w:Number3D = null):Number - Returns the angle in radians made between the 3d number obejct and the given 3d number. (Number3D)
        normalize(val:Number = 1):void - Normalises the 3d number object. (Number3D)
        rotate(v:Number3D, m:Matrix3D):void - Fills the 3d number object with the result of a 3d matrix rotation performed on a 3d number. (Number3D)
        scale(v:Number3D, s:Number):void - Fills the 3d number object with scaled values from the given 3d number. (Number3D)
        sub(v:Number3D, w:Number3D):void - Fills the 3d number object with the result from a subtraction of two 3d numbers. (Number3D)
        toString():String - Used to trace the values of a 3d number. (Number3D)
        transform(v:Number3D, m:Matrix3D):void - Fills the 3d number object with the result of a 3d matrix tranformation performed on a 3d number. (Number3D)

  PROPERTY DETAIL

    public static var BACKWARD:Number3D 
      A 3d number object representing a relative direction backward.

    public static var DOWN:Number3D 
      A 3d number object representing a relative direction down.

    public static var FORWARD:Number3D 
      A 3d number object representing a relative direction forward.

    public static var LEFT:Number3D 
      A 3d number object representing a relative direction left.

    modulo:Number[read-only]
      The modulo of the 3d number object.
      Implementation
       public function get modulo():Number


    modulo2:Number[read-only]
      The squared modulo of the 3d number object.
      Implementation
       public function get modulo2():Number


    public static var RIGHT:Number3D 
      A 3d number object representing a relative direction right.

    public static var UP:Number3D 
      A 3d number object representing a relative direction up.

    public var x:Number 
      The horizontal coordinate of the 3d number object.

    public var y:Number 
      The vertical coordinate of the 3d number object.

    public var z:Number 
      The depth coordinate of the 3d number object.
  CONSTRUCTOR DETAIL

    public function Number3D(x:Number = 0, y:Number = 0, z:Number = 0, n:Boolean = false) 
      Parameters
       x:Number (default = 0) - [optional] A default value for the horizontal coordinate of the 3d number object. Defaults to 0.
       y:Number (default = 0) - [optional] A default value for the vertical coordinate of the 3d number object. Defaults to 0.
       z:Number (default = 0) - [optional] A default value for the depth coordinate of the 3d number object. Defaults to 0.
       n:Boolean (default = false) - [optional] Determines of the resulting 3d number object should be normalised. Defaults to false.
  METHOD DETAIL

    public function add(v:Number3D, w:Number3D):void 
      Fills the 3d number object with the result from an addition of two 3d numbers.
      Parameters
       v:Number3D - The first 3d number in the addition.
       w:Number3D - The second 3d number in the addition.

    public function clone():Number3D 
      Duplicates the 3d number's properties to another Number3D object
      Returns
      Number3D - The new 3d number instance with duplicated properties applied

    public function closestPointOnPlane(p:Number3D, k:Number3D, n:Number3D):Number3D 
      Calculates a 3d number object representing the closest point on a given plane to a given 3d point.
      Parameters
       p:Number3D - The 3d point used in teh calculation.
       k:Number3D - The plane offset used in the calculation.
       n:Number3D - The plane normal used in the calculation.
       Returns
       Number3D - The resulting 3d point.

    public function cross(v:Number3D, w:Number3D):void 
      Fills the 3d number object with the result from an cross product of two 3d numbers.
      Parameters
       v:Number3D - The first 3d number in the cross product calculation.
       w:Number3D - The second 3d number in the cross product calculation.

    public function distance(w:Number3D):Number 
      Calculates the distance from the 3d number object to the given 3d number.
      Parameters
       w:Number3D - The 3d number object whose distance is calculated.
       Returns
       Number

    public function dot(w:Number3D):Number 
      Calculates the dot product of the 3d number object with the given 3d number.
      Parameters
       w:Number3D - The 3d number object to use in the calculation.
       Returns
       Number - The dot product result.

    public function getAngle(w:Number3D = null):Number 
      Returns the angle in radians made between the 3d number obejct and the given 3d number.
      Parameters
       w:Number3D (default = null) - [optional] The 3d number object to use in the calculation.
       Returns
       Number - An angle in radians representing the angle between the two 3d number objects.

    public function normalize(val:Number = 1):void 
      Normalises the 3d number object.
      Parameters
       val:Number (default = 1) - [optional] A normalisation coefficient representing the length of the resulting 3d number object. Defaults to 1.

    public function rotate(v:Number3D, m:Matrix3D):void 
      Fills the 3d number object with the result of a 3d matrix rotation performed on a 3d number.
      Parameters
       v:Number3D - 3d number object to use in the calculation.
       m:Matrix3D - 3d matrix object representing the rotation.

    public function scale(v:Number3D, s:Number):void 
      Fills the 3d number object with scaled values from the given 3d number.
      Parameters
       v:Number3D - The 3d number object used for the scaling calculation.
       s:Number - The scaling value.

    public function sub(v:Number3D, w:Number3D):void 
      Fills the 3d number object with the result from a subtraction of two 3d numbers.
      Parameters
       v:Number3D - The starting 3d number in the subtraction.
       w:Number3D - The subtracting 3d number in the subtraction.

    public function toString():String 
      Used to trace the values of a 3d number.
      Returns
      String - A string representation of the 3d number object.

    public function transform(v:Number3D, m:Matrix3D):void 
      Fills the 3d number object with the result of a 3d matrix tranformation performed on a 3d number.
      Parameters
       v:Number3D - 3d number object to use in the calculation.
       m:Matrix3D - 3d matrix object representing the tranformation.
  CODE EXAMPLES

    
      There are currently no examples for this class


Obj
===
  Package : away3d.loaders
  Class : public class Obj

  PUBLIC PROPERTIES
        mesh : Mesh -  (Obj)

  PUBLIC METHODS
        (Obj)
        load(url:String, init:Object = null):Object3DLoader - [static] Loads and parses a obj file into a 3d mesh object. (Obj)
        parse(data:*, init:Object = null, loader:Object3DLoader = null):Object3D - [static] Creates a 3d mesh object from the raw ascii data of a obj file. (Obj)

  PROPERTY DETAIL

    public var mesh:Mesh 
  CONSTRUCTOR DETAIL

    public function Obj(data:String, urlbase:String = "", init:Object = null) 
      Parameters
       data:String - The binary data of a loaded file.
       urlbase:String (default = "") - The url of the .obj file, required to compose the url mtl adres and be able access the bitmap sources relative to mtl location.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       See also
       away3d.loaders.Obj.parse()
       away3d.loaders.Obj.load()

  METHOD DETAIL

    public static function load(url:String, init:Object = null):Object3DLoader 
      Loads and parses a obj file into a 3d mesh object.
      Parameters
       url:String - The url location of the file to load.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Returns
       Object3DLoader - A 3d loader object that can be used as a placeholder in a scene while the file is loading.

    public static function parse(data:*, init:Object = null, loader:Object3DLoader = null):Object3D 
      Creates a 3d mesh object from the raw ascii data of a obj file.
      Parameters
       data:* - The ascii data of a loaded file.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       loader:Object3DLoader (default = null) - [optional] Not intended for direct use.
       Returns
       Object3D - A 3d mesh object representation of the obj file.
  CODE EXAMPLES

    
      There are currently no examples for this class


Object3D
========
  Package : away3d.core.base
  Class : public class Object3D
  Inheritance  Implements : IClonable
  Subclasses : AmbientLight3D, BaseMesh, Camera3D, ConvexBlock, DirectionalLight3D, DirSprite2D, DofSprite2D, Morpher, MovieClipSprite, ObjectContainer3D, PointLight3D, Sprite2D
  Description : 

  PUBLIC PROPERTIES
        alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
        blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
        boundingRadius : Number - [read-only] Returns the bounding radius of the 3d object (Object3D)
        extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
        filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
        inverseSceneTransform : Matrix3D -  (Object3D)
        maxX : Number - [read-only] Returns the maximum x value of the 3d object (Object3D)
        maxY : Number - [read-only] Returns the maximum y value of the 3d object (Object3D)
        maxZ : Number - [read-only] Returns the maximum z value of the 3d object (Object3D)
        minX : Number - [read-only] Returns the minimum x value of the 3d object (Object3D)
        minY : Number - [read-only] Returns the minimum y value of the 3d object (Object3D)
        minZ : Number - [read-only] Returns the minimum z value of the 3d object (Object3D)
        mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
        name : String - An optional name string for the 3d object. (Object3D)
        ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
        ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
        parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
        position : Number3D (Object3D)
        projection : Projection -  (Object3D)
        rotationX : Number (Object3D)
        rotationY : Number (Object3D)
        rotationZ : Number (Object3D)
        scene : Scene3D - [read-only] Returns the parent scene of the 3d object (Object3D)
        scenePosition : Number3D (Object3D)
        sceneTransform : Matrix3D (Object3D)
        sceneTransformed : Boolean -  (Object3D)
        session : AbstractRenderSession - The render session used by the 3d object (Object3D)
        transform : Matrix3D (Object3D)
        useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
        viewTransform : Matrix3D -  (Object3D)
        visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
        x : Number (Object3D)
        y : Number (Object3D)
        z : Number (Object3D)

  PROTECTED PROPERTIES
        ini : Init - Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor. (Object3D)

  PUBLIC METHODS
        addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
        addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
        addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
        addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
        addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
        addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
        addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
        addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
        addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
        addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
        clone(object:* = null):* (Object3D)
        distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
        lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
        moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
        moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
        moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
        moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
        moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
        moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
        moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
        pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
        primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Object3D)
        removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
        removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
        removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
        removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
        removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
        removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
        removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
        removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
        removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
        removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
        roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
        rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
        scale(scale:Number):void - Scales the contents of the 3d object. (Object3D)
        tick(time:int):void (Object3D)
        toString():String - Used to trace the values of a 3d object. (Object3D)
        translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
        traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
        yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
        (Object3D)
        (Object3D)
        (Object3D)
        (Object3D)
        (Object3D)
        (Object3D)
        (Object3D)
        (Object3D)
        (Object3D)
        (Object3D)

  PROPERTY DETAIL

    public var alpha:Number 
      An optional alpha value that can be applied to the 3d object. Requires ownCanvas to be set to true.
      See also
      ownCanvas


    public var blendMode:String 
      An optional blend mode that can be applied to the 3d object. Requires ownCanvas to be set to true.
      See also
      ownCanvas


    boundingRadius:Number[read-only]
      Returns the bounding radius of the 3d object
      Implementation
       public function get boundingRadius():Number


    public var extra:Object 
      An optional untyped object that can contain used-defined properties

    public var filters:Array 
      An optional array of filters that can be applied to the 3d object. Requires ownCanvas to be set to true.
      See also
      ownCanvas


    protected var ini:Init 
      Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor.

    public var inverseSceneTransform:Matrix3D 

    maxX:Number[read-only]
      Returns the maximum x value of the 3d object
      Implementation
       public function get maxX():Number
       See also
       x


    maxY:Number[read-only]
      Returns the maximum y value of the 3d object
      Implementation
       public function get maxY():Number
       See also
       y


    maxZ:Number[read-only]
      Returns the maximum z value of the 3d object
      Implementation
       public function get maxZ():Number
       See also
       z


    minX:Number[read-only]
      Returns the minimum x value of the 3d object
      Implementation
       public function get minX():Number
       See also
       x


    minY:Number[read-only]
      Returns the minimum y value of the 3d object
      Implementation
       public function get minY():Number
       See also
       y


    minZ:Number[read-only]
      Returns the minimum z value of the 3d object
      Implementation
       public function get minZ():Number
       See also
       z


    public var mouseEnabled:Boolean = true 
      Defines whether mouse events are received on the 3d object

    public var name:String 
      An optional name string for the 3d object. Can be used to access specific 3d object in a scene by calling the getChildByName method on the parent ObjectContainer3D.
      See also
      away3d.containers.ObjectContainer3D.getChildByName()


    public var ownCanvas:Boolean = false 
      Defines whether the contents of the 3d object are rendered inside it's own sprite

    public var ownSession:AbstractRenderSession 
      Defines whether the contents of the 3d object are rendered using it's own render session

    parent:ObjectContainer3D[read-write]
      Defines the parent of the 3d object.
      Implementation
       public function get parent():ObjectContainer3D
       public function set parent(value:ObjectContainer3D):void


    position:Number3D[read-write]
      Defines the position of the 3d object, relative to the local coordinates of the parent ObjectContainer3D.
      Implementation
       public function get position():Number3D
       public function set position(value:Number3D):void


    public var projection:Projection 

    rotationX:Number[read-write]
      Defines the euler angle of rotation of the 3d object around the x-axis, relative to the local coordinates of the parent ObjectContainer3D.
      Implementation
       public function get rotationX():Number
       public function set rotationX(value:Number):void


    rotationY:Number[read-write]
      Defines the euler angle of rotation of the 3d object around the y-axis, relative to the local coordinates of the parent ObjectContainer3D.
      Implementation
       public function get rotationY():Number
       public function set rotationY(value:Number):void


    rotationZ:Number[read-write]
      Defines the euler angle of rotation of the 3d object around the z-axis, relative to the local coordinates of the parent ObjectContainer3D.
      Implementation
       public function get rotationZ():Number
       public function set rotationZ(value:Number):void


    scene:Scene3D[read-only]
      Returns the parent scene of the 3d object
      Implementation
       public function get scene():Scene3D


    scenePosition:Number3D[read-only]
      Returns the position of the 3d object, relative to the global coordinates of the Scene3D.
      Implementation
       public function get scenePosition():Number3D


    sceneTransform:Matrix3D[read-only]
      Returns the transformation of the 3d object, relative to the global coordinates of the Scene3D.
      Implementation
       public function get sceneTransform():Matrix3D


    public var sceneTransformed:Boolean 

    public var session:AbstractRenderSession 
      The render session used by the 3d object

    transform:Matrix3D[read-write]
      Defines the transformation of the 3d object, relative to the local coordinates of the parent ObjectContainer3D.
      Implementation
       public function get transform():Matrix3D
       public function set transform(value:Matrix3D):void


    public var useHandCursor:Boolean = false 
      Defines whether a hand cursor is displayed when the mouse rolls over the 3d object.

    public var viewTransform:Matrix3D 

    public var visible:Boolean = true 
      Defines whether the 3d object is visible in the scene

    x:Number[read-write]
      Defines the x coordinate of the 3d object relative to the local coordinates of the parent ObjectContainer3D.
      Implementation
       public function get x():Number
       public function set x(value:Number):void


    y:Number[read-write]
      Defines the y coordinate of the 3d object relative to the local coordinates of the parent ObjectContainer3D.
      Implementation
       public function get y():Number
       public function set y(value:Number):void


    z:Number[read-write]
      Defines the z coordinate of the 3d object relative to the local coordinates of the parent ObjectContainer3D.
      Implementation
       public function get z():Number
       public function set z(value:Number):void

  METHOD DETAIL

    public function addOnDimensionsChange(listener:Function):void 
      Default method for adding a dimensionschanged event listener
      Parameters
       listener:Function - The listener function

    public function addOnMouseDown(listener:Function):void 
      Default method for adding a mouseDown3D event listener
      Parameters
       listener:Function - The listener function

    public function addOnMouseMove(listener:Function):void 
      Default method for adding a mouseMove3D event listener
      Parameters
       listener:Function - The listener function

    public function addOnMouseOut(listener:Function):void 
      Default method for adding a mouseOut3D event listener
      Parameters
       listener:Function - The listener function

    public function addOnMouseOver(listener:Function):void 
      Default method for adding a mouseOver3D event listener
      Parameters
       listener:Function - The listener function

    public function addOnMouseUp(listener:Function):void 
      Default method for adding a mouseUp3D event listener
      Parameters
       listener:Function - The listener function

    public function addOnRadiusChange(listener:Function):void 
      Default method for adding a radiuschanged event listener
      Parameters
       listener:Function - The listener function

    public function addOnSceneChange(listener:Function):void 
      Default method for adding a scenechanged event listener
      Parameters
       listener:Function - The listener function

    public function addOnSceneTransformChange(listener:Function):void 
      Default method for adding a scenetransformchanged event listener
      Parameters
       listener:Function - The listener function

    public function addOnTransformChange(listener:Function):void 
      Default method for adding a transformchanged event listener
      Parameters
       listener:Function - The listener function

    public function clone(object:* = null):* 
      Duplicates the 3d object's properties to another Object3D object
      Parameters
       object:* (default = null) - [optional] The new object instance into which all properties are copied
       Returns
       * - The new object instance with duplicated properties applied

    public function distanceTo(obj:Object3D):Number 
      Calulates the absolute distance between the local 3d object position and the position of the given 3d object
      Parameters
       obj:Object3D - The 3d object to use for calulating the distance
       Returns
       Number - The scalar distance between objects
       See also
       position


    public function lookAt(target:Number3D, upAxis:Number3D = null):void 
      Rotates the 3d object around to face a point defined relative to the local coordinates of the parent ObjectContainer3D.
      Parameters
       target:Number3D - The vector defining the point to be looked at
       upAxis:Number3D (default = null) - An optional vector used to define the desired up orientation of the 3d object after rotation has occurred

    public function moveBackward(distance:Number):void 
      Moves the 3d object backwards along it's local z axis
      Parameters
       distance:Number - The length of the movement

    public function moveDown(distance:Number):void 
      Moves the 3d object backwards along it's local y axis
      Parameters
       distance:Number - The length of the movement

    public function moveForward(distance:Number):void 
      Moves the 3d object forwards along it's local z axis
      Parameters
       distance:Number - The length of the movement

    public function moveLeft(distance:Number):void 
      Moves the 3d object backwards along it's local x axis
      Parameters
       distance:Number - The length of the movement

    public function moveRight(distance:Number):void 
      Moves the 3d object forwards along it's local x axis
      Parameters
       distance:Number - The length of the movement

    public function moveTo(target:Number3D):void 
      Moves the 3d object directly to a point in space
      Parameters
       target:Number3D - A vector defining the new position of the 3d object

    public function moveUp(distance:Number):void 
      Moves the 3d object forwards along it's local y axis
      Parameters
       distance:Number - The length of the movement

    public function pitch(angle:Number):void 
      Rotates the 3d object around it's local x-axis
      Parameters
       angle:Number - The amount of rotation in degrees

    public function primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void 
      Called from the PrimitiveTraverser when passing DrawPrimitive objects to the primitive consumer object
      Parameters
       consumer:IPrimitiveConsumer - The consumer instance
       session:AbstractRenderSession - The render session of the 3d object
       See also
       away3d.core.traverse.PrimitiveTraverser
       away3d.core.draw.DrawPrimitive


    public function removeOnDimensionsChange(listener:Function):void 
      Default method for removing a dimensionschanged event listener
      Parameters
       listener:Function - The listener function

    public function removeOnMouseDown(listener:Function):void 
      Default method for removing a mouseDown3D event listener
      Parameters
       listener:Function - The listener function

    public function removeOnMouseMove(listener:Function):void 
      Default method for removing a mouseMove3D event listener
      Parameters
       listener:Function - The listener function

    public function removeOnMouseOut(listener:Function):void 
      Default method for removing a mouseOut3D event listener
      Parameters
       listener:Function - The listener function

    public function removeOnMouseOver(listener:Function):void 
      Default method for removing a mouseOver3D event listener
      Parameters
       listener:Function - The listener function

    public function removeOnMouseUp(listener:Function):void 
      Default method for removing a mouseUp3D event listener
      Parameters
       listener:Function - The listener function

    public function removeOnRadiusChange(listener:Function):void 
      Default method for removing a radiuschanged event listener
      Parameters
       listener:Function - The listener function

    public function removeOnSceneChange(listener:Function):void 
      Default method for removing a scenechanged event listener
      Parameters
       listener:Function - The listener function

    public function removeOnSceneTransformChange(listener:Function):void 
      Default method for removing a scenetransformchanged event listener
      Parameters
       listener:Function - The listener function

    public function removeOnTransformChange(listener:Function):void 
      Default method for removing a transformchanged event listener
      Parameters
       listener:Function - The listener function

    public function roll(angle:Number):void 
      Rotates the 3d object around it's local z-axis
      Parameters
       angle:Number - The amount of rotation in degrees

    public function rotate(axis:Number3D, angle:Number):void 
      Rotates the 3d object around an axis by a defined angle
      Parameters
       axis:Number3D - The vector defining the axis of rotation
       angle:Number - The amount of rotation in degrees

    public function scale(scale:Number):void 
      Scales the contents of the 3d object.
      Parameters
       scale:Number - The scaling value

    public function tick(time:int):void 
      Called by the TickTraverser. Can be overridden to provide updates to the 3d object based on individual render calls from the renderer.
      Parameters
       time:int - The absolute time at the start of the render cycle
       See also
       away3d.core.traverse.TickTraverser


    public override function toString():String 
      Used to trace the values of a 3d object.
      Returns
      String - A string representation of the 3d object.

    public function translate(axis:Number3D, distance:Number):void 
      Moves the 3d object along a vector by a defined length
      Parameters
       axis:Number3D - The vector defining the axis of movement
       distance:Number - The length of the movement

    public function traverse(traverser:Traverser):void 
      Used when traversing the scenegraph
      Parameters
       traverser:Traverser - The traverser object
       See also
       away3d.core.traverse.BlockerTraverser
       away3d.core.traverse.PrimitiveTraverser
       away3d.core.traverse.ProjectionTraverser
       away3d.core.traverse.TickTraverser


    public function yaw(angle:Number):void 
      Rotates the 3d object around it's local y-axis
      Parameters
       angle:Number - The amount of rotation in degrees
  EVENT DETAIL

    Event object type: away3d.events.Object3DEvent
      Dispatched when the bounding dimensions of the 3d object changes.
      See also
      minX
      maxX
      minY
      maxY
      minZ
      maxZ


    Event object type: away3d.events.MouseEvent3D
      Dispatched when a user presses the let hand mouse button while the cursor is over the 3d object.

    Event object type: away3d.events.MouseEvent3D
      Dispatched when a user moves the cursor while it is over the 3d object.

    Event object type: away3d.events.MouseEvent3D
      Dispatched when a user moves the cursor away from the 3d object.

    Event object type: away3d.events.MouseEvent3D
      Dispatched when a user moves the cursor over the 3d object.

    Event object type: away3d.events.MouseEvent3D
      Dispatched when a user releases the let hand mouse button while the cursor is over the 3d object.

    Event object type: away3d.events.Object3DEvent
      Dispatched when the bounding radius of the 3d object changes.
      See also
      radius


    Event object type: away3d.events.Object3DEvent
      Dispatched when the parent scene of the 3d object changes
      See also
      scene


    Event object type: away3d.events.Object3DEvent
      Dispatched when the scene transform matrix of the 3d object changes.
      See also
      sceneTransform


    Event object type: away3d.events.Object3DEvent
      Dispatched when the local transform matrix of the 3d object changes.
      See also
      transform

  CODE EXAMPLES

    
      Simple Camera/Object Mouse Movement in 3D
      //IN A FUNCTION/LOOP://&lt;/br&gt;&lt;/br&gt;
      myObjectA.moveTo(myObjectB.position);
      //Set the initial position&lt;/br&gt;
      myObjectA.rotationX=mouseX;//set to mouseX rotation&lt;/br&gt;
      myObjectA.rotationY=mouseY;//set to mouseY rotation&lt;/br&gt;
      myObjectA.moveBackwards(1000);//RADIUS or ORBIT&lt;/br&gt;&lt;/br&gt;
      //myObjectA.lookAt(myObjectC.position);//OPTIONAL lookAt some other object&lt;/br&gt;&lt;/br&gt;
      //Pete(flashnine)
      Source Files : http://away3d.com
      Change the moveBackwards(Radius/Orbit). Also try something like mouseX/9 or mouseX*9 ETC
      moveTo(): Move an Object to another Position
      myObjectA.moveTo(myObjectB.position);//A moves to B
      Look at another object on a single Axis
      function lookY(who,enemy,myoffset):void {
      who.rotationY=Math.floor(Math.atan2(who.x - enemy.x,who.z - enemy.z) * 180 / Math.PI) + myoffset;
      }
      //who will look at enemy, only rotating Y axis, myoffset is the number of degrees to offset it
      Away3D ownCanvas, Glow+Blur Filters, and BlendMode
      var filterA:Array=new Array;
      filterA.push(new GlowFilter(0xFFFFFF, 1, 19, 19, 1, 1, false, false));
      var blur:BlurFilter = new BlurFilter();
      blur.blurX = 10;
      blur.blurY = 10;
      blur.quality = BitmapFilterQuality.LOW;
      filterA.push(blur);
      myObjectA.ownCanvas=true;
      myObjectA.filters = filterA;
      myObjectA.blendMode = BlendMode.MULTIPLY;
      How to set values for scaleX, scaleY, scaleZ
      objA.scaleX((100)/(objA.maxX-objA.minX));
      objA.scaleY((100)/(objA.maxY-objA.minY));
      objA.scaleZ((100)/(objA.maxZ-objA.minZ));
      //sets an absolute scale of 100

Object3DEvent
=============
  Package : away3d.events
  Class : public class Object3DEvent
  Inheritance
  PUBLIC PROPERTIES
        : Object3D
 object : Object3D  Description : 
 - A reference to the 3d object that is relevant to the event. (Object3DEvent)

  PUBLIC METHODS
        (Object3DEvent)
        clone():Event - Creates a copy of the Object3DEvent object and sets the value of each property to match that of the original. (Object3DEvent)

  PUBLIC CONSTANTS
        DIMENSIONS_CHANGED : String = "dimensionschanged" - [static] Defines the value of the type property of a dimensionschanged event object. (Object3DEvent)
        RADIUS_CHANGED : String = "radiuschanged" - [static] Defines the value of the type property of a radiuschanged event object. (Object3DEvent)
        SCENE_CHANGED : String = "scenechanged" - [static] Defines the value of the type property of a scenechanged event object. (Object3DEvent)
        SCENETRANSFORM_CHANGED : String = "scenetransformchanged" - [static] Defines the value of the type property of a scenetransformchanged event object. (Object3DEvent)
        TRANSFORM_CHANGED : String = "transformchanged" - [static] Defines the value of the type property of a transformchanged event object. (Object3DEvent)

  PROPERTY DETAIL

    public var object:Object3D 
      A reference to the 3d object that is relevant to the event.
  CONSTRUCTOR DETAIL

    public function Object3DEvent(type:String, object:Object3D) 
      Parameters
       type:String - The type of the event. Possible values are: Object3DEvent.TRANSFORM_CHANGED, Object3DEvent.SCENETRANSFORM_CHANGED, Object3DEvent.SCENE_CHANGED, Object3DEvent.RADIUS_CHANGED and Object3DEvent.DIMENSIONS_CHANGED.
       object:Object3D - A reference to the 3d object that is relevant to the event.
  METHOD DETAIL

    public override function clone():Event 
      Creates a copy of the Object3DEvent object and sets the value of each property to match that of the original.
      Returns
      Event
  CONSTANT DETAIL

    public static const DIMENSIONS_CHANGED:String = "dimensionschanged" 
      Defines the value of the type property of a dimensionschanged event object.

    public static const RADIUS_CHANGED:String = "radiuschanged" 
      Defines the value of the type property of a radiuschanged event object.

    public static const SCENE_CHANGED:String = "scenechanged" 
      Defines the value of the type property of a scenechanged event object.

    public static const SCENETRANSFORM_CHANGED:String = "scenetransformchanged" 
      Defines the value of the type property of a scenetransformchanged event object.

    public static const TRANSFORM_CHANGED:String = "transformchanged" 
      Defines the value of the type property of a transformchanged event object.
  CODE EXAMPLES

    
      There are currently no examples for this class


Object3DLoader
==============
  Package : away3d.loaders
  Class : public class Object3DLoader
  Inheritance : ObjectContainer3D, Object3D
  Subclasses : CubeLoader
  Description : d content

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (ObjectContainer3D)
    (^) children : Array - Returns the children of the container as an array of 3d objects (ObjectContainer3D)
        containerData : ContainerData - Returns the the data container being used by the loaded file. (Object3DLoader)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
        handle : Object3D - [read-only] Returns a 3d object relating to the currently visible model. (Object3DLoader)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
        materialLibrary : MaterialLibrary - Returns the material library being used by the loaded file. (Object3DLoader)
    (^) maxX : Number - Returns the maximum x value of the 3d object (ObjectContainer3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (ObjectContainer3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (ObjectContainer3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (ObjectContainer3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (ObjectContainer3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (ObjectContainer3D)
        mode : String - Returns the current loading mode of the 3d object loader. (Object3DLoader)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
        parse : Function - Function placeholder for the parse method from the correct file loader class. (Object3DLoader)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
        texturePath : String - Returns the filepath to the directory where any required texture files are located. (Object3DLoader)
    (^) transform : Matrix3D (Object3D)
        url : String - Returns the url string of the file being loaded. (Object3DLoader)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (Object3DLoader)
    (^) addChild(child:Object3D):void - Adds a 3d object to the scene as a child of the container (ObjectContainer3D)
    (^) addChildren(... childarray):void - Adds an array of 3d objects to the scene as children of the container (ObjectContainer3D)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
        addOnError(listener:Function):void - Default method for adding a loaderror event listener (Object3DLoader)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
        addOnSuccess(listener:Function):void - Default method for adding a loadsuccess event listener (Object3DLoader)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) clone(object:* = null):* (ObjectContainer3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) getChildByName(name:String):Object3D - Returns a 3d object specified by name from the child array of the container (ObjectContainer3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the 3d object without moving the contents (ObjectContainer3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Object3D)
    (^) removeChild(child:Object3D):void - Removes a 3d object from the child array of the container (ObjectContainer3D)
    (^) removeChildByName(name:String):void - Removes a 3d object from the child array of the container (ObjectContainer3D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
        removeOnError(listener:Function):void - Default method for removing a loaderror event listener (Object3DLoader)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
        removeOnSuccess(listener:Function):void - Default method for removing a loadsuccess event listener (Object3DLoader)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (ObjectContainer3D)
    (^) tick(time:int):void (Object3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (ObjectContainer3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
        onComplete(event:Event):void - Automatically fired on a complete event (Object3DLoader)
        onError(event:IOErrorEvent):void - Automatically fired on an error event. (Object3DLoader)
        onProgress(event:ProgressEvent):void - Automatically fired on a progress event (Object3DLoader)

  EVENTS
    (^) (Object3D)
        (Object3DLoader)
        (Object3DLoader)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PUBLIC CONSTANTS
        LOADING_GEOMETRY : String = "loading_geometry" - Constant value string representing the geometry loading mode of the 3d object loader. (Object3DLoader)
        LOADING_TEXTURES : String = "loading_textures" - Constant value string representing the texture loading mode of the 3d object loader. (Object3DLoader)

  PROPERTY DETAIL

    public var containerData:ContainerData 
      Returns the the data container being used by the loaded file.

    handle:Object3D[read-only]
      Returns a 3d object relating to the currently visible model. While a file is being loaded, this takes the form of the 3d object loader placeholder. The default placeholder is CubeLoader Once the file has been loaded and is ready to view, the handle returns the parsed 3d object file and the placeholder object is swapped in the scenegraph tree.
      Implementation
       public function get handle():Object3D
       See also
       away3d.loaders.CubeLoader


    public var materialLibrary:MaterialLibrary 
      Returns the material library being used by the loaded file.

    public var mode:String 
      Returns the current loading mode of the 3d object loader.

    public var parse:Function 
      Function placeholder for the parse method from the correct file loader class.

    public var texturePath:String 
      Returns the filepath to the directory where any required texture files are located.

    public var url:String 
      Returns the url string of the file being loaded.
  CONSTRUCTOR DETAIL

    public function Object3DLoader(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
  METHOD DETAIL

    public function addOnError(listener:Function):void 
      Default method for adding a loaderror event listener
      Parameters
       listener:Function - The listener function

    public function addOnSuccess(listener:Function):void 
      Default method for adding a loadsuccess event listener
      Parameters
       listener:Function - The listener function

    protected function onComplete(event:Event):void 
      Automatically fired on a complete event
      Parameters
       event:Event

    protected function onError(event:IOErrorEvent):void 
      Automatically fired on an error event.
      Parameters
       event:IOErrorEvent
       See also
       away3d.loaders.utils.TextureLoadQueue


    protected function onProgress(event:ProgressEvent):void 
      Automatically fired on a progress event
      Parameters
       event:ProgressEvent

    public function removeOnError(listener:Function):void 
      Default method for removing a loaderror event listener
      Parameters
       listener:Function - The listener function

    public function removeOnSuccess(listener:Function):void 
      Default method for removing a loadsuccess event listener
      Parameters
       listener:Function - The listener function
  EVENT DETAIL

    Event object type: away3d.events.LoaderEvent
      Dispatched when the 3d object loader fails to load a file.

    Event object type: away3d.events.LoaderEvent
      Dispatched when the 3d object loader completes a file load successfully.
  CONSTANT DETAIL

    public const LOADING_GEOMETRY:String = "loading_geometry" 
      Constant value string representing the geometry loading mode of the 3d object loader.

    public const LOADING_TEXTURES:String = "loading_textures" 
      Constant value string representing the texture loading mode of the 3d object loader.
  CODE EXAMPLES

    
      Clone a loaded Obj
      var loader:Object3DLoader = Obj.load("ship.obj",
      {material:"shiptex_04", name:"fighter", scaling:0.1, y:0, x:0, z:0,
      loadersize:300});
      // add the loader object to the scene
      //
      view.scene.addChild(loader);
      //
      //loader.position = new Number3D(0, 0, 0);
      //
      //
      loader.addOnSuccess(onLoaderSuccess);
      function onLoaderSuccess(event:Event):void {
      var fighter:Object3D = loader.handle.clone();
      view.scene.addChild(fighter);
      fighter.position = new Number3D(300, 0, 300);
      }
      *Lesson_Basic_12_Animation.fla
      //ogre.md2 can be downloaded here:
      //http://www.away3d.com/download/ogre.zip
      // import core library
      import away3d.core.scene.*;
      // import file format loaders
      import away3d.loaders.*;
      import away3d.core.mesh.*;
      // create a 3D-viewport
      var view:View3D = new View3D({x:300, y:200});
      // add viewport to the stage
      addChild(view);
      // start mesh loading
      var loader:Object3DLoader = Md2.load("resources/ogre.md2", {material:"turtle_texture", name:"turtle", scaling:0.1, y:50, x:10, z:10, loadersize:300});
      // add the loader object to the scene
      view.scene.addChild(loader);
      loader.addOnSuccess(onLoaderSuccess);
      function onLoaderSuccess(event:Event):void {
      //    (loader.result as Mesh).frame = "crattack002";
      //    (loader.result as Mesh).play({prefix:"stand", fps:12});
      (loader.result as Mesh).play({prefix:"run", smooth:true, loop:true, fps:12});
      }
      // every frame
      addEventListener(Event.ENTER_FRAME, onEnterFrame);
      function onEnterFrame(event:Event):void {
      // rotate loader or mesh around Y-axis
      loader.handle.rotationY = getTimer() / 100;
      // rerender viewport on each frame
      view.scene.updateTime();
      view.render();
      }
      From Lesson_Basic_12_Animation.fla
      Load a 3D file (like Md2 or OBJ)
      import away3d.loaders.*;
      var loader:Object3DLoader;
      //loader = Obj.load("SeaTurtle.obj", {material:{bitmap:"turtle_texture", lighting:true}, name:"turtle", scaling:1, y:50, x:0, z:0, rotationX:-90, loadersize:300});//load OBJ
      loader = Md2.load("tris.md2", {material:{bitmap:"turtle_texture", lighting:true}, name:"turtle", scaling:1, y:50, x:0, z:0, rotationX:-90, loadersize:300});//load MD2
      *Lesson_Basic_03_Meshes.fla
      // import core library
      import away3d.core.scene.*;
      // import file format loaders
      import away3d.loaders.*;
      // create a 3D-viewport
      var view:View3D = new View3D({x:300, y:200});
      // add viewport to the stage
      addChild(view);
      // start mesh loading
      var loader:Object3DLoader = Obj.load("resources/turtle.obj", {material:"turtle_texture", name:"turtle", scaling:0.1, y:50, x:10, z:10, rotationX:-90, loadersize:300});
      // add the loader object to the scene
      view.scene.addChild(loader);
      // every frame
      addEventListener(Event.ENTER_FRAME, onEnterFrame);
      function onEnterFrame(event:Event):void {
      // rotate loader or mesh around Y-axis
      loader.handle.rotationY = getTimer() / 100;
      // rerender viewport on each frame
      view.render();
      }
      From Lesson_Basic_03_Meshes.fla

ObjectContainer3D
=================
  Package : away3d.containers
  Class : public class ObjectContainer3D
  Inheritance : Object3D
  Implements : IPrimitiveProvider
  Subclasses : DebugObjectContainer3D, LODObject, Object3DLoader, Scene3D, Trident
  Description : d objects in a scene

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
        boundingRadius : Number - [read-only] Returns the bounding radius of the 3d object (ObjectContainer3D)
        children : Array - [read-only] Returns the children of the container as an array of 3d objects (ObjectContainer3D)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
        maxX : Number - [read-only] Returns the maximum x value of the 3d object (ObjectContainer3D)
        maxY : Number - [read-only] Returns the maximum y value of the 3d object (ObjectContainer3D)
        maxZ : Number - [read-only] Returns the maximum z value of the 3d object (ObjectContainer3D)
        minX : Number - [read-only] Returns the minimum x value of the 3d object (ObjectContainer3D)
        minY : Number - [read-only] Returns the minimum y value of the 3d object (ObjectContainer3D)
        minZ : Number - [read-only] Returns the minimum z value of the 3d object (ObjectContainer3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (ObjectContainer3D)
        addChild(child:Object3D):void - Adds a 3d object to the scene as a child of the container (ObjectContainer3D)
        addChildren(... childarray):void - Adds an array of 3d objects to the scene as children of the container (ObjectContainer3D)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
        clone(object:* = null):* (ObjectContainer3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
        getChildByName(name:String):Object3D - Returns a 3d object specified by name from the child array of the container (ObjectContainer3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
        movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the 3d object without moving the contents (ObjectContainer3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Object3D)
        removeChild(child:Object3D):void - Removes a 3d object from the child array of the container (ObjectContainer3D)
        removeChildByName(name:String):void - Removes a 3d object from the child array of the container (ObjectContainer3D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
        scale(scale:Number):void - Scales the contents of the 3d object. (ObjectContainer3D)
    (^) tick(time:int):void (Object3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
        traverse(traverser:Traverser):void - Used when traversing the scenegraph (ObjectContainer3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PROPERTY DETAIL

    boundingRadius:Number[read-only]
      Returns the bounding radius of the 3d object
      Implementation
       public function get boundingRadius():Number


    children:Array[read-only]
      Returns the children of the container as an array of 3d objects
      Implementation
       public function get children():Array


    maxX:Number[read-only]
      Returns the maximum x value of the 3d object
      Implementation
       public function get maxX():Number


    maxY:Number[read-only]
      Returns the maximum y value of the 3d object
      Implementation
       public function get maxY():Number


    maxZ:Number[read-only]
      Returns the maximum z value of the 3d object
      Implementation
       public function get maxZ():Number


    minX:Number[read-only]
      Returns the minimum x value of the 3d object
      Implementation
       public function get minX():Number


    minY:Number[read-only]
      Returns the minimum y value of the 3d object
      Implementation
       public function get minY():Number


    minZ:Number[read-only]
      Returns the minimum z value of the 3d object
      Implementation
       public function get minZ():Number

  CONSTRUCTOR DETAIL

    public function ObjectContainer3D(init:Object = null, ... childarray) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties
       ... childarray - An array of 3d objects to be added as children of the container on instatiation
  METHOD DETAIL

    public function addChild(child:Object3D):void 
      Adds a 3d object to the scene as a child of the container
      Parameters
       child:Object3D - The 3d object to be added
       Throws
       - ObjectContainer3D.addChild(null)

    public function addChildren(... childarray):void 
      Adds an array of 3d objects to the scene as children of the container
      Parameters
       ... childarray - An array of 3d objects to be added

    public override function clone(object:* = null):* 
      Duplicates the 3d object's properties to another ObjectContainer3D object
      Parameters
       object:* (default = null) - [optional] The new object instance into which all properties are copied
       Returns
       * - The new object instance with duplicated properties applied

    public function getChildByName(name:String):Object3D 
      Returns a 3d object specified by name from the child array of the container
      Parameters
       name:String - The name of the 3d object to be returned
       Returns
       Object3D - The 3d object, or null if no such child object exists with the specified name

    public function movePivot(dx:Number, dy:Number, dz:Number):void 
      Moves the origin point of the 3d object without moving the contents
      Parameters
       dx:Number - The amount of movement along the local x axis
       dy:Number - The amount of movement along the local y axis
       dz:Number - The amount of movement along the local z axis

    public function removeChild(child:Object3D):void 
      Removes a 3d object from the child array of the container
      Parameters
       child:Object3D - The 3d object to be removed
       Throws
       - ObjectContainer3D.removeChild(null)

    public function removeChildByName(name:String):void 
      Removes a 3d object from the child array of the container
      Parameters
       name:String - The name of the 3d object to be removed

    public override function scale(scale:Number):void 
      Scales the contents of the 3d object.
      Parameters
       scale:Number - The scaling value

    public override function traverse(traverser:Traverser):void 
      Used when traversing the scenegraph
      Parameters
       traverser:Traverser - The traverser object
  CODE EXAMPLES

    
      Using ObjectContainer3D (groups)
      groupA=new ObjectContainer3D(objA,objB,objC);
      //adds three objects to one group
      *Lesson_Basic_04_Containers.fla
      // import core library
      import away3d.core.scene.*;
      // import geometry primitives
      import away3d.objects.*;
      // create a 3D-viewport
      var view:View3D = new View3D({x:300, y:200});
      // add viewport to the stage
      addChild(view);
      // create carousel elements
      var plane:Object3D = new RegularPolygon({material:"grey#white", radius:500, y:-100, pushback:true});
      var sphere1:Object3D = new Sphere({material:"blue#cyan", radius:50, y:75});
      var sphere2:Object3D = new Sphere({material:"blue.jpg", radius:50, y:-75});
      var cube1:Object3D = new Cube({material:"green#lime", y:75});
      var cube2:Object3D = new Cube({material:"green.jpg", y:-75});
      var spheres:Object3D = new ObjectContainer3D({x:400}, sphere1, sphere2);
      var cubes:Object3D = new ObjectContainer3D({x:-400}, cube1, cube2);
      var torus1:Object3D = new Torus({material:"red.jpg", z:-400});
      var torus2:Object3D = new Torus({material:"yellow.jpg", z:400});
      // create carousel of the elements
      var carousel:Object3D = new ObjectContainer3D(spheres, cubes, torus1, torus2, plane);
      // add carousel to the scene
      view.scene.addChild(carousel);
      // every frame
      addEventListener(Event.ENTER_FRAME, onEnterFrame);
      function onEnterFrame(event:Event):void {
      // rotate carousel
      carousel.rotationY = getTimer() / 100;
      // rotate pairs
      spheres.rotationZ = getTimer() / 10;
      cubes.rotationX = getTimer() / 10;
      // lift tori
      torus1.y = Math.sin(getTimer() / 1000) * 50;
      torus2.y = Math.cos(getTimer() / 1000) * 50;
      // rerender viewport
      view.render();
      }
      From Lesson_Basic_04_Containers.fla

ObjectData
==========
  Package : away3d.loaders.data
  Class : public class ObjectData
  Subclasses : ContainerData, MeshData
  Description : d object

  PUBLIC PROPERTIES
        name : String - The name of the 3d object used as a unique reference. (ObjectData)
        transform : Matrix3D - The 3d transformation matrix for the 3d object (ObjectData)

  PROPERTY DETAIL

    public var name:String 
      The name of the 3d object used as a unique reference.

    public var transform:Matrix3D 
      The 3d transformation matrix for the 3d object
  CODE EXAMPLES

    
      There are currently no examples for this class


Panel
=====
  Package : away3d.test
  Class : public class Panel
  Inheritance
  PUBLIC METHODS
        -  (Panel)

  CONSTRUCTOR DETAIL

    public function Panel(x:int, y:int, width:int, height:int, alpha:Number = 0.3) 
      Parameters
       x:int
       y:int
       width:int
       height:int
       alpha:Number (default = 0.3)
  CODE EXAMPLES

    
      There are currently no examples for this class


PhongBitmapMaterial
===================
  Package : away3d.materials
  Class : public class PhongBitmapMaterial
  Inheritance : CompositeMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - Defines an alpha value for the layer container. (CompositeMaterial)
    (^) blendMode : String - Defines a blendMode value for the layer container. (CompositeMaterial)
    (^) color : uint - Defines a colored tint for the layer container. (CompositeMaterial)
    (^) materials : Array - An array of bitmapmaterial objects to be overlayed sequentially. (CompositeMaterial)
        shininess : Number - The exponential dropoff value used for specular highlights. (PhongBitmapMaterial)
        specular : Number - Coefficient for specular light level. (PhongBitmapMaterial)
    (^) visible : Boolean - Indicates whether the material is visible (CompositeMaterial)

  PROTECTED PROPERTIES
        (PhongBitmapMaterial)
    (^) renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (CompositeMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (CompositeMaterial)
    (^) updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (CompositeMaterial)

  PROTECTED METHODS
    (^) setColorTransform():void (CompositeMaterial)

  PROPERTY DETAIL

    shininess:Number[read-write]
      The exponential dropoff value used for specular highlights.
      Implementation
       public function get shininess():Number
       public function set shininess(value:Number):void


    specular:Number[read-write]
      Coefficient for specular light level.
      Implementation
       public function get specular():Number
       public function set specular(value:Number):void

  CONSTRUCTOR DETAIL

    public function PhongBitmapMaterial(bitmap:BitmapData, init:Object = null) 
      Parameters
       bitmap:BitmapData - The bitmapData object to be used as the material's texture.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       shininess:Number (default = 20)
       specular:Number (default = 0.7, min:0, max:1)
  CODE EXAMPLES

    
      There are currently no examples for this class


PhongBitmapMaterialCache
========================
  Package : away3d.materials
  Class : public class PhongBitmapMaterialCache
  Inheritance : BitmapMaterialContainer, BitmapMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - Defines an alpha value for the texture bitmap. (BitmapMaterial)
    (^) bitmap : BitmapData - Returns the bitmapData object being used as the material texture. (BitmapMaterial)
    (^) blendMode : String - Defines a blendMode value for the texture bitmap. (BitmapMaterial)
    (^) cache : Boolean - Defines whether each created bitmapData surface is to be cached, or updated every frame. (BitmapMaterialContainer)
    (^) color : uint - Defines a colored tint for the texture bitmap. (BitmapMaterial)
    (^) debug : Boolean = false - Toggles debug mode: textured triangles are drawn with white outlines, precision correction triangles are drawn with blue outlines. (BitmapMaterial)
    (^) height : Number - Returns the height of the bitmapData being used as the material texture. (BitmapMaterial)
    (^) materials : Array - An array of bitmapmaterial objects to be overlayed sequentially. (BitmapMaterialContainer)
    (^) precision : Number - Corrects distortion caused by the affine transformation (non-perpective) of textures. (BitmapMaterial)
    (^) repeat : Boolean = false - Determines if texture bitmap will tile in uv-space (BitmapMaterial)
        shininess : Number - The exponential dropoff value used for specular highlights. (PhongBitmapMaterialCache)
    (^) smooth : Boolean = false - Determines if texture bitmap is smoothed (bilinearly filtered) when drawn to screen. (BitmapMaterial)
        specular : Number - Coefficient for specular light level. (PhongBitmapMaterialCache)
    (^) transparent : Boolean - Defines whether the caching bitmapData objects are transparent (BitmapMaterialContainer)
    (^) visible : Boolean - Indicates whether the material is visible (BitmapMaterial)
    (^) width : Number - Returns the width of the bitmapData being used as the material texture. (BitmapMaterial)

  PROTECTED PROPERTIES
        (PhongBitmapMaterialCache)
    (^) addOnResize(listener:Function):void - Default method for adding a materialresize event listener (BitmapMaterial)
    (^) getPixel32(u:Number, v:Number):uint - Returns the argb value of the bitmapData pixel at the given u v coordinate. (BitmapMaterial)
    (^) removeOnResize(listener:Function):void - Default method for removing a materialresize event listener (BitmapMaterial)
    (^) renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (BitmapMaterialContainer)
    (^) renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (BitmapMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (BitmapMaterial)
    (^) update():void - Clear and updates the currrent bitmapData surface on all faces. (BitmapMaterialContainer)
    (^) updateMaterial(source:Object3D, view:View3D):void (BitmapMaterialContainer)

  PROTECTED METHODS
    (^) getMapping(tri:DrawTriangle):Matrix - Calculates the mapping matrix required to draw the triangle texture to screen. (BitmapMaterialContainer)
    (^) setColorTransform():void (BitmapMaterial)
    (^) updateRenderBitmap():void (BitmapMaterialContainer)

  EVENTS
    (^) (BitmapMaterial)

  PROPERTY DETAIL

    shininess:Number[read-write]
      The exponential dropoff value used for specular highlights.
      Implementation
       public function get shininess():Number
       public function set shininess(value:Number):void


    specular:Number[read-write]
      Coefficient for specular light level.
      Implementation
       public function get specular():Number
       public function set specular(value:Number):void

  CONSTRUCTOR DETAIL

    public function PhongBitmapMaterialCache(bitmap:BitmapData, init:Object = null) 
      Parameters
       bitmap:BitmapData - The bitmapData object to be used as the material's texture.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       shininess:Number (default = 20)
       specular:Number (default = 0.7, min:0, max:1)
  CODE EXAMPLES

    
      There are currently no examples for this class


PhongColorMaterial
==================
  Package : away3d.materials
  Class : public class PhongColorMaterial
  Inheritance : CompositeMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - Defines an alpha value for the layer container. (CompositeMaterial)
    (^) blendMode : String - Defines a blendMode value for the layer container. (CompositeMaterial)
    (^) color : uint - Defines a colored tint for the layer container. (CompositeMaterial)
    (^) materials : Array - An array of bitmapmaterial objects to be overlayed sequentially. (CompositeMaterial)
        shininess : Number - The exponential dropoff value used for specular highlights. (PhongColorMaterial)
        specular : Number - Coefficient for specular light level. (PhongColorMaterial)
    (^) visible : Boolean - Indicates whether the material is visible (CompositeMaterial)

  PROTECTED PROPERTIES
        (PhongColorMaterial)
    (^) renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (CompositeMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (CompositeMaterial)
    (^) updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (CompositeMaterial)

  PROTECTED METHODS
        setColorTransform():void (PhongColorMaterial)

  PROPERTY DETAIL

    shininess:Number[read-write]
      The exponential dropoff value used for specular highlights.
      Implementation
       public function get shininess():Number
       public function set shininess(value:Number):void


    specular:Number[read-write]
      Coefficient for specular light level.
      Implementation
       public function get specular():Number
       public function set specular(value:Number):void

  CONSTRUCTOR DETAIL

    public function PhongColorMaterial(color:*, init:Object = null) 
      Parameters
       color:* - A string, hex value or colorname representing the color of the material.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       shininess:Number (default = 20)
       specular:Number (default = 0.7, min:0, max:1)
  METHOD DETAIL

    protected override function setColorTransform():void 
      Updates the colortransform object applied to the texture from the color and alpha properties.
      See also
      away3d.materials.CompositeMaterial.color
      away3d.materials.CompositeMaterial.alpha

  CODE EXAMPLES

    
      There are currently no examples for this class


PhongColorMaterialCache
=======================
  Package : away3d.materials
  Class : public class PhongColorMaterialCache
  Inheritance : BitmapMaterialContainer, BitmapMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - Defines an alpha value for the texture bitmap. (BitmapMaterial)
    (^) bitmap : BitmapData - Returns the bitmapData object being used as the material texture. (BitmapMaterial)
    (^) blendMode : String - Defines a blendMode value for the texture bitmap. (BitmapMaterial)
    (^) cache : Boolean - Defines whether each created bitmapData surface is to be cached, or updated every frame. (BitmapMaterialContainer)
    (^) color : uint - Defines a colored tint for the texture bitmap. (BitmapMaterial)
    (^) debug : Boolean = false - Toggles debug mode: textured triangles are drawn with white outlines, precision correction triangles are drawn with blue outlines. (BitmapMaterial)
    (^) height : Number - Returns the height of the bitmapData being used as the material texture. (BitmapMaterial)
    (^) materials : Array - An array of bitmapmaterial objects to be overlayed sequentially. (BitmapMaterialContainer)
    (^) precision : Number - Corrects distortion caused by the affine transformation (non-perpective) of textures. (BitmapMaterial)
    (^) repeat : Boolean = false - Determines if texture bitmap will tile in uv-space (BitmapMaterial)
        shininess : Number - The exponential dropoff value used for specular highlights. (PhongColorMaterialCache)
    (^) smooth : Boolean = false - Determines if texture bitmap is smoothed (bilinearly filtered) when drawn to screen. (BitmapMaterial)
        specular : Number - Coefficient for specular light level. (PhongColorMaterialCache)
    (^) transparent : Boolean - Defines whether the caching bitmapData objects are transparent (BitmapMaterialContainer)
    (^) visible : Boolean - Indicates whether the material is visible (BitmapMaterial)
    (^) width : Number - Returns the width of the bitmapData being used as the material texture. (BitmapMaterial)

  PROTECTED PROPERTIES
        (PhongColorMaterialCache)
    (^) addOnResize(listener:Function):void - Default method for adding a materialresize event listener (BitmapMaterial)
    (^) getPixel32(u:Number, v:Number):uint - Returns the argb value of the bitmapData pixel at the given u v coordinate. (BitmapMaterial)
    (^) removeOnResize(listener:Function):void - Default method for removing a materialresize event listener (BitmapMaterial)
    (^) renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (BitmapMaterialContainer)
    (^) renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (BitmapMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (BitmapMaterial)
    (^) update():void - Clear and updates the currrent bitmapData surface on all faces. (BitmapMaterialContainer)
    (^) updateMaterial(source:Object3D, view:View3D):void (BitmapMaterialContainer)

  PROTECTED METHODS
    (^) getMapping(tri:DrawTriangle):Matrix - Calculates the mapping matrix required to draw the triangle texture to screen. (BitmapMaterialContainer)
        setColorTransform():void (PhongColorMaterialCache)
    (^) updateRenderBitmap():void (BitmapMaterialContainer)

  EVENTS
    (^) (BitmapMaterial)

  PROPERTY DETAIL

    shininess:Number[read-write]
      The exponential dropoff value used for specular highlights.
      Implementation
       public function get shininess():Number
       public function set shininess(value:Number):void


    specular:Number[read-write]
      Coefficient for specular light level.
      Implementation
       public function get specular():Number
       public function set specular(value:Number):void

  CONSTRUCTOR DETAIL

    public function PhongColorMaterialCache(color:*, init:Object = null) 
      Parameters
       color:* - A string, hex value or colorname representing the color of the material.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       shininess:Number (default = 20)
       specular:Number (default = 0.7, min:0, max:1)
  METHOD DETAIL

    protected override function setColorTransform():void 
      Updates the colortransform object applied to the texture from the color and alpha properties.
      See also
      away3d.materials.BitmapMaterialContainer.color
      away3d.materials.BitmapMaterialContainer.alpha

  CODE EXAMPLES

    
      There are currently no examples for this class


PhongMovieMaterial
==================
  Package : away3d.materials
  Class : public class PhongMovieMaterial
  Inheritance : CompositeMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - Defines an alpha value for the layer container. (CompositeMaterial)
    (^) blendMode : String - Defines a blendMode value for the layer container. (CompositeMaterial)
    (^) color : uint - Defines a colored tint for the layer container. (CompositeMaterial)
    (^) materials : Array - An array of bitmapmaterial objects to be overlayed sequentially. (CompositeMaterial)
        shininess : Number - The exponential dropoff value used for specular highlights. (PhongMovieMaterial)
        specular : Number - Coefficient for specular light level. (PhongMovieMaterial)
    (^) visible : Boolean - Indicates whether the material is visible (CompositeMaterial)

  PROTECTED PROPERTIES
        (PhongMovieMaterial)
    (^) renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (CompositeMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (CompositeMaterial)
    (^) updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (CompositeMaterial)

  PROTECTED METHODS
    (^) setColorTransform():void (CompositeMaterial)

  PROPERTY DETAIL

    shininess:Number[read-write]
      The exponential dropoff value used for specular highlights.
      Implementation
       public function get shininess():Number
       public function set shininess(value:Number):void


    specular:Number[read-write]
      Coefficient for specular light level.
      Implementation
       public function get specular():Number
       public function set specular(value:Number):void

  CONSTRUCTOR DETAIL

    public function PhongMovieMaterial(movie:Sprite, init:Object = null) 
      Parameters
       movie:Sprite - The movieclip to be used as the material's texture.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       shininess:Number (default = 20)
       specular:Number (default = 0.7, min:0, max:1)
  CODE EXAMPLES

    
      There are currently no examples for this class


Plane
=====
  Package : away3d.primitives
  Class : public class Plane
  Inheritance : AbstractPrimitive, Mesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
        height : Number - Defines the height of the plane. (Plane)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractPrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
        segmentsH : Number - Defines the number of vertical segments that make up the plane. (Plane)
        segmentsW : Number - Defines the number of horizontal segments that make up the plane. (Plane)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
        width : Number - Defines the width of the plane. (Plane)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
        yUp : Boolean - Defines whether the coordinates of the plane points use a yUp orientation (true) or a zUp orientation (false). (Plane)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (Plane)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (Plane)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
        vertex(w:int, h:int):Vertex - Returns the vertex object specified by the grid position of the mesh. (Plane)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    height:Number[read-write]
      Defines the height of the plane. Defaults to 100, or the height of the uv material (if one is applied).
      Implementation
       public function get height():Number
       public function set height(value:Number):void


    segmentsH:Number[read-write]
      Defines the number of vertical segments that make up the plane. Defaults to 1.
      Implementation
       public function get segmentsH():Number
       public function set segmentsH(value:Number):void


    segmentsW:Number[read-write]
      Defines the number of horizontal segments that make up the plane. Defaults to 1.
      Implementation
       public function get segmentsW():Number
       public function set segmentsW(value:Number):void


    width:Number[read-write]
      Defines the width of the plane. Defaults to 100, or the width of the uv material (if one is applied).
      Implementation
       public function get width():Number
       public function set width(value:Number):void


    yUp:Boolean[read-write]
      Defines whether the coordinates of the plane points use a yUp orientation (true) or a zUp orientation (false). Defaults to true.
      Implementation
       public function get yUp():Boolean
       public function set yUp(value:Boolean):void

  CONSTRUCTOR DETAIL

    public function Plane(init:Object = null) 
      Constructor for a plane object. The init object parameters are : 'width'/'height' defines the size of the plane, 'segments' defines the number of segments for width and height unless overriden, 'segmentsW' defines number segments the plane is split into horizontally and 'segmentsH' how many segments plane is split into vertically.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       width:Number (default = 0, min:0)
       height:Number (default = 0, min:0)
       segments:Int (default = 1, min:1)
       segmentsW:Int (default = segments, min:1)
       segmentsH:Int (default = segments, min:1)
       yUp:Boolean (default = true)
  METHOD DETAIL

    public override function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.

    public function vertex(w:int, h:int):Vertex 
      Returns the vertex from a 2 dimensional representation of the plane's vertex array.
      I=horizontal reference.
      J=vertical reference.
      Returns the vertex object specified by the grid position of the mesh.
      Parameters
       w:int - The horizontal position on the primitive mesh.
       h:int - The vertical position on the primitive mesh.
       Returns
       Vertex
  CODE EXAMPLES

    
      Creating a Plane
      myPlaneA=new Plane({material:{bitmap:"turtle_texture"},width:500,height:500,segmentsW:3,segmentsH:3});
      myPlaneA.rotationX=90;//to face forward

Plane3D
=======
  Package : away3d.core.draw
  Class : public class Plane3D

  PUBLIC PROPERTIES
        a : Number -  (Plane3D)
        b : Number -  (Plane3D)
        c : Number -  (Plane3D)
        d : Number -  (Plane3D)

  PUBLIC METHODS
        -  (Plane3D)
        distance(v:Vertex):Number -  (Plane3D)
        from3points(v0:Vertex, v1:Vertex, v2:Vertex):Plane3D - [static] (Plane3D)
        side(v:Vertex):Number -  (Plane3D)

  PROPERTY DETAIL

    public var a:Number 

    public var b:Number 

    public var c:Number 

    public var d:Number 
  CONSTRUCTOR DETAIL

    public function Plane3D(a:Number, b:Number, c:Number, d:Number) 
      Parameters
       a:Number
       b:Number
       c:Number
       d:Number
  METHOD DETAIL

    public function distance(v:Vertex):Number 
      Parameters
       v:Vertex
       Returns
       Number

    public static function from3points(v0:Vertex, v1:Vertex, v2:Vertex):Plane3D 
      Parameters
       v0:Vertex
       v1:Vertex
       v2:Vertex
       Returns
       Plane3D

    public function side(v:Vertex):Number 
      Parameters
       v:Vertex
       Returns
       Number
  CODE EXAMPLES

    
      There are currently no examples for this class


PointLight
==========
  Package : away3d.core.light
  Class : public class PointLight
  Inheritance : LightPrimitive
  Description : Point light primitive

  PUBLIC PROPERTIES
    (^) ambient : Number - Coefficient for the ambient light intensity. (LightPrimitive)
    (^) ambientBitmap : BitmapData - Lightmap for ambient intensity. (LightPrimitive)
    (^) ambientDiffuseBitmap : BitmapData - Combined lightmap for ambient and diffuse intensities. (LightPrimitive)
    (^) blue : Number - Blue component level. (LightPrimitive)
    (^) diffuse : Number - Coefficient for the diffuse light intensity. (LightPrimitive)
    (^) diffuseBitmap : BitmapData - Lightmap for diffuse intensity. (LightPrimitive)
    (^) green : Number - Green component level. (LightPrimitive)
        light : PointLight3D (PointLight)
    (^) red : Number - Red component level. (LightPrimitive)
    (^) specular : Number - Coefficient for the specular light intensity. (LightPrimitive)
    (^) specularBitmap : BitmapData - Lightmap for specular intensity. (LightPrimitive)
        x : Number (PointLight)
        y : Number (PointLight)
        z : Number (PointLight)

  PROPERTY DETAIL

    public var light:PointLight3D 
      A reference to the PointLight3D object used by the light primitive.

    public var x:Number 
      The x coordinates of the PointLight3D object.

    public var y:Number 
      The y coordinates of the PointLight3D object.

    public var z:Number 
      The z coordinates of the PointLight3D object.
  CODE EXAMPLES

    
      There are currently no examples for this class


PointLight3D
============
  Package : away3d.lights
  Class : public class PointLight3D
  Inheritance : Object3D
  Implements : IClonable, ILightProvider, IPrimitiveProvider
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
        ambient : Number - Defines a coefficient for the ambient light intensity. (PointLight3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (Object3D)
        brightness : Number - Defines a coefficient for the overall light intensity. (PointLight3D)
        color : int - Defines the color of the light object. (PointLight3D)
        debug : Boolean - Toggles debug mode: light object is visualised in the scene. (PointLight3D)
        diffuse : Number - Defines a coefficient for the diffuse light intensity. (PointLight3D)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) maxX : Number - Returns the maximum x value of the 3d object (Object3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (Object3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (Object3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (Object3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (Object3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (Object3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
        specular : Number - Defines a coefficient for the specular light intensity. (PointLight3D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (PointLight3D)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
        clone(object:* = null):* (PointLight3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
        light(consumer:ILightConsumer):void (PointLight3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
        primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (PointLight3D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (Object3D)
    (^) tick(time:int):void (Object3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PROPERTY DETAIL

    public var ambient:Number 
      Defines a coefficient for the ambient light intensity.

    public var brightness:Number 
      Defines a coefficient for the overall light intensity.

    public var color:int 
      Defines the color of the light object.

    public var debug:Boolean 
      Toggles debug mode: light object is visualised in the scene.

    public var diffuse:Number 
      Defines a coefficient for the diffuse light intensity.

    public var specular:Number 
      Defines a coefficient for the specular light intensity.
  CONSTRUCTOR DETAIL

    public function PointLight3D(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       color:Color (default = 0xFFFFFF)
       ambient:Number (default = 1)
       diffuse:Number (default = 1)
       specular:Number (default = 1)
       brightness:Number (default = 1)
       debug:Boolean (default = false)
  METHOD DETAIL

    public override function clone(object:* = null):* 
      Duplicates the light object's properties to another PointLight3D object
      Parameters
       object:* (default = null) - [optional] The new object instance into which all properties are copied
       Returns
       * - The new object instance with duplicated properties applied

    public function light(consumer:ILightConsumer):void 
      Called from the PrimitiveTraverser when passing LightPrimitive objects to the light consumer object
      Parameters
       consumer:ILightConsumer - The consumer instance.

    public override function primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void 
      Called from the PrimitiveTraverser when passing DrawPrimitive objects to the primitive consumer object
      Parameters
       consumer:IPrimitiveConsumer - The consumer instance
       session:AbstractRenderSession - The render session of the 3d object
  CODE EXAMPLES

    
      There are currently no examples for this class


PrimitiveArray
==============
  Package : away3d.core.draw
  Class : public class PrimitiveArray
  Implements : IPrimitiveConsumer
  Description : 

  PUBLIC PROPERTIES
        blockers : Array - [write-only] Defines the array of blocker primitives to be used on the drawing primitives. (PrimitiveArray)
        clip : Clipping - [write-only] Defines the clipping object to be used on the drawing primitives. (PrimitiveArray)

  PUBLIC METHODS
        list():Array - A list of primitives that have been clipped and blocked. (PrimitiveArray)
        primitive(pri:DrawPrimitive):void - Adds a drawing primitive to the primitive consumer (PrimitiveArray)

  PROPERTY DETAIL

    blockers:Array[write-only]
      Defines the array of blocker primitives to be used on the drawing primitives.
      Implementation
       public function set blockers(value:Array):void


    clip:Clipping[write-only]
      Defines the clipping object to be used on the drawing primitives.
      Implementation
       public function set clip(value:Clipping):void

  METHOD DETAIL

    public function list():Array 
      A list of primitives that have been clipped and blocked.
      Returns
      Array - An array containing the primitives to be rendered.

    public function primitive(pri:DrawPrimitive):void 
      Adds a drawing primitive to the primitive consumer
      Parameters
       pri:DrawPrimitive - The drawing primitive to add.
  CODE EXAMPLES

    
      There are currently no examples for this class


PrimitiveQuadrantTree
=====================
  Package : away3d.core.draw
  Class : public final class PrimitiveQuadrantTree
  Implements : IPrimitiveConsumer
  Description : Quadrant tree for storing drawing primitives

  PUBLIC PROPERTIES
        clip : Clipping - Defines the clipping object to be used on the drawing primitives. (PrimitiveQuadrantTree)

  PUBLIC METHODS
        get(pri:DrawPrimitive, ex:Object3D = null):Array - Returns an array containing all primiives overlapping the specifed primitive's quadrant. (PrimitiveQuadrantTree)
        list():Array - A list of primitives that have been clipped. (PrimitiveQuadrantTree)
        primitive(pri:DrawPrimitive):void - Adds a drawing primitive to the primitive consumer (PrimitiveQuadrantTree)
        remove(pri:DrawPrimitive):void - removes a drawing primitive from the quadrant tree. (PrimitiveQuadrantTree)
        render():void - Calls the render function on all primitives in the quadrant tree (PrimitiveQuadrantTree)

  PROPERTY DETAIL

    clip:Clipping[read-write]
      Defines the clipping object to be used on the drawing primitives.
      Implementation
       public function get clip():Clipping
       public function set clip(value:Clipping):void

  METHOD DETAIL

    public function get(pri:DrawPrimitive, ex:Object3D = null):Array 
      Returns an array containing all primiives overlapping the specifed primitive's quadrant.
      Parameters
       pri:DrawPrimitive - The drawing primitive to check.
       ex:Object3D (default = null) - [optional] Excludes primitives that are children of the 3d object.
       Returns
       Array - An array of drawing primitives.

    public function list():Array 
      A list of primitives that have been clipped.
      Returns
      Array - An array containing the primitives to be rendered.

    public function primitive(pri:DrawPrimitive):void 
      Adds a drawing primitive to the primitive consumer
      Parameters
       pri:DrawPrimitive - The drawing primitive to add.

    public function remove(pri:DrawPrimitive):void 
      removes a drawing primitive from the quadrant tree.
      Parameters
       pri:DrawPrimitive - The drawing primitive to remove.

    public function render():void 
      Calls the render function on all primitives in the quadrant tree
  CODE EXAMPLES

    
      There are currently no examples for this class


PrimitiveQuadrantTreeNode
=========================
  Package : away3d.core.draw
  Class : public final class PrimitiveQuadrantTreeNode

  PUBLIC PROPERTIES
        center : Array - Array of primitives that lie in the center of the quadrant. (PrimitiveQuadrantTreeNode)
        create : Function - Placeholder function for creating new quadrant node from a cache of objects. (PrimitiveQuadrantTreeNode)
        leftbottom : PrimitiveQuadrantTreeNode - The quadrant tree node for the bottom left quadrant. (PrimitiveQuadrantTreeNode)
        leftbottomFlag : Boolean - Determines if the bounds of the bottom left quadrant need re-calculating. (PrimitiveQuadrantTreeNode)
        lefttop : PrimitiveQuadrantTreeNode - The quadrant tree node for the top left quadrant. (PrimitiveQuadrantTreeNode)
        lefttopFlag : Boolean - Determines if the bounds of the top left quadrant need re-calculating. (PrimitiveQuadrantTreeNode)
        onlysource : Object3D (PrimitiveQuadrantTreeNode)
        onlysourceFlag : Boolean = true - Determines if the quadrant node contains only one source. (PrimitiveQuadrantTreeNode)
        parent : PrimitiveQuadrantTreeNode - The quadrant parent. (PrimitiveQuadrantTreeNode)
        rightbottom : PrimitiveQuadrantTreeNode - The quadrant tree node for the bottom right quadrant. (PrimitiveQuadrantTreeNode)
        rightbottomFlag : Boolean - Determines if the bounds of the bottom right quadrant need re-calculating. (PrimitiveQuadrantTreeNode)
        righttop : PrimitiveQuadrantTreeNode - The quadrant tree node for the top right quadrant. (PrimitiveQuadrantTreeNode)
        righttopFlag : Boolean - Determines if the bounds of the top right quadrant need re-calculating. (PrimitiveQuadrantTreeNode)
        xdiv : Number - The x coordinate of the quadrant division. (PrimitiveQuadrantTreeNode)
        ydiv : Number - The x coordinate of the quadrant division. (PrimitiveQuadrantTreeNode)

  PUBLIC METHODS
        (PrimitiveQuadrantTreeNode)
        push(pri:DrawPrimitive):void - Adds a primitive to the quadrant (PrimitiveQuadrantTreeNode)
        render(limit:Number):void - Sorts and renders the contents of the quadrant tree (PrimitiveQuadrantTreeNode)
        reset(xdiv:Number, ydiv:Number, width:Number, height:Number):void - Clears the quadrant of all primitives and child nodes (PrimitiveQuadrantTreeNode)

  PROPERTY DETAIL

    public var center:Array 
      Array of primitives that lie in the center of the quadrant.

    public var create:Function 
      Placeholder function for creating new quadrant node from a cache of objects. Saves recreating objects and GC problems.

    public var leftbottom:PrimitiveQuadrantTreeNode 
      The quadrant tree node for the bottom left quadrant.

    public var leftbottomFlag:Boolean 
      Determines if the bounds of the bottom left quadrant need re-calculating.

    public var lefttop:PrimitiveQuadrantTreeNode 
      The quadrant tree node for the top left quadrant.

    public var lefttopFlag:Boolean 
      Determines if the bounds of the top left quadrant need re-calculating.

    public var onlysource:Object3D 
      hold the 3d object referenced when onlysourceFlag is true.

    public var onlysourceFlag:Boolean = true 
      Determines if the quadrant node contains only one source.

    public var parent:PrimitiveQuadrantTreeNode 
      The quadrant parent.

    public var rightbottom:PrimitiveQuadrantTreeNode 
      The quadrant tree node for the bottom right quadrant.

    public var rightbottomFlag:Boolean 
      Determines if the bounds of the bottom right quadrant need re-calculating.

    public var righttop:PrimitiveQuadrantTreeNode 
      The quadrant tree node for the top right quadrant.

    public var righttopFlag:Boolean 
      Determines if the bounds of the top right quadrant need re-calculating.

    public var xdiv:Number 
      The x coordinate of the quadrant division.

    public var ydiv:Number 
      The x coordinate of the quadrant division.
  CONSTRUCTOR DETAIL

    public function PrimitiveQuadrantTreeNode(xdiv:Number, ydiv:Number, width:Number, height:Number, level:int, parent:PrimitiveQuadrantTreeNode = null) 
      Parameters
       xdiv:Number - The x coordinate for the division between left and right child quadrants.
       ydiv:Number - The y coordinate for the division between top and bottom child quadrants.
       width:Number - The width of the quadrant node.
       height:Number - The height of the quadrant node.
       level:int - The iteration number of the quadrant node.
       parent:PrimitiveQuadrantTreeNode (default = null) - The parent quadrant of the quadrant node.
  METHOD DETAIL

    public function push(pri:DrawPrimitive):void 
      Adds a primitive to the quadrant
      Parameters
       pri:DrawPrimitive

    public function render(limit:Number):void 
      Sorts and renders the contents of the quadrant tree
      Parameters
       limit:Number

    public function reset(xdiv:Number, ydiv:Number, width:Number, height:Number):void 
      Clears the quadrant of all primitives and child nodes
      Parameters
       xdiv:Number
       ydiv:Number
       width:Number
       height:Number
  CODE EXAMPLES

    
      There are currently no examples for this class


PrimitiveTraverser
==================
  Package : away3d.core.traverse
  Class : public class PrimitiveTraverser
  Inheritance : Traverser
  Description : 

  PUBLIC PROPERTIES
        consumer : IPrimitiveConsumer - Defines the primitive consumer being used. (PrimitiveTraverser)
        session : AbstractRenderSession - Defines the render session being used. (PrimitiveTraverser)

  PUBLIC METHODS
        (PrimitiveTraverser)
        apply(node:Object3D):void - Executed when the traverser is applied to the node. (PrimitiveTraverser)
        enter(node:Object3D):void - Executed when the traverser enters the node. (PrimitiveTraverser)
        leave(node:Object3D):void - Executed when the traverser leaves the node. (PrimitiveTraverser)
        match(node:Object3D):Boolean - Determines if the specified node is required to be traversed. (PrimitiveTraverser)

  PROPERTY DETAIL

    public var consumer:IPrimitiveConsumer 
      Defines the primitive consumer being used.

    session:AbstractRenderSession[read-write]
      Defines the render session being used.
      Implementation
       public function get session():AbstractRenderSession
       public function set session(value:AbstractRenderSession):void

  CONSTRUCTOR DETAIL

    public function PrimitiveTraverser() 
  METHOD DETAIL

    public override function apply(node:Object3D):void 
      Executed when the traverser is applied to the node.
      Parameters
       node:Object3D

    public override function enter(node:Object3D):void 
      Executed when the traverser enters the node.
      Parameters
       node:Object3D

    public override function leave(node:Object3D):void 
      Executed when the traverser leaves the node.
      Parameters
       node:Object3D

    public override function match(node:Object3D):Boolean 
      Determines if the specified node is required to be traversed.
      Parameters
       node:Object3D - The 3d object to be tested.
       Returns
       Boolean - The result of the test.
  CODE EXAMPLES

    
      There are currently no examples for this class


PrimitiveVolumeBlock
====================
  Package : away3d.core.draw
  Class : public class PrimitiveVolumeBlock
  Implements : IPrimitiveConsumer
  Description : Volume block tree for storing drawing primitives

  PUBLIC PROPERTIES
        clip : Clipping - Defines the clipping object to be used on the drawing primitives. (PrimitiveVolumeBlock)

  PUBLIC METHODS
        blocks():Array - A list of volume blocks contained in the scene. (PrimitiveVolumeBlock)
        getTouching(target:PrimitiveVolumeBlockNode):Array -  (PrimitiveVolumeBlock)
        list():Array - A list of primitives that have been clipped. (PrimitiveVolumeBlock)
        primitive(pri:DrawPrimitive):void - Adds a drawing primitive to the primitive consumer (PrimitiveVolumeBlock)
        remove(pri:DrawPrimitive):void - removes a drawing primitive from the volume block. (PrimitiveVolumeBlock)

  PROPERTY DETAIL

    clip:Clipping[read-write]
      Defines the clipping object to be used on the drawing primitives.
      Implementation
       public function get clip():Clipping
       public function set clip(value:Clipping):void

  METHOD DETAIL

    public function blocks():Array 
      A list of volume blocks contained in the scene.
      Returns
      Array - An array containing all volume blocks in the scene.

    public function getTouching(target:PrimitiveVolumeBlockNode):Array 
      Parameters
       target:PrimitiveVolumeBlockNode
       Returns
       Array

    public function list():Array 
      A list of primitives that have been clipped.
      Returns
      Array - An array containing the primitives to be rendered.

    public function primitive(pri:DrawPrimitive):void 
      Adds a drawing primitive to the primitive consumer
      Parameters
       pri:DrawPrimitive - The drawing primitive to add.

    public function remove(pri:DrawPrimitive):void 
      removes a drawing primitive from the volume block.
      Parameters
       pri:DrawPrimitive - The drawing primitive to remove.
  CODE EXAMPLES

    
      There are currently no examples for this class


PrimitiveVolumeBlockNode
========================
  Package : away3d.core.draw
  Class : public class PrimitiveVolumeBlockNode

  PUBLIC PROPERTIES
        list : Array - The list of drawing primitives inside the volume block. (PrimitiveVolumeBlockNode)
        maxX : Number - Returns the maximum x value of the drawing primitives contained in the volume block node. (PrimitiveVolumeBlockNode)
        maxY : Number - Returns the maximum y value of the drawing primitives contained in the volume block node. (PrimitiveVolumeBlockNode)
        maxZ : Number - Returns the maximum z value of the drawing primitives contained in the volume block node. (PrimitiveVolumeBlockNode)
        minX : Number = Infinity - Returns the minimum x value of the drawing primitives contained in the volume block node. (PrimitiveVolumeBlockNode)
        minY : Number = Infinity - Returns the minimum y value of the drawing primitives contained in the volume block node. (PrimitiveVolumeBlockNode)
        minZ : Number = Infinity - Returns the minimum z value of the drawing primitives contained in the volume block node. (PrimitiveVolumeBlockNode)
        source : Object3D - Reference to the 3d object represented by the volume block node. (PrimitiveVolumeBlockNode)

  PUBLIC METHODS
        (PrimitiveVolumeBlockNode)
        push(pri:DrawPrimitive):void - Adds a primitive to the volume block (PrimitiveVolumeBlockNode)
        remove(pri:DrawPrimitive):void - Removes a primitive from the volume block (PrimitiveVolumeBlockNode)

  PROPERTY DETAIL

    public var list:Array 
      The list of drawing primitives inside the volume block.

    public var maxX:Number 
      Returns the maximum x value of the drawing primitives contained in the volume block node.

    public var maxY:Number 
      Returns the maximum y value of the drawing primitives contained in the volume block node.

    public var maxZ:Number 
      Returns the maximum z value of the drawing primitives contained in the volume block node.

    public var minX:Number = Infinity 
      Returns the minimum x value of the drawing primitives contained in the volume block node.

    public var minY:Number = Infinity 
      Returns the minimum y value of the drawing primitives contained in the volume block node.

    public var minZ:Number = Infinity 
      Returns the minimum z value of the drawing primitives contained in the volume block node.

    public var source:Object3D 
      Reference to the 3d object represented by the volume block node.
  CONSTRUCTOR DETAIL

    public function PrimitiveVolumeBlockNode(source:Object3D) 
      Parameters
       source:Object3D - A reference to the 3d object represented by the volume block node.
  METHOD DETAIL

    public function push(pri:DrawPrimitive):void 
      Adds a primitive to the volume block
      Parameters
       pri:DrawPrimitive

    public function remove(pri:DrawPrimitive):void 
      Removes a primitive from the volume block
      Parameters
       pri:DrawPrimitive
  CODE EXAMPLES

    
      There are currently no examples for this class


Projection
==========
  Package : away3d.core.render
  Class : public class Projection

  PUBLIC PROPERTIES
        focus : Number - Defines the focus for the camera object being used by the view. (Projection)
        time : int - Defines the unique timestamp for the view render. (Projection)
        view : Matrix3D - Defines the current view transform matrix that resolves the transformation tree. (Projection)
        zoom : Number - Defines the zoom for the camera object being used by the view. (Projection)

  PUBLIC METHODS
        (Projection)

  PROPERTY DETAIL

    public var focus:Number 
      Defines the focus for the camera object being used by the view.

    public var time:int 
      Defines the unique timestamp for the view render.

    public var view:Matrix3D 
      Defines the current view transform matrix that resolves the transformation tree.

    public var zoom:Number 
      Defines the zoom for the camera object being used by the view.
  CONSTRUCTOR DETAIL

    public function Projection() 
  CODE EXAMPLES

    
      There are currently no examples for this class


ProjectionTraverser
===================
  Package : away3d.core.traverse
  Class : public class ProjectionTraverser
  Inheritance : Traverser
  Description : 

  PUBLIC PROPERTIES
        view : View3D - Defines the view being used. (ProjectionTraverser)

  PUBLIC METHODS
        (ProjectionTraverser)
    (^) apply(node:Object3D):void - Executed when the traverser is applied to the node. (Traverser)
        enter(node:Object3D):void - Executed when the traverser enters the node. (ProjectionTraverser)
    (^) leave(node:Object3D):void - Executed when the traverser leaves the node. (Traverser)
        match(node:Object3D):Boolean - Determines if the specified node is required to be traversed. (ProjectionTraverser)

  PROPERTY DETAIL

    view:View3D[read-write]
      Defines the view being used.
      Implementation
       public function get view():View3D
       public function set view(value:View3D):void

  CONSTRUCTOR DETAIL

    public function ProjectionTraverser() 
  METHOD DETAIL

    public override function enter(node:Object3D):void 
      Executed when the traverser enters the node.
      Parameters
       node:Object3D

    public override function match(node:Object3D):Boolean 
      Determines if the specified node is required to be traversed.
      Parameters
       node:Object3D - The 3d object to be tested.
       Returns
       Boolean - The result of the test.
  CODE EXAMPLES

    
      There are currently no examples for this class


QuadrantRenderer
================
  Package : away3d.core.render
  Class : public class QuadrantRenderer
  Implements : IRenderer
  Description : 

  PUBLIC PROPERTIES
        session : AbstractRenderSession - Defines the render session object used by the renderer. (QuadrantRenderer)

  PUBLIC METHODS
        (QuadrantRenderer)
        render(view:View3D):Array - Executes the render pipe that resolves the 3d scene into the view. (QuadrantRenderer)
        toString():String - Used to trace the values of a renderer. (QuadrantRenderer)

  PROPERTY DETAIL

    session:AbstractRenderSession[read-write]
      Defines the render session object used by the renderer.
      Implementation
       public function get session():AbstractRenderSession
       public function set session(value:AbstractRenderSession):void

  CONSTRUCTOR DETAIL

    public function QuadrantRenderer(... filters) 
      Parameters
       ... filters - [optional] An array of filters to use on projected drawing primitives before rendering them to screen.
  METHOD DETAIL

    public function render(view:View3D):Array 
      Executes the render pipe that resolves the 3d scene into the view.
      Parameters
       view:View3D
       Returns
       Array

    public function toString():String 
      Used to trace the values of a renderer.
      Returns
      String - A string representation of the renderer object.
  CODE EXAMPLES

    
      There are currently no examples for this class


QuadrantRiddleFilter
====================
  Package : away3d.core.filter
  Class : public class QuadrantRiddleFilter
  Implements : IPrimitiveQuadrantFilter
  Description : 

  PUBLIC METHODS
        (QuadrantRiddleFilter)
        filter(pritree:PrimitiveQuadrantTree, scene:Scene3D, camera:Camera3D, clip:Clipping):void - Applies the filter to the quadrant tree. (QuadrantRiddleFilter)
        toString():String - Used to trace the values of a filter. (QuadrantRiddleFilter)

  CONSTRUCTOR DETAIL

    public function QuadrantRiddleFilter(maxdelay:int = 60000) 
      Parameters
       maxdelay:int (default = 60000) - [optional] The maximum time the filter can take to resolve z-depth before timing out.
  METHOD DETAIL

    public function filter(pritree:PrimitiveQuadrantTree, scene:Scene3D, camera:Camera3D, clip:Clipping):void 
      Applies the filter to the quadrant tree.
      Parameters
       pritree:PrimitiveQuadrantTree - The quadrant tree to be filtered.
       scene:Scene3D - The scene to which the quadrant tree belongs.
       camera:Camera3D - The camera being used in the renderer for the quadrant tree
       clip:Clipping - The clipping object used in the renderer for the quadrant tree's view.

    public function toString():String 
      Used to trace the values of a filter.
      Returns
      String - A string representation of the filter object.
  CODE EXAMPLES

    
      There are currently no examples for this class


Quaternion
==========
  Package : away3d.core.math
  Class : public final class Quaternion

  PUBLIC PROPERTIES
        magnitude : Number - [read-only] Returns the magnitude of the quaternion object. (Quaternion)
        w : Number - The w value of the quatertion. (Quaternion)
        x : Number - The x value of the quatertion. (Quaternion)
        y : Number - The y value of the quatertion. (Quaternion)
        z : Number - The z value of the quatertion. (Quaternion)

  PUBLIC METHODS
        axis2quaternion(x:Number, y:Number, z:Number, angle:Number):void - Fills the quaternion object with values representing the given rotation around a vector. (Quaternion)
        euler2quaternion(ax:Number, ay:Number, az:Number):void - Fills the quaternion object with values representing the given euler rotation. (Quaternion)
        multiply(qa:Quaternion, qb:Quaternion):void - Fills the quaternion object with the result from a multipication of two quaternion objects. (Quaternion)
        normalize(val:Number = 1):void - Normalises the quaternion object. (Quaternion)
        toString():String - Used to trace the values of a quaternion. (Quaternion)

  PROPERTY DETAIL

    magnitude:Number[read-only]
      Returns the magnitude of the quaternion object.
      Implementation
       public function get magnitude():Number


    public var w:Number 
      The w value of the quatertion.

    public var x:Number 
      The x value of the quatertion.

    public var y:Number 
      The y value of the quatertion.

    public var z:Number 
      The z value of the quatertion.
  METHOD DETAIL

    public function axis2quaternion(x:Number, y:Number, z:Number, angle:Number):void 
      Fills the quaternion object with values representing the given rotation around a vector.
      Parameters
       x:Number - The x value of the rotation vector.
       y:Number - The y value of the rotation vector.
       z:Number - The z value of the rotation vector.
       angle:Number - The angle in radians of the rotation.

    public function euler2quaternion(ax:Number, ay:Number, az:Number):void 
      Fills the quaternion object with values representing the given euler rotation.
      Parameters
       ax:Number - The angle in radians of the rotation around the x axis.
       ay:Number - The angle in radians of the rotation around the y axis.
       az:Number - The angle in radians of the rotation around the z axis.

    public function multiply(qa:Quaternion, qb:Quaternion):void 
      Fills the quaternion object with the result from a multipication of two quaternion objects.
      Parameters
       qa:Quaternion - The first quaternion in the multipication.
       qb:Quaternion - The second quaternion in the multipication.

    public function normalize(val:Number = 1):void 
      Normalises the quaternion object.
      Parameters
       val:Number (default = 1)

    public function toString():String 
      Used to trace the values of a quaternion.
      Returns
      String - A string representation of the quaternion object.
  CODE EXAMPLES

    
      There are currently no examples for this class


RectangleClipping
=================
  Package : away3d.core.clip
  Class : public class RectangleClipping
  Inheritance : Clipping
  Description : Rectangle clipping

  PUBLIC PROPERTIES
    (^) maxX : Number = 1000000 - Maximum allowed x value for primitives (Clipping)
    (^) maxY : Number = 1000000 - Maximum allowed y value for primitives (Clipping)
    (^) minX : Number = -1000000 - Minimum allowed x value for primitives (Clipping)
    (^) minY : Number = -1000000 - Minimum allowed y value for primitives (Clipping)

  PUBLIC METHODS
        -  (RectangleClipping)
        asRectangleClipping():RectangleClipping - Returns a rectangle clipping object representing the bounding box of the clipping object. (RectangleClipping)
        check(pri:DrawPrimitive):Boolean - Checks a drawing primitive for clipping. (RectangleClipping)
        rect(minX:Number, minY:Number, maxX:Number, maxY:Number):Boolean - Checks a bounding rectangle for clipping. (RectangleClipping)
    (^) screen(container:Sprite):Clipping - Returns a rectangle clipping object initilised with the edges of the flash movie as the clipping bounds. (Clipping)
        toString():String - Used to trace the values of a rectangle clipping object. (RectangleClipping)

  CONSTRUCTOR DETAIL

    public function RectangleClipping(minX:Number = -1000000, minY:Number = -1000000, maxX:Number = 1000000, maxY:Number = 1000000) 
      Parameters
       minX:Number (default = -1000000)
       minY:Number (default = -1000000)
       maxX:Number (default = 1000000)
       maxY:Number (default = 1000000)
  METHOD DETAIL

    public override function asRectangleClipping():RectangleClipping 
      Returns a rectangle clipping object representing the bounding box of the clipping object.
      Returns
      RectangleClipping

    public override function check(pri:DrawPrimitive):Boolean 
      Checks a drawing primitive for clipping.
      Parameters
       pri:DrawPrimitive - The drawing primitive being checked.
       Returns
       Boolean - The clipping result - false for clipped, true for non-clipped.

    public override function rect(minX:Number, minY:Number, maxX:Number, maxY:Number):Boolean 
      Checks a bounding rectangle for clipping.
      Parameters
       minX:Number - The x value for the left side of the rectangle.
       minY:Number - The y value for the top side of the rectangle.
       maxX:Number - The x value for the right side of the rectangle.
       maxY:Number - The y value for the bottom side of the rectangle.
       Returns
       Boolean - The clipping result - false for clipped, true for non-clipped.

    public function toString():String 
      Used to trace the values of a rectangle clipping object.
      Returns
      String - A string representation of the rectangle clipping object.
  CODE EXAMPLES

    
      There are currently no examples for this class


RegularPolygon
==============
  Package : away3d.primitives
  Class : public class RegularPolygon
  Inheritance : AbstractPrimitive, Mesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
        radius : Number - Defines the radius of the polygon. (RegularPolygon)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractPrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
        sides : Number - Defines the number of sides of the polygon. (RegularPolygon)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
        subdivision : Number - Defines the subdivision of the polygon. (RegularPolygon)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
        yUp : Boolean - Defines whether the coordinates of the polygon points use a yUp orientation (true) or a zUp orientation (false). (RegularPolygon)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (RegularPolygon)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (RegularPolygon)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    radius:Number[read-write]
      Defines the radius of the polygon. Defaults to 100.
      Implementation
       public function get radius():Number
       public function set radius(value:Number):void


    sides:Number[read-write]
      Defines the number of sides of the polygon. Defaults to 8 (octohedron).
      Implementation
       public function get sides():Number
       public function set sides(value:Number):void


    subdivision:Number[read-write]
      Defines the subdivision of the polygon. Defaults to 1.
      Implementation
       public function get subdivision():Number
       public function set subdivision(value:Number):void


    yUp:Boolean[read-write]
      Defines whether the coordinates of the polygon points use a yUp orientation (true) or a zUp orientation (false). Defaults to true.
      Implementation
       public function get yUp():Boolean
       public function set yUp(value:Boolean):void

  CONSTRUCTOR DETAIL

    public function RegularPolygon(init:Object = null) 
      Constructor for a regular polygon object. The init object parameters are : 'radius' defines the radius of the polygon, 'sections' determines the type of polygon created (e.g. 3=triangle, 4=square, 5=pentagon, etc) and 'mapping' which determines the method of UV material mapping to use.
      Values for 'mapping' can be either 'rotate' or 'planar'.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       radius:Number (default = 100, min:0)
       sides:Int (default = 8, min:3)
       subdivision:Int (default = 1, min:1)
       yUp:Boolean (default = true)
  METHOD DETAIL

    public override function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.
  CODE EXAMPLES

    
      There are currently no examples for this class


Renderer
========
  Package : away3d.core.render
  Class : public class Renderer

  PUBLIC PROPERTIES
        BASIC : IRenderer - [static][read-only] Fastest and simplest renderer, useful for many applications. (Renderer)
        CORRECT_Z_ORDER : IRenderer - [static][read-only] Perform reordering of triangles after sorting to guarantee their correct rendering. (Renderer)
        INTERSECTING_OBJECTS : IRenderer - [static][read-only] Perform triangles splitting to correctly render scenes with intersecting objects. (Renderer)

  PROPERTY DETAIL

    BASIC:IRenderer[read-only]
      Fastest and simplest renderer, useful for many applications.
      Implementation
       public static function get BASIC():IRenderer
       See also
       away3d.core.render.BasicRenderer


    CORRECT_Z_ORDER:IRenderer[read-only]
      Perform reordering of triangles after sorting to guarantee their correct rendering.
      Implementation
       public static function get CORRECT_Z_ORDER():IRenderer
       See also
       away3d.core.render.QuadrantRenderer
       away3d.core.render.AnotherRivalFilter


    INTERSECTING_OBJECTS:IRenderer[read-only]
      Perform triangles splitting to correctly render scenes with intersecting objects.
      Implementation
       public static function get INTERSECTING_OBJECTS():IRenderer
       See also
       away3d.core.render.QuadrantRenderer
       away3d.core.render.QuadrantRiddleFilter
       away3d.core.render.AnotherRivalFilter

  CODE EXAMPLES

    
      *Lesson_Intermediate_01_ZOrdering.fla
      // import core library
      import away3d.core.scene.*;
      // import geometry primitives
      import away3d.objects.*;
      // import materials
      import away3d.core.material.*;
      // import mesh type
      import away3d.core.mesh.*;
      // import basic and correct-z-order renderers
      import away3d.core.render.*;
      // create a 3D-viewport. use BASIC renderer for now
      var view:View3D = new View3D({x:300, y:200, renderer:Renderer.BASIC});
      // add viewport to the stage
      addChild(view);
      // create scene
      var cube:Mesh = new Cube({material:"grey#", size:400});
      var cubetop:Object3D = new Cube({material:"yellow#", y:255});
      var cubeleft:Object3D = new Cube({material:"cyan#", x:-255});
      var cuberight:Object3D = new Cube({material:"green#", x:255});
      var cubefront:Object3D = new Cube({material:"magenta#", z:-255});
      var cubeback:Object3D = new Cube({material:"slateblue#", z:255});
      var cubes:Object3D = new ObjectContainer3D(cube, cubetop, cubeleft, cuberight, cubefront, cubeback);
      view.scene.addChild(cubes);
      // what renderer do we use
      var correctzorder:Boolean = false;
      // register mouse event handler
      cubes.addOnMouseDown(onCubesMouseDown);
      function onCubesMouseDown(event:MouseEvent3D):void {
      if (correctzorder)
      {
      // switch to basic renderer - just sort triangle by their centers
      view.renderer = Renderer.BASIC;
      cube.material = new WireColorMaterial("grey");
      correctzorder = false;
      }
      else
      {
      // switch to correct-z-order renderer - reorder triangles after sorting
      view.renderer = Renderer.CORRECT_Z_ORDER;
      cube.material = new WireColorMaterial("white");
      correctzorder = true;
      }
      }
      // every frame
      addEventListener(Event.ENTER_FRAME, onEnterFrame);
      function onEnterFrame(event:Event):void {
      // rotate cubes
      cubes.rotationY = getTimer() / 100;
      // rerender viewport
      view.render();
      }
      From Lesson_Intermediate_01_ZOrdering.fla

Scene3D
=======
  Package : away3d.containers
  Class : public class Scene3D
  Inheritance : Object3D
  Description : d objects in a single scene

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (ObjectContainer3D)
    (^) children : Array - Returns the children of the container as an array of 3d objects (ObjectContainer3D)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) maxX : Number - Returns the maximum x value of the 3d object (ObjectContainer3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (ObjectContainer3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (ObjectContainer3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (ObjectContainer3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (ObjectContainer3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (ObjectContainer3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
        parent : ObjectContainer3D (Scene3D)
        physics : IPhysicsScene - Interface for physics (not implemented) (Scene3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
        sceneTransform : Matrix3D (Scene3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
        tickTraverser : TickTraverser (Scene3D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (Scene3D)
    (^) addChild(child:Object3D):void - Adds a 3d object to the scene as a child of the container (ObjectContainer3D)
    (^) addChildren(... childarray):void - Adds an array of 3d objects to the scene as children of the container (ObjectContainer3D)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) clone(object:* = null):* (ObjectContainer3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) getChildByName(name:String):Object3D - Returns a 3d object specified by name from the child array of the container (ObjectContainer3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the 3d object without moving the contents (ObjectContainer3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Object3D)
    (^) removeChild(child:Object3D):void - Removes a 3d object from the child array of the container (ObjectContainer3D)
    (^) removeChildByName(name:String):void - Removes a 3d object from the child array of the container (ObjectContainer3D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (ObjectContainer3D)
    (^) tick(time:int):void (Object3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (ObjectContainer3D)
        updateTime(time:int = -1):void (Scene3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PROPERTY DETAIL

    parent:ObjectContainer3D[read-write]
      Cannot parent a Scene3D object
      Implementation
       public function get parent():ObjectContainer3D
       public function set parent(value:ObjectContainer3D):void
       Throws
       - Scene can't be parented

    public var physics:IPhysicsScene 
      Interface for physics (not implemented)

    sceneTransform:Matrix3D[read-only]
      Returns the transformation of the 3d object, relative to the global coordinates of the Scene3D.
      Implementation
       public function get sceneTransform():Matrix3D


    public var tickTraverser:TickTraverser 
      Traverser object for all custom tick() methods
      See also
      away3d.core.base.Object3D.tick()

  CONSTRUCTOR DETAIL

    public function Scene3D(init:Object = null, ... objects) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties
       ... objects - An array of 3d objects to be added as children on instatiation
       Init Parameters
       physics:Object
  METHOD DETAIL

    public function updateTime(time:int = -1):void 
      Calling manually will update 3d objects that execute updates on their tick() methods. Uses the TickTraverser to traverse all tick methods in the scene.
      Parameters
       time:int (default = -1)
       See also
       away3d.core.base.Object3D.tick()
       away3d.core.traverse.TickTraverser

  CODE EXAMPLES

    
      There are currently no examples for this class


ScreenVertex
============
  Package : away3d.core.draw
  Class : public final class ScreenVertex

  PUBLIC PROPERTIES
        num : Number - A numbder containing user defined properties. (ScreenVertex)
        visible : Boolean - Indicates whether the vertex is visible after projection. (ScreenVertex)
        x : Number - The x position of the vertex in the view. (ScreenVertex)
        y : Number - The y position of the vertex in the view. (ScreenVertex)
        z : Number - The z position of the vertex in the view. (ScreenVertex)

  PUBLIC METHODS
        (ScreenVertex)
        deperspective(focus:Number):Vertex - Converts a screen vertex back to a vertex object. (ScreenVertex)
        distance(b:ScreenVertex):Number - Calculates the distance between two screen vertex objects. (ScreenVertex)
        distanceSqr(b:ScreenVertex):Number - Calculates the squared distance between two screen vertex objects. (ScreenVertex)
        distortSqr(b:ScreenVertex, focus:Number):Number - Calculates affine distortion present at the midpoint between two screen vertex objects. (ScreenVertex)
        median(a:ScreenVertex, b:ScreenVertex, focus:Number):ScreenVertex - [static] Returns the median screen vertex between the two given screen vertex objects. (ScreenVertex)
        toString():String - Used to trace the values of a vertex. (ScreenVertex)
        weighted(a:ScreenVertex, b:ScreenVertex, aw:Number, bw:Number, focus:Number):ScreenVertex - [static] Returns a screen vertex with values given by a weighted mean calculation. (ScreenVertex)

  PROPERTY DETAIL

    public var num:Number 
      A numbder containing user defined properties.

    public var visible:Boolean 
      Indicates whether the vertex is visible after projection.

    public var x:Number 
      The x position of the vertex in the view.

    public var y:Number 
      The y position of the vertex in the view.

    public var z:Number 
      The z position of the vertex in the view.
  CONSTRUCTOR DETAIL

    public function ScreenVertex(x:Number = 0, y:Number = 0, z:Number = 0) 
      Parameters
       x:Number (default = 0) - [optional] The x position of the vertex in the view. Defaults to 0.
       y:Number (default = 0) - [optional] The y position of the vertex in the view. Defaults to 0.
       z:Number (default = 0) - [optional] The z position of the vertex in the view. Defaults to 0.
  METHOD DETAIL

    public function deperspective(focus:Number):Vertex 
      Converts a screen vertex back to a vertex object.
      Parameters
       focus:Number - The focus value to use for deperspective calulations.
       Returns
       Vertex - The deperspectived vertex object.

    public function distance(b:ScreenVertex):Number 
      Calculates the distance between two screen vertex objects.
      Parameters
       b:ScreenVertex - The second screen vertex object to use for the calcation.
       Returns
       Number - The scalar value of the vector between this and the given screen vertex.

    public function distanceSqr(b:ScreenVertex):Number 
      Calculates the squared distance between two screen vertex objects.
      Parameters
       b:ScreenVertex - The screen vertex object to use for the calcation.
       Returns
       Number - The squared scalar value of the vector between this and the given scren vertex.

    public function distortSqr(b:ScreenVertex, focus:Number):Number 
      Calculates affine distortion present at the midpoint between two screen vertex objects.
      Parameters
       b:ScreenVertex - The second screen vertex object to use for the calcation.
       focus:Number - The focus value used for the distortion calulations.
       Returns
       Number - The scalar value of the vector between this and the given screen vertex.

    public static function median(a:ScreenVertex, b:ScreenVertex, focus:Number):ScreenVertex 
      Returns the median screen vertex between the two given screen vertex objects.
      Parameters
       a:ScreenVertex - The first screen vertex to use for the calculation.
       b:ScreenVertex - The second screen vertex to use for the calculation.
       focus:Number - The focus value used for the median calulations.
       Returns
       ScreenVertex - The resulting screen vertex.

    public function toString():String 
      Used to trace the values of a vertex.
      Returns
      String - A string representation of the vertex object.

    public static function weighted(a:ScreenVertex, b:ScreenVertex, aw:Number, bw:Number, focus:Number):ScreenVertex 
      Returns a screen vertex with values given by a weighted mean calculation.
      Parameters
       a:ScreenVertex - The first screen vertex to use for the calculation.
       b:ScreenVertex - The second screen vertex to use for the calculation.
       aw:Number - The first screen vertex weighting.
       bw:Number - The second screen vertex weighting.
       focus:Number - The focus value used for the weighting calulations.
       Returns
       ScreenVertex - The resulting screen vertex.
  CODE EXAMPLES

    
      There are currently no examples for this class


SeaTurtle
=========
  Package : away3d.primitives
  Class : public class SeaTurtle
  Inheritance : Mesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        -  (SeaTurtle)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  CONSTRUCTOR DETAIL

    public function SeaTurtle(init:Object = null) 
      Constructor for the sea turtle object.
      Parameters
       init:Object (default = null)
  CODE EXAMPLES

    
      There are currently no examples for this class


Segment
=======
  Package : away3d.core.base
  Class : public class Segment
  Inheritance : BaseMeshElement
  Description : 

  PUBLIC PROPERTIES
        extra : Object - An optional untyped object that can contain used-defined properties. (Segment)
        material : ISegmentMaterial - Defines the material of the segment. (Segment)
        maxX : Number - [read-only] Returns the maximum x value of the segment (Segment)
        maxY : Number - [read-only] Returns the maximum y value of the segment (Segment)
        maxZ : Number - [read-only] Returns the maximum z value of the segment (Segment)
        minX : Number - [read-only] Returns the minimum x value of the face (Segment)
        minY : Number - [read-only] Returns the minimum y value of the face (Segment)
        minZ : Number - [read-only] Returns the minimum y value of the face (Segment)
        parent : BaseMesh - Defines the parent 3d object of the segment. (Segment)
        radius2 : Number - [read-only] Returns the squared bounding radius of the face. (Segment)
        v0 : Vertex - Defines the v0 vertex of the segment. (Segment)
        v1 : Vertex - Defines the v1 vertex of the segment. (Segment)
        vertices : Array - [read-only] Returns an array of vertex objects that are used by the segment. (Segment)
    (^) visible : Boolean - Defines whether the 3d element is visible in the scene. (BaseMeshElement)

  PUBLIC METHODS
        (Segment)
        addOnMaterialChange(listener:Function):void - Default method for adding a materialchanged event listener (Segment)
    (^) addOnVertexChange(listener:Function):void - Default method for adding a vertexchanged event listener (BaseMeshElement)
    (^) addOnVertexValueChange(listener:Function):void - Default method for adding a vertexvaluechanged event listener (BaseMeshElement)
    (^) addOnVisibleChange(listener:Function):void - Default method for adding a visiblechanged event listener (BaseMeshElement)
        removeOnMaterialChange(listener:Function):void - Default method for removing a materialchanged event listener (Segment)
    (^) removeOnVertexChange(listener:Function):void - Default method for removing a vertexchanged event listener (BaseMeshElement)
    (^) removeOnVertexValueChange(listener:Function):void - Default method for removing a vertexvaluechanged event listener (BaseMeshElement)
    (^) removeOnVisibleChange(listener:Function):void - Default method for removing a visiblechanged event listener (BaseMeshElement)

  EVENTS
        (Segment)
    (^) (BaseMeshElement)
    (^) (BaseMeshElement)
    (^) (BaseMeshElement)

  PROPERTY DETAIL

    public var extra:Object 
      An optional untyped object that can contain used-defined properties.

    material:ISegmentMaterial[read-write]
      Defines the material of the segment.
      Implementation
       public function get material():ISegmentMaterial
       public function set material(value:ISegmentMaterial):void


    maxX:Number[read-only]
      Returns the maximum x value of the segment
      Implementation
       public function get maxX():Number
       See also
       maxY
       property
       maxY:Number[read-only]

    maxY:Number[read-only]
       Returns the maximum y value of the segment
       Implementation
       public function get maxY():Number
       See also
       maxZ
       property
       maxZ:Number[read-only]

    maxZ:Number[read-only]
       Returns the maximum z value of the segment
       Implementation
       public function get maxZ():Number
       See also
       minX
       property
       minX:Number[read-only]

    minX:Number[read-only]
       Returns the minimum x value of the face
       Implementation
       public function get minX():Number
       See also
       minY
       property
       minY:Number[read-only]

    minY:Number[read-only]
       Returns the minimum y value of the face
       Implementation
       public function get minY():Number
       See also
       minZ
       property
       minZ:Number[read-only]

    minZ:Number[read-only]
       Returns the minimum y value of the face
       Implementation
       public function get minZ():Number
       See also
       parent
       property
       public var parent:BaseMesh

    public var parent:BaseMesh 
       Defines the parent 3d object of the segment.

    radius2:Number[read-only]
      Returns the squared bounding radius of the face.
      Implementation
       public function get radius2():Number


    v0:Vertex[read-write]
      Defines the v0 vertex of the segment.
      Implementation
       public function get v0():Vertex
       public function set v0(value:Vertex):void


    v1:Vertex[read-write]
      Defines the v1 vertex of the segment.
      Implementation
       public function get v1():Vertex
       public function set v1(value:Vertex):void


    vertices:Array[read-only]
      Returns an array of vertex objects that are used by the segment.
      Implementation
       public function get vertices():Array

  CONSTRUCTOR DETAIL

    public function Segment(v0:Vertex, v1:Vertex, material:ISegmentMaterial = null) 
      Parameters
       v0:Vertex - [optional] An initialisation object for specifying default instance properties
       v1:Vertex
       material:ISegmentMaterial (default = null)
  METHOD DETAIL

    public function addOnMaterialChange(listener:Function):void 
      Default method for adding a materialchanged event listener
      Parameters
       listener:Function - The listener function

    public function removeOnMaterialChange(listener:Function):void 
      Default method for removing a materialchanged event listener
      Parameters
       listener:Function - The listener function
  EVENT DETAIL

    Event object type: away3d.events.FaceEvent
      Dispatched when the material of the segment changes.
  CODE EXAMPLES

    
      There are currently no examples for this class


SegmentEvent
============
  Package : away3d.events
  Class : public class SegmentEvent
  Inheritance
  PUBLIC PROPERTIES
        : Segment
 segment : Segment  Description : 
 - A reference to the segment object that is relevant to the event. (SegmentEvent)

  PUBLIC METHODS
        (SegmentEvent)
        clone():Event - Creates a copy of the SegmentEvent object and sets the value of each property to match that of the original. (SegmentEvent)

  PUBLIC CONSTANTS
        MATERIAL_CHANGED : String = "materialchanged" - [static] Defines the value of the type property of a materialchanged event object. (SegmentEvent)

  PROPERTY DETAIL

    public var segment:Segment 
      A reference to the segment object that is relevant to the event.
  CONSTRUCTOR DETAIL

    public function SegmentEvent(type:String, segment:Segment) 
      Parameters
       type:String - The type of the event. Possible values are: SegmentEvent.MATERIAL_CHANGED.
       segment:Segment - A reference to the segment object that is relevant to the event.
  METHOD DETAIL

    public override function clone():Event 
      Creates a copy of the SegmentEvent object and sets the value of each property to match that of the original.
      Returns
      Event
  CONSTANT DETAIL

    public static const MATERIAL_CHANGED:String = "materialchanged" 
      Defines the value of the type property of a materialchanged event object.
  CODE EXAMPLES

    
      There are currently no examples for this class


SegmentsExtrude
===============
  Package : away3d.extrusions
  Class : public class SegmentsExtrude
  Inheritance : Mesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        -  (SegmentsExtrude)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  CONSTRUCTOR DETAIL

    public function SegmentsExtrude(aPoints:*, init:Object = null) 
      Class generate an extrusion from a series of Number3D
      Parameters
       aPoints:*
       init:Object (default = null)
  CODE EXAMPLES

    
      There are currently no examples for this class


ShadingColorMaterial
====================
  Package : away3d.materials
  Class : public class ShadingColorMaterial
  Inheritance : CenterLightingMaterial
  Description : 

  PUBLIC PROPERTIES
    (^) ak : Number = 20 - Coefficient for shininess level (CenterLightingMaterial)
        alpha : Number - Defines an alpha value for the texture. (ShadingColorMaterial)
        ambient : int - Defines a color value for ambient light. (ShadingColorMaterial)
    (^) ambient_brightness : Number = 1 - Coefficient for ambient light level (CenterLightingMaterial)
        cache : Boolean - Defines whether the resulting shaded color of the surface should be cached. (ShadingColorMaterial)
        diffuse : int - Defines a color value for diffuse light. (ShadingColorMaterial)
    (^) diffuse_brightness : Number = 1 - Coefficient for diffuse light level (CenterLightingMaterial)
        specular : int - Defines a color value for specular light. (ShadingColorMaterial)
    (^) specular_brightness : Number = 1 - Coefficient for specular light level (CenterLightingMaterial)
        visible : Boolean - [read-only] Indicates whether the material is visible (ShadingColorMaterial)

  PROTECTED PROPERTIES
        (ShadingColorMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (CenterLightingMaterial)
    (^) updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (CenterLightingMaterial)

  PROTECTED METHODS
        renderTri(tri:DrawTriangle, session:AbstractRenderSession, kar:Number, kag:Number, kab:Number, kdr:Number, kdg:Number, kdb:Number, ksr:Number, ksg:Number, ksb:Number):void -  (ShadingColorMaterial)

  PROPERTY DETAIL

    public var alpha:Number 
      Defines an alpha value for the texture.

    public var ambient:int 
      Defines a color value for ambient light.

    public var cache:Boolean 
      Defines whether the resulting shaded color of the surface should be cached.

    public var diffuse:int 
      Defines a color value for diffuse light.

    public var specular:int 
      Defines a color value for specular light.

    visible:Boolean[read-only]
      Indicates whether the material is visible
      Implementation
       public function get visible():Boolean

  CONSTRUCTOR DETAIL

    public function ShadingColorMaterial(color:* = null, init:Object = null) 
      Parameters
       color:* (default = null) - A string, hex value or colorname representing the color of the material.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       ambient:Color (default = color)
       diffuse:Color (default = color)
       specular:Color (default = color)
       alpha:Number (default = 1)
       cache:Boolean (default = false)
  METHOD DETAIL

    protected override function renderTri(tri:DrawTriangle, session:AbstractRenderSession, kar:Number, kag:Number, kab:Number, kdr:Number, kdg:Number, kdb:Number, ksr:Number, ksg:Number, ksb:Number):void 
      Parameters
       tri:DrawTriangle
       session:AbstractRenderSession
       kar:Number
       kag:Number
       kab:Number
       kdr:Number
       kdg:Number
       kdb:Number
       ksr:Number
       ksg:Number
       ksb:Number
  CODE EXAMPLES

    
      There are currently no examples for this class


SkinExtrude
===========
  Package : away3d.extrusions
  Class : public class SkinExtrude
  Inheritance : Mesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        -  (SkinExtrude)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  CONSTRUCTOR DETAIL

    public function SkinExtrude(aPoints:*, init:Object = null) 
      Parameters
       aPoints:*
       init:Object (default = null)
  CODE EXAMPLES

    
      There are currently no examples for this class


Skybox
======
  Package : away3d.primitives
  Class : public class Skybox
  Inheritance : Mesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (Skybox)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  CONSTRUCTOR DETAIL

    public function Skybox(front:ITriangleMaterial, left:ITriangleMaterial, back:ITriangleMaterial, right:ITriangleMaterial, up:ITriangleMaterial, down:ITriangleMaterial) 
      Constructor for a sky box object used to provide background imagery for the full scene whatever the camera rotation. Each parameter defines a material that maps on to the box to create impresssion of sky, floor and 360 degree horizon.
      Parameters
       front:ITriangleMaterial - The material to use for the skybox front.
       left:ITriangleMaterial - The material to use for the skybox left.
       back:ITriangleMaterial - The material to use for the skybox back.
       right:ITriangleMaterial - The material to use for the skybox right.
       up:ITriangleMaterial - The material to use for the skybox up.
       down:ITriangleMaterial - The material to use for the skybox down.
  CODE EXAMPLES

    
      There are currently no examples for this class


Skybox6
=======
  Package : away3d.primitives
  Class : public class Skybox6
  Inheritance : Mesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (Skybox6)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  CONSTRUCTOR DETAIL

    public function Skybox6(material:ITriangleMaterial) 
      Constructor for a sky box 6 object used to provide background imagery for the full scene whatever the camera rotation. Unlike the SkyBox object, this object constructor only takes a single material parameter which defines the entire set of box panels in a single bitmap.
      Parameters
       material:ITriangleMaterial - The material to use for generating all six skybox sides.
  CODE EXAMPLES

    
      There are currently no examples for this class


Slide
=====
  Package : away3d.test
  Class : public class Slide

  PUBLIC PROPERTIES
        desc : String -  (Slide)
        renderer : IRenderer -  (Slide)
        scene : Scene3D -  (Slide)
        session : AbstractRenderSession -  (Slide)
        title : String -  (Slide)

  PUBLIC METHODS
        -  (Slide)

  PROPERTY DETAIL

    public var desc:String 

    public var renderer:IRenderer 

    public var scene:Scene3D 

    public var session:AbstractRenderSession 

    public var title:String 
  CONSTRUCTOR DETAIL

    public function Slide(title:String, desc:String, scene:Scene3D, renderer:IRenderer, session:AbstractRenderSession) 
      Parameters
       title:String
       desc:String
       scene:Scene3D
       renderer:IRenderer
       session:AbstractRenderSession
  CODE EXAMPLES

    
      There are currently no examples for this class


SpecularPhongShader
===================
  Package : away3d.materials.shaders
  Class : public class SpecularPhongShader
  Inheritance : AbstractShader
  Description : 

  PUBLIC PROPERTIES
    (^) blendMode : String - Defines a blendMode value for the shader bitmap. (AbstractShader)
    (^) debug : Boolean - Determines if faces with the shader applied are drawn with outlines (AbstractShader)
        shininess : Number - The exponential dropoff value used for specular highlights. (SpecularPhongShader)
    (^) smooth : Boolean - Determines if the shader bitmap is smoothed (bilinearly filtered) when drawn to screen (AbstractShader)
        specular : Number - Coefficient for specular light level. (SpecularPhongShader)
    (^) visible : Boolean - Indicates whether the material is visible (AbstractShader)

  PROTECTED PROPERTIES
        (SpecularPhongShader)
    (^) renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (AbstractShader)
        renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (SpecularPhongShader)
        updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (SpecularPhongShader)

  PROTECTED METHODS
        clearFaceDictionary(source:Object3D, view:View3D):void - Clears face value objects when shader requires updating (SpecularPhongShader)
    (^) getLightingShape(layer:Sprite, light:LightPrimitive):Shape - Returns a shape object for use by light shaders (AbstractShader)
    (^) getShape(layer:Sprite):Shape - Returns a shape object for use by environment shaders. (AbstractShader)
        renderShader(face:Face):void - Renders the shader to the specified face. (SpecularPhongShader)

  PROPERTY DETAIL

    shininess:Number[read-write]
      The exponential dropoff value used for specular highlights.
      Implementation
       public function get shininess():Number
       public function set shininess(value:Number):void


    specular:Number[read-write]
      Coefficient for specular light level.
      Implementation
       public function get specular():Number
       public function set specular(value:Number):void

  CONSTRUCTOR DETAIL

    public function SpecularPhongShader(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
  METHOD DETAIL

    protected override function clearFaceDictionary(source:Object3D, view:View3D):void 
      Clears face value objects when shader requires updating
      Parameters
       source:Object3D - The parent 3d object of the face.
       view:View3D - The view rendering the draw triangle.

    public override function renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void 
      Renders a material layer for the specified triangle.
      Parameters
       tri:DrawTriangle - The drawtriangle used for render information.
       layer:Sprite - The parent layer into which the triangle is drawn.
       level:int - Defines the sprite level for the layer.

    protected override function renderShader(face:Face):void 
      Renders the shader to the specified face.
      Parameters
       face:Face - The face object being rendered.

    public override function updateMaterial(source:Object3D, view:View3D):void 
      Called once per render loop when material is visible.
      Parameters
       source:Object3D
       view:View3D
  CODE EXAMPLES

    
      There are currently no examples for this class


Sphere
======
  Package : away3d.primitives
  Class : public class Sphere
  Inheritance : AbstractPrimitive, Mesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
        radius : Number - Defines the radius of the sphere. (Sphere)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractPrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
        segmentsH : Number - Defines the number of vertical segments that make up the sphere. (Sphere)
        segmentsW : Number - Defines the number of horizontal segments that make up the sphere. (Sphere)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
        yUp : Boolean - Defines whether the coordinates of the sphere points use a yUp orientation (true) or a zUp orientation (false). (Sphere)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (Sphere)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (Sphere)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
        vertex(w:int, h:int):Vertex - Returns the vertex object specified by the grid position of the mesh. (Sphere)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    radius:Number[read-write]
      Defines the radius of the sphere. Defaults to 100.
      Implementation
       public function get radius():Number
       public function set radius(value:Number):void


    segmentsH:Number[read-write]
      Defines the number of vertical segments that make up the sphere. Defaults to 1.
      Implementation
       public function get segmentsH():Number
       public function set segmentsH(value:Number):void


    segmentsW:Number[read-write]
      Defines the number of horizontal segments that make up the sphere. Defaults to 8.
      Implementation
       public function get segmentsW():Number
       public function set segmentsW(value:Number):void


    yUp:Boolean[read-write]
      Defines whether the coordinates of the sphere points use a yUp orientation (true) or a zUp orientation (false). Defaults to true.
      Implementation
       public function get yUp():Boolean
       public function set yUp(value:Boolean):void

  CONSTRUCTOR DETAIL

    public function Sphere(init:Object = null) 
      Constructor for a sphere object.
      The init object parameters are : 'radius' defines the radius of the sphere, 'segmentsW' defines the number of segments horizontally around the sphere and 'segmentsH' which defines number of segments vertically between the poles of the sphere.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       radius:Number (default = 100, min:0)
       segmentsW:Int (default = 8, min:3)
       segmentsH:Int (default = 6, min:2)
       yUp:Boolean (default = true)
  METHOD DETAIL

    public override function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.

    public function vertex(w:int, h:int):Vertex 
      Returns the vertex from a 2 dimensional representation of the sphere's vertex array.
      I=horizontal reference.
      J=vertical reference (0 = base of the sphere)
      Returns the vertex object specified by the grid position of the mesh.
      Parameters
       w:int - The horizontal position on the primitive mesh.
       h:int - The vertical position on the primitive mesh.
       Returns
       Vertex
  CODE EXAMPLES

    
      How to couple Away and the Wow engine
      package {
      //Away3d
      import away3d.objects.Plane;
      import away3d.objects.Sphere;
      import away3d.core.material.*;
      import away3d.core.scene.*;
      import away3d.core.render.*;
      import away3d.core.math.Number3D;
      //wow
      import fr.seraf.wow.primitive.WSphere;
      import fr.seraf.wow.core.WOWEngine;
      import fr.seraf.wow.core.data.WVector;
      import fr.seraf.wow.math.WVectorMath;
      import fr.seraf.wow.primitive.WOWPlane;
      //flash
      import flash.events.Event;
      import flash.display.Sprite;
      import flash.display.BitmapData;
      import flash.display.StageAlign;
      import flash.display.StageScaleMode;
      import flash.events.*;
      //
      public class AwayWow extends Sprite {
      private var scene:Scene3D;
      private var view:View3D;
      private var zero:Number3D;
      private var wow:WOWEngine;
      private var sphereArray:Array;
      public function AwayWow() {
      setupStage();
      setupAway();
      setupWow();
      createGround();
      //we create 20 balls
      sphereArray=new Array();
      var ballCount:int=20;
      while(ballCount--) {
      createOneSphere(int(-500+Math.random()*1000),int(Math.random()*500+300),int(-500+Math.random()*1000) , int(Math.random()*50)+1);
      }
      // and we run the engines (away3d, wow-engine) each frame
      addEventListener(Event.ENTER_FRAME, enterFrameHandler);
      addEventListener(Event.RESIZE, onResize);
      addEventListener(MouseEvent.MOUSE_DOWN, reset);
      }
      /**
      * initial setup for the Swf Stage.
      */
      public function setupStage(): void
      {
      stage.scaleMode = StageScaleMode.NO_SCALE;
      stage.align = StageAlign.TOP_LEFT;
      }
      /**
      * initial setup for Away3D.
      */
      private function setupAway():void
      {
      zero = new Number3D(0,0,0);
      scene = new Scene3D();
      view = new View3D({scene:scene,  renderer:Renderer.BASIC});
      view.x = stage.stageWidth * .5;
      view.y = stage.stageHeight * .5;
      view.camera.x = 0;
      view.camera.y = 0;
      view.camera.z = -2000;
      addChild(view);
      view.camera.lookAt(zero);
      }
      /**
      * initial setup for WOW-Engine.
      */
      public function setupWow(): void
      {
      //this is the physics engine
      wow=new WOWEngine(.3);
      wow.collisionResponseMode = wow.SELECTIVE;
      //setup the gravity
      wow.addMasslessForce(new WVector(0,6,0));
      }
      /**
      *  create a ground
      */
      public function createGround(): void
      {
      //we create a ground on the physics engine
      var ground:WOWPlane = new WOWPlane(0,0,0);
      ground.elasticity=0.6;
      ground.friction=0.3;
      wow.addParticle(ground);
      // Away ground plane
      var mat:BitmapMaterial = new BitmapMaterial(new BitmapData(256,256, false, 0x006699), {smooth:false, debug:true});
      var plane:Plane = new Plane({material:mat , width:1000, height:1000, segmentsH:12, segmentsW:12} );
      scene.addChild(plane);
      }
      /**
      * create one Sphere for physics and one for rendering
      */
      public function createOneSphere(x:int,y:int,z:int,radius:int): void
      {
      //we create a physics sphere the param is position x,y,z the radius, if it's fixed or not and the mass
      var wowSphere:WSphere = new WSphere(x,y,z,radius,false,0.1);
      wowSphere.elasticity=0.5;
      wowSphere.friction=0.02;
      wow.addParticle(wowSphere);
      //Away Object starting by the material...
      var mat:BitmapMaterial = new BitmapMaterial(new BitmapData(256,256, false, 0x999900), {smooth:false, debug:true});
      var sphere:Sphere = new Sphere({material:mat , radius:radius, segmentsH:6, segmentsW:6} );
      sphere.x=-wowSphere.px;
      sphere.y=-wowSphere.py;
      sphere.z=-wowSphere.pz;
      scene.addChild(sphere);
      //
      sphereArray.push({physics:wowSphere,render:sphere});
      }
      private function enterFrameHandler( event : Event ):void
      {
      //we update the physics engine
      wow.step()
      // we link the  physics sphere to the rendered sphere
      var ballCount:int=sphereArray.length;
      var physics:WSphere;
      var render:Sphere;
      while(ballCount--){
      physics = sphereArray[ballCount].physics;
      render = sphereArray[ballCount].render;
      render.x=physics.px;
      render.y=-physics.py;
      render.z=physics.pz;
      }
      //we update the 3d view
      var procent = (mouseY/stage.stageHeight)*100;
      var distance:Number = 2000-(mouseY*2);
      view.camera.moveTo(zero);
      var destx =  (view.y-(mouseX )) /2;
      view.camera.y = (20*procent);
      view.camera.rotationY = destx;
      view.camera.moveBackward(distance);
      view.camera.lookAt(zero);
      view.render();
      }
      private function reset(event:MouseEvent):void
      {
      var ballCount:int=sphereArray.length;
      var physics:WSphere;
      var render:Sphere;
      var nx:int;
      var ny:int;
      var nz:int;
      while(ballCount--){
      physics = sphereArray[ballCount].physics;
      render = sphereArray[ballCount].render;
      nx =  -200+Math.random()*400;
      ny =  Math.random()*500+500;
      nz =  -200+Math.random()*400;
      render.x = physics.py = nx;
      render.y = ny;
      physics.py = -ny;
      render.z = physics.pz = nz;
      }
      }
      private function onResize(event:Event):void
      {
      this.view.x = stage.stageWidth *.5;
      this.view.y = stage.stageHeight *.5;
      }
      }
      }
      Source Files : http://seraf.mediabox.fr/wow-engine/
      SWF Example : http://www.closier.nl/playground/WoW_away.swf
      Wow and polygonal labs libraries need to be installed as well.
      Away3d HelloFlex.mxml
      &lt;!-- Sebastiaan Holtrop, the factore, www.tfe.nl --&gt;
      &lt;?xml version="1.0" encoding="utf-8"?&gt;
      &lt;mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"&gt;
      &lt;mx:Script&gt;
      &lt;![CDATA[
      import away3d.core.material.*;
      import away3d.core.scene.*;
      import away3d.objects.*;
      import mx.core.UIComponent;
      public var view:View3D;
      public var sphere:Sphere;
      public function createScene() {
      this.view = new View3D({x:300, y:200});
      var holderUI:UIComponent = new UIComponent();
      this.addChild(holderUI);
      holderUI.addChild(view);
      this.sphere = new Sphere({material:"blue#cyan", radius:250, segmentsW:12, segmentsH:9, y:50, x:10, z:10});
      this.view.scene.addChild(this.sphere);
      this.view.camera.lookAt(this.sphere.position);
      this.addEventListener(Event.ENTER_FRAME, onEnterFrame);
      }
      private function onEnterFrame(event:Event):void {
      this.view.render();
      this.sphere.rotationY += 5;
      }
      ]]&gt;
      &lt;/mx:Script&gt;
      &lt;mx:Button label="hello world" click="createScene();" /&gt;
      &lt;/mx:Application&gt;
      Flex Example
      *Lesson_Basic_01_HelloAway3D.fla
      // import core library
      import away3d.core.scene.*;
      // import geometry primitives
      import away3d.objects.*;
      // create a 3D-viewport
      var view:View3D = new View3D({x:300, y:200});
      // add viewport to the stage
      addChild(view);
      // create a sphere
      var sphere:Object3D = new Sphere({material:"blue#cyan", radius:250, segmentsW:12, segmentsH:9, y:50, x:10, z:10});
      // add the sphere to the scene
      view.scene.addChild(sphere);
      // point camera at the sphere
      view.camera.lookAt(sphere.position);
      // every frame
      addEventListener(Event.ENTER_FRAME, onEnterFrame);
      function onEnterFrame(event:Event):void {
      // rotate sphere around the Y-axis
      sphere.rotationY = getTimer() / 100;
      // rerender viewport on each frame
      view.render();
      }
      From Lesson_Basic_01_HelloAway3D.fla
      **HelloWorld.as
      package {
      import flash.display.*;
      import flash.events.*;
      import away3d.objects.*;
      import away3d.core.scene.*;
      import away3d.core.material.*;
      public class HelloWorld extends Sprite {
      var view:View3D;
      var sphereA:Sphere;
      function HelloWorld() {
      stage.frameRate=60;
      addEventListener(Event.ENTER_FRAME,away3dloop);
      away3dcreate();
      }
      function away3dcreate():void {
      addChild(view=new View3D({x:stage.stageWidth/2, y:stage.stageHeight/2}));
      sphereA=new Sphere({material:new WireColorMaterial()});
      view.scene.addChild(sphereA);
      }
      function away3dloop(event:Event):void {
      view.camera.moveTo(sphereA.position);
      view.camera.rotationY=mouseX/2;
      view.camera.rotationX=mouseY/2;
      view.camera.moveBackward(500);
      sphereA.rotationY+=1;
      view.render();
      }
      }
      }
      //sphereA=new Sphere({material:new WireColorMaterial(0xAA33DD),z:1, segmentsW:8,segmentsH:8,radius:100,x:0, bothsides:false});
      Source Files : http://away3d.com/swfs/HelloWorld.html
      SWF Example : http://away3d.com/swfs/HelloWorld.html
      Right click on the purple ball in the SWF to see Stat window

Sprite2D
========
  Package : away3d.sprites
  Class : public class Sprite2D
  Inheritance : Object3D
  Implements : IPrimitiveProvider
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
        bitmap : BitmapData - Defines the bitmapData object to use for the sprite texture. (Sprite2D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (Object3D)
        deltaZ : Number - An optional offset value added to the z depth used to sort the sprite (Sprite2D)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) maxX : Number - Returns the maximum x value of the 3d object (Object3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (Object3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (Object3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (Object3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (Object3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (Object3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
        rotation : Number - Defines the overall 2d rotation of the sprite object (Sprite2D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
        scaling : Number - Defines the overall scaling of the sprite object (Sprite2D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
        smooth : Boolean - Defines whether the texture bitmap is smoothed (bilinearly filtered) when drawn to screen (Sprite2D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (Sprite2D)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
        primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Sprite2D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (Object3D)
    (^) tick(time:int):void (Object3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PROPERTY DETAIL

    public var bitmap:BitmapData 
      Defines the bitmapData object to use for the sprite texture.

    public var deltaZ:Number 
      An optional offset value added to the z depth used to sort the sprite

    public var rotation:Number 
      Defines the overall 2d rotation of the sprite object

    public var scaling:Number 
      Defines the overall scaling of the sprite object

    public var smooth:Boolean 
      Defines whether the texture bitmap is smoothed (bilinearly filtered) when drawn to screen
  CONSTRUCTOR DETAIL

    public function Sprite2D(bitmap:BitmapData, init:Object = null) 
      Parameters
       bitmap:BitmapData - The bitmapData object to be used as the sprite's texture.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       scaling:Number (default = 1, min:0)
       rotation:Number (default = 0)
       smooth:Boolean (default = false)
       deltaZ:Number (default = 0)
  METHOD DETAIL

    public override function primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void 
      Called from the PrimitiveTraverser when passing DrawPrimitive objects to the primitive consumer object
      Parameters
       consumer:IPrimitiveConsumer - The consumer instance
       session:AbstractRenderSession - The render session of the 3d object
       See also
       away3d.core.traverse.PrimitiveTraverser
       away3d.core.draw.DrawScaledBitmap

  CODE EXAMPLES

    
      There are currently no examples for this class


SpriteRenderSession
===================
  Package : away3d.core.render
  Class : public class SpriteRenderSession
  Inheritance : AbstractRenderSession
  Description : 

  PUBLIC PROPERTIES
    (^) children : Dictionary - Dictionary of child displayobjects. (AbstractRenderSession)
    (^) graphics : Graphics - Reference to the current graphics object being used for drawing. (AbstractRenderSession)
    (^) lightarray : LightArray - Defines the light provider object for the render sesion. (AbstractRenderSession)
    (^) newLayer : Sprite - Holds the last added layer sprite. (AbstractRenderSession)
    (^) sessions : Dictionary - Dictionary of child sessions. (AbstractRenderSession)
    (^) spriteLayers : Array - Dictionary of sprite layers for rendering composite materials. (AbstractRenderSession)
        view : View3D - Defines the view object used for the render session. (SpriteRenderSession)

  PUBLIC METHODS
        (SpriteRenderSession)
        addDisplayObject(child:DisplayObject):void - Adds a display object to the render session display list. (SpriteRenderSession)
        addLayerObject(child:Sprite):void - Adds a layer sprite to the render session display list. (SpriteRenderSession)
        clear():void - Clears the render session. (SpriteRenderSession)
        clone():AbstractRenderSession - Duplicates the render session's properties to another render session. (SpriteRenderSession)
        flush():void - Flushes any cached drawing operations to screen. (SpriteRenderSession)
        getContainer(view:View3D):DisplayObject - Returns a display object representing the container for the specified view. (SpriteRenderSession)
    (^) registerChildSession(session:AbstractRenderSession):void - Adds a session as a child of the session object. (AbstractRenderSession)
    (^) renderBitmap(bitmap:BitmapData, v0:ScreenVertex, smooth:Boolean = false):void - Draws a non-scaled bitmap into the graphics object. (AbstractRenderSession)
    (^) renderFogColor(color:int, alpha:Number):void - Draws a fog element into the graphics object. (AbstractRenderSession)
    (^) renderLine(v0:ScreenVertex, v1:ScreenVertex, width:Number, color:uint, alpha:Number):void - Draws a segment element into the graphics object. (AbstractRenderSession)
    (^) renderScaledBitmap(primitive:DrawScaledBitmap, bitmap:BitmapData, mapping:Matrix, smooth:Boolean = false):void - Draws a bitmap with a precalculated matrix into the graphics object. (AbstractRenderSession)
    (^) renderTriangleBitmap(bitmap:BitmapData, map:Matrix, v0:ScreenVertex, v1:ScreenVertex, v2:ScreenVertex, smooth:Boolean, repeat:Boolean, layerGraphics:Graphics = null):void - Draws a triangle element with a bitmap texture into the graphics object. (AbstractRenderSession)
    (^) renderTriangleColor(color:int, alpha:Number, v0:ScreenVertex, v1:ScreenVertex, v2:ScreenVertex):void - Draws a triangle element with a fill color into the graphics object. (AbstractRenderSession)
    (^) renderTriangleLine(width:Number, color:int, alpha:Number, v0:ScreenVertex, v1:ScreenVertex, v2:ScreenVertex):void - Draws a wire triangle element into the graphics object. (AbstractRenderSession)
    (^) renderTriangleLineFill(width:Number, color:int, alpha:Number, wirecolor:int, wirealpha:Number, v0:ScreenVertex, v1:ScreenVertex, v2:ScreenVertex):void - Draws a wire triangle element with a fill color into the graphics object. (AbstractRenderSession)

  PROTECTED METHODS
        createLayer():void - Creates a new render layer for rendering composite materials. (SpriteRenderSession)

  PROPERTY DETAIL

    view:View3D[read-write]
      Defines the view object used for the render session.
      Implementation
       public function get view():View3D
       public function set view(value:View3D):void

  CONSTRUCTOR DETAIL

    public function SpriteRenderSession() 
  METHOD DETAIL

    public override function addDisplayObject(child:DisplayObject):void 
      Adds a display object to the render session display list.
      Parameters
       child:DisplayObject - The display object to add.

    public override function addLayerObject(child:Sprite):void 
      Adds a layer sprite to the render session display list. Doesn't update graphics so that elements in comosite materials can render in separate layers.
      Parameters
       child:Sprite - The display object to add.

    public override function clear():void 
      Clears the render session.

    public override function clone():AbstractRenderSession 
      Duplicates the render session's properties to another render session.
      Returns
      AbstractRenderSession - The new render session instance with duplicated properties applied

    protected override function createLayer():void 
      Creates a new render layer for rendering composite materials.

    public override function flush():void 
      Flushes any cached drawing operations to screen.

    public override function getContainer(view:View3D):DisplayObject 
      Returns a display object representing the container for the specified view.
      Parameters
       view:View3D - The view object being rendered.
       Returns
       DisplayObject - The display object container.
  CODE EXAMPLES

    
      There are currently no examples for this class


Stats
=====
  Package : away3d.core.stats
  Class : public class Stats
  Inheritance
  PUBLIC PROPERTIES
        displayMenu : Sprite = null -  (Stats)
        facecount : int -  (Stats)
        geomMenu : Sprite = null -  (Stats)
        : View3D
 scopeMenu : View3D = null  Description : 
 -  (Stats)
        sourceURL : String -  (Stats)
        stats : String = "" -  (Stats)
        type : String -  (Stats)
        url : String -  (Stats)

  PUBLIC METHODS
        -  (Stats)
        addObject(node:BaseMesh):void -  (Stats)
        addSourceURL(url:String):void -  (Stats)
        clearObjects():void -  (Stats)
        displayStats(e:ContextMenuEvent):void -  (Stats)
        updateStats(renderedfaces:int, camera:Camera3D):void -  (Stats)
        viewSource(e:ContextMenuEvent):void -  (Stats)
        visitWebsite(e:ContextMenuEvent):void -  (Stats)

  PROPERTY DETAIL

    public var displayMenu:Sprite = null 

    public var facecount:int 

    public var geomMenu:Sprite = null 

    public var scopeMenu:View3D = null 

    public var sourceURL:String 

    public var stats:String = "" 

    public var type:String 

    public var url:String 
  CONSTRUCTOR DETAIL

    public function Stats(scope:View3D, framerate:Number = 0) 
      Parameters
       scope:View3D
       framerate:Number (default = 0)
  METHOD DETAIL

    public function addObject(node:BaseMesh):void 
      Parameters
       node:BaseMesh

    public function addSourceURL(url:String):void 
      Parameters
       url:String

    public function clearObjects():void 

    public function displayStats(e:ContextMenuEvent):void 
      Parameters
       e:ContextMenuEvent

    public function updateStats(renderedfaces:int, camera:Camera3D):void 
      Parameters
       renderedfaces:int
       camera:Camera3D

    public function viewSource(e:ContextMenuEvent):void 
      Parameters
       e:ContextMenuEvent

    public function visitWebsite(e:ContextMenuEvent):void 
      Parameters
       e:ContextMenuEvent
  CODE EXAMPLES

    
      There are currently no examples for this class


TargetCamera3D
==============
  Package : away3d.cameras
  Class : public class TargetCamera3D
  Inheritance : Object3D
  Subclasses : HoverCamera3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) aperture : Number (Camera3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (Object3D)
    (^) dof : Boolean (Camera3D)
    (^) doflevels : Number = 16 (Camera3D)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) focus : Number - A divisor value for the perspective depth of the view. (Camera3D)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) maxblur : Number = 150 (Camera3D)
    (^) maxX : Number - Returns the maximum x value of the 3d object (Object3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (Object3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (Object3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (Object3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (Object3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (Object3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
        parent : ObjectContainer3D (TargetCamera3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
        target : Object3D - The 3d object targeted by the camera. (TargetCamera3D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
        view : Matrix3D - [read-only] Returns the transformation matrix used to resolve the scene to the view. (TargetCamera3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)
    (^) zoom : Number - Provides an overall scale value to the view (Camera3D)

  PROTECTED PROPERTIES
        (TargetCamera3D)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) clone(object:* = null):* (Camera3D)
    (^) disableDof():void (Camera3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) enableDof():void (Camera3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pan(angle:Number):void - Rotates the camera in its horizontal plane. (Camera3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Object3D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (Object3D)
    (^) screen(object:Object3D, vertex:Vertex = null):ScreenVertex (Camera3D)
    (^) tick(time:int):void (Object3D)
    (^) tilt(angle:Number):void - Rotates the camera in its vertical plane. (Camera3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  PROPERTY DETAIL

    parent:ObjectContainer3D[write-only]
      Cannot parent a TargetCamera3D object.
      Implementation
       public function set parent(value:ObjectContainer3D):void
       Throws
       - TargetCamera can't be parented.

    public var target:Object3D 
      The 3d object targeted by the camera.

    view:Matrix3D[read-only]
      Returns the transformation matrix used to resolve the scene to the view. Used in the ProjectionTraverser class
      Implementation
       public function get view():Matrix3D

  CONSTRUCTOR DETAIL

    public function TargetCamera3D(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       target:Object3D
  CODE EXAMPLES

    
      There are currently no examples for this class


TextureLoader
=============
  Package : away3d.loaders.utils
  Class : public class TextureLoader
  Inheritance
  PUBLIC PROPERTIES
        filename : String - [read-only] (TextureLoader)

  PUBLIC METHODS
        -  (TextureLoader)
        load(request:URLRequest, context:LoaderContext = null):void -  (TextureLoader)

  PROPERTY DETAIL

    filename:String[read-only]
      Implementation
       public function get filename():String

  CONSTRUCTOR DETAIL

    public function TextureLoader() 
  METHOD DETAIL

    public override function load(request:URLRequest, context:LoaderContext = null):void 
      Parameters
       request:URLRequest
       context:LoaderContext (default = null)
  CODE EXAMPLES

    
      There are currently no examples for this class


TextureLoadQueue
================
  Package : away3d.loaders.utils
  Class : public class TextureLoadQueue
  Inheritance
  PUBLIC PROPERTIES
        currentItemIndex : int - [read-only] Returns the index of the current texture baing loaded (TextureLoadQueue)
        : TextureLoader
 currentLoader : TextureLoader  Description :  Returns the loader object for the current texture being loaded
 - [read-only] Returns the loader object for the current texture being loaded (TextureLoadQueue)
        currentURLRequest : URLRequest - [read-only] Returns the url request object for the current texture being loaded (TextureLoadQueue)
        images : Array - [read-only] Returns an array of loader objects containing the loaded images (TextureLoadQueue)
        numItems : int - [read-only] Returns the number of items whating in the queue to be loaded. (TextureLoadQueue)
        percentLoaded : Number - [read-only] Returns the overall progress of the loader queue as a percentage. (TextureLoadQueue)
        progress : Number - [read-only] Returns the overall progress of the loader queue. (TextureLoadQueue)

  PUBLIC METHODS
        (TextureLoadQueue)
        addItem(loader:TextureLoader, request:URLRequest):void - Adds a new loader and request object to the load queue. (TextureLoadQueue)
        start():void - Starts the load queue loading. (TextureLoadQueue)

  EVENTS
        (TextureLoadQueue)
        (TextureLoadQueue)
        (TextureLoadQueue)
        (TextureLoadQueue)
        (TextureLoadQueue)

  PROPERTY DETAIL

    currentItemIndex:int[read-only]
      Returns the index of the current texture baing loaded
      Implementation
       public function get currentItemIndex():int


    currentLoader:TextureLoader[read-only]
      Returns the loader object for the current texture being loaded
      Implementation
       public function get currentLoader():TextureLoader


    currentURLRequest:URLRequest[read-only]
      Returns the url request object for the current texture being loaded
      Implementation
       public function get currentURLRequest():URLRequest


    images:Array[read-only]
      Returns an array of loader objects containing the loaded images
      Implementation
       public function get images():Array


    numItems:int[read-only]
      Returns the number of items whating in the queue to be loaded.
      Implementation
       public function get numItems():int


    percentLoaded:Number[read-only]
      Returns the overall progress of the loader queue as a percentage.
      Implementation
       public function get percentLoaded():Number


    progress:Number[read-only]
      Returns the overall progress of the loader queue. Progress of 0 means that nothing has loaded. Progress of 1 means that all the items are fully loaded
      Implementation
       public function get progress():Number

  CONSTRUCTOR DETAIL

    public function TextureLoadQueue() 
  METHOD DETAIL

    public function addItem(loader:TextureLoader, request:URLRequest):void 
      Adds a new loader and request object to the load queue.
      Parameters
       loader:TextureLoader - The laoder object to add to the queue.
       request:URLRequest - The url request object to add tp the queue.

    public function start():void 
      Starts the load queue loading.
  EVENT DETAIL

    Event object type: flash.events.Event
      httpStatus
      event
      Event object type: flash.events.HTTPStatusEvent


    Event object type: flash.events.HTTPStatusEvent
      ioError
      event
      Event object type: flash.events.IOErrorEvent


    Event object type: flash.events.IOErrorEvent
      progress
      event
      Event object type: flash.events.ProgressEvent


    Event object type: flash.events.ProgressEvent
      securityError
      event
      Event object type: flash.events.SecurityErrorEvent


    Event object type: flash.events.SecurityErrorEvent
      Wiki link

  CODE EXAMPLES

    
      There are currently no examples for this class


TickTraverser
=============
  Package : away3d.core.traverse
  Class : public class TickTraverser
  Inheritance : Traverser
  Description : based method for all objects in scene

  PUBLIC PROPERTIES
        now : int - Defines the current time in milliseconds from the start of the flash movie. (TickTraverser)

  PUBLIC METHODS
        (TickTraverser)
    (^) apply(node:Object3D):void - Executed when the traverser is applied to the node. (Traverser)
        enter(node:Object3D):void - Executed when the traverser enters the node. (TickTraverser)
    (^) leave(node:Object3D):void - Executed when the traverser leaves the node. (Traverser)
    (^) match(node:Object3D):Boolean - Determines if the specified node is required to be traversed. (Traverser)

  PROPERTY DETAIL

    public var now:int 
      Defines the current time in milliseconds from the start of the flash movie.
  CONSTRUCTOR DETAIL

    public function TickTraverser() 
  METHOD DETAIL

    public override function enter(node:Object3D):void 
      Executed when the traverser enters the node.
      Parameters
       node:Object3D
  CODE EXAMPLES

    
      There are currently no examples for this class


Torus
=====
  Package : away3d.primitives
  Class : public class Torus
  Inheritance : AbstractPrimitive, Mesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
        radius : Number - Defines the overall radius of the torus. (Torus)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractPrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
        segmentsR : Number - Defines the number of radial segments that make up the torus. (Torus)
        segmentsT : Number - Defines the number of tubular segments that make up the torus. (Torus)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
        tube : Number - Defines the tube radius of the torus. (Torus)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
        yUp : Boolean - Defines whether the coordinates of the torus points use a yUp orientation (true) or a zUp orientation (false). (Torus)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (Torus)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (Torus)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
        vertex(r:int, t:int):Vertex - Returns the vertex object specified by the grid position of the mesh. (Torus)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    radius:Number[read-write]
      Defines the overall radius of the torus. Defaults to 100.
      Implementation
       public function get radius():Number
       public function set radius(value:Number):void


    segmentsR:Number[read-write]
      Defines the number of radial segments that make up the torus. Defaults to 8.
      Implementation
       public function get segmentsR():Number
       public function set segmentsR(value:Number):void


    segmentsT:Number[read-write]
      Defines the number of tubular segments that make up the torus. Defaults to 6.
      Implementation
       public function get segmentsT():Number
       public function set segmentsT(value:Number):void


    tube:Number[read-write]
      Defines the tube radius of the torus. Defaults to 40.
      Implementation
       public function get tube():Number
       public function set tube(value:Number):void


    yUp:Boolean[read-write]
      Defines whether the coordinates of the torus points use a yUp orientation (true) or a zUp orientation (false). Defaults to true.
      Implementation
       public function get yUp():Boolean
       public function set yUp(value:Boolean):void

  CONSTRUCTOR DETAIL

    public function Torus(init:Object = null) 
      Constructor for a torus object.
      The init object parameters are : 'radius' defines the radius of the torus, 'tube' defines the tube radius (thickness), 'segmentsR' defines the number of segments the torus is divided into around rotationally around the circumference of the circle defined by the radius and 'segmentsT' which defines number of segments for the tube, around it's cross-section.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       radius:Number (default = 100, min:0)
       tube:Number (default = 40, min:0, max:radius)
       segmentsR:Int (default = 8, min:3)
       segmentsT:Int (default = 6, min:3)
       yUp:Boolean (default = true)
  METHOD DETAIL

    public override function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.

    public function vertex(r:int, t:int):Vertex 
      Returns the vertex from a 2 dimensional representation of the torus' vertex array.
      I=horizontal reference.
      J=vertical reference
      Returns the vertex object specified by the grid position of the mesh.
      Parameters
       r:int - The radial position on the primitive mesh.
       t:int - The tubular position on the primitive mesh.
       Returns
       Vertex
  CODE EXAMPLES

    
      There are currently no examples for this class


TransformBitmapMaterial
=======================
  Package : away3d.materials
  Class : public class TransformBitmapMaterial
  Inheritance : BitmapMaterial
  Implements : ITriangleMaterial, IUVMaterial
  Subclasses : AnimatedBitmapMaterial, BitmapFileMaterial, MovieMaterial
  Description : Basic bitmap texture material

  PUBLIC PROPERTIES
    (^) alpha : Number - Defines an alpha value for the texture bitmap. (BitmapMaterial)
    (^) bitmap : BitmapData - Returns the bitmapData object being used as the material texture. (BitmapMaterial)
    (^) blendMode : String - Defines a blendMode value for the texture bitmap. (BitmapMaterial)
    (^) color : uint - Defines a colored tint for the texture bitmap. (BitmapMaterial)
    (^) debug : Boolean = false - Toggles debug mode: textured triangles are drawn with white outlines, precision correction triangles are drawn with blue outlines. (BitmapMaterial)
        globalProjection : Boolean - Determines whether a projected texture uses offsetX, offsetY and projectionVector values relative to scene cordinates. (TransformBitmapMaterial)
    (^) height : Number - Returns the height of the bitmapData being used as the material texture. (BitmapMaterial)
        offsetX : Number - Offsets the x coordinates of the texture in uv-space (TransformBitmapMaterial)
        offsetY : Number - Offsets the y coordinates of the texture in uv-space (TransformBitmapMaterial)
    (^) precision : Number - Corrects distortion caused by the affine transformation (non-perpective) of textures. (BitmapMaterial)
        projectionVector : Number3D - Projects the texture in object space, ignoring the uv coordinates of the vertex objects. (TransformBitmapMaterial)
    (^) repeat : Boolean = false - Determines if texture bitmap will tile in uv-space (BitmapMaterial)
        rotation : Number - Rotates the texture in uv-space (TransformBitmapMaterial)
        scaleX : Number - Scales the x coordinates of the texture in uv-space (TransformBitmapMaterial)
        scaleY : Number - Scales the y coordinates of the texture in uv-space (TransformBitmapMaterial)
    (^) smooth : Boolean = false - Determines if texture bitmap is smoothed (bilinearly filtered) when drawn to screen. (BitmapMaterial)
        throughProjection : Boolean - Determines whether a projected texture is visble on the faces pointing away from the projection. (TransformBitmapMaterial)
        transform : Matrix - Transforms the texture in uv-space (TransformBitmapMaterial)
    (^) visible : Boolean - Indicates whether the material is visible (BitmapMaterial)
    (^) width : Number - Returns the width of the bitmapData being used as the material texture. (BitmapMaterial)

  PROTECTED PROPERTIES
        (TransformBitmapMaterial)
    (^) addOnResize(listener:Function):void - Default method for adding a materialresize event listener (BitmapMaterial)
        getPixel32(u:Number, v:Number):uint - Returns the argb value of the bitmapData pixel at the given u v coordinate. (TransformBitmapMaterial)
    (^) removeOnResize(listener:Function):void - Default method for removing a materialresize event listener (BitmapMaterial)
        renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO - Renders a bitmapData surface object for the speficied face. (TransformBitmapMaterial)
    (^) renderLayer(tri:DrawTriangle, layer:Sprite, level:int):void - Renders a material layer for the specified triangle. (BitmapMaterial)
        renderTriangle(tri:DrawTriangle):void (TransformBitmapMaterial)
        updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (TransformBitmapMaterial)

  PROTECTED METHODS
        getMapping(tri:DrawTriangle):Matrix - Calculates the mapping matrix required to draw the triangle texture to screen. (TransformBitmapMaterial)
    (^) setColorTransform():void (BitmapMaterial)
    (^) updateRenderBitmap():void (BitmapMaterial)

  EVENTS
    (^) (BitmapMaterial)

  PROPERTY DETAIL

    globalProjection:Boolean[read-write]
      Determines whether a projected texture uses offsetX, offsetY and projectionVector values relative to scene cordinates.
      Implementation
       public function get globalProjection():Boolean
       public function set globalProjection(value:Boolean):void
       See also
       projectionVector
       offsetX
       offsetY


    offsetX:Number[read-write]
      Offsets the x coordinates of the texture in uv-space
      Implementation
       public function get offsetX():Number
       public function set offsetX(value:Number):void


    offsetY:Number[read-write]
      Offsets the y coordinates of the texture in uv-space
      Implementation
       public function get offsetY():Number
       public function set offsetY(value:Number):void


    projectionVector:Number3D[read-write]
      Projects the texture in object space, ignoring the uv coordinates of the vertex objects. Texture renders normally when set to null.
      Implementation
       public function get projectionVector():Number3D
       public function set projectionVector(value:Number3D):void


    rotation:Number[read-write]
      Rotates the texture in uv-space
      Implementation
       public function get rotation():Number
       public function set rotation(value:Number):void


    scaleX:Number[read-write]
      Scales the x coordinates of the texture in uv-space
      Implementation
       public function get scaleX():Number
       public function set scaleX(value:Number):void


    scaleY:Number[read-write]
      Scales the y coordinates of the texture in uv-space
      Implementation
       public function get scaleY():Number
       public function set scaleY(value:Number):void


    throughProjection:Boolean[read-write]
      Determines whether a projected texture is visble on the faces pointing away from the projection.
      Implementation
       public function get throughProjection():Boolean
       public function set throughProjection(value:Boolean):void
       See also
       projectionVector


    transform:Matrix[read-write]
      Transforms the texture in uv-space
      Implementation
       public function get transform():Matrix
       public function set transform(value:Matrix):void

  CONSTRUCTOR DETAIL

    public function TransformBitmapMaterial(bitmap:BitmapData, init:Object = null) 
      Parameters
       bitmap:BitmapData - The bitmapData object to be used as the material's texture.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       transform:Object (default = Matrix)
       scaleX:Number (default = _scaleX)
       scaleY:Number (default = _scaleY)
       offsetX:Number (default = _offsetX)
       offsetY:Number (default = _offsetY)
       rotation:Number (default = _rotation)
       projectionVector:Object (default = Number3D)
       throughProjection:Boolean (default = true)
       globalProjection:Boolean (default = false)
  METHOD DETAIL

    protected override function getMapping(tri:DrawTriangle):Matrix 
      Calculates the mapping matrix required to draw the triangle texture to screen.
      Parameters
       tri:DrawTriangle - The data object holding all information about the triangle to be drawn.
       Returns
       Matrix - The required matrix object.

    public override function getPixel32(u:Number, v:Number):uint 
      Returns the argb value of the bitmapData pixel at the given u v coordinate.
      Parameters
       u:Number - The u (horizontal) texture coordinate.
       v:Number - The v (verical) texture coordinate.
       Returns
       uint - The argb pixel value.

    public override function renderFace(face:Face, containerRect:Rectangle, parentFaceVO:FaceVO):FaceVO 
      Renders a bitmapData surface object for the speficied face.
      Parameters
       face:Face - The face object onto which the rendered sufrace is applied.
       containerRect:Rectangle - The rectangle object defining the bounds of the face in uv-space.
       parentFaceVO:FaceVO - The value object of the preceeding surface.
       Returns
       FaceVO

    public override function renderTriangle(tri:DrawTriangle):void 
      Sends data from the material coupled with data from the DrawTriangle primitive to the render session.
      Parameters
       tri:DrawTriangle

    public override function updateMaterial(source:Object3D, view:View3D):void 
      Called once per render loop when material is visible.
      Parameters
       source:Object3D
       view:View3D
  CODE EXAMPLES

    
      There are currently no examples for this class


Traverser
=========
  Package : away3d.core.traverse
  Class : public class Traverser
  Subclasses : BlockerTraverser, PrimitiveTraverser, ProjectionTraverser, TickTraverser
  Description : 

  PUBLIC METHODS
        apply(node:Object3D):void - Executed when the traverser is applied to the node. (Traverser)
        enter(node:Object3D):void - Executed when the traverser enters the node. (Traverser)
        leave(node:Object3D):void - Executed when the traverser leaves the node. (Traverser)
        match(node:Object3D):Boolean - Determines if the specified node is required to be traversed. (Traverser)

  METHOD DETAIL

    public function apply(node:Object3D):void 
      Executed when the traverser is applied to the node.
      Parameters
       node:Object3D

    public function enter(node:Object3D):void 
      Executed when the traverser enters the node.
      Parameters
       node:Object3D

    public function leave(node:Object3D):void 
      Executed when the traverser leaves the node.
      Parameters
       node:Object3D

    public function match(node:Object3D):Boolean 
      Determines if the specified node is required to be traversed.
      Parameters
       node:Object3D - The 3d object to be tested.
       Returns
       Boolean - The result of the test.
  CODE EXAMPLES

    
      There are currently no examples for this class


Triangle
========
  Package : away3d.primitives
  Class : public class Triangle
  Inheritance : Mesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
        a : Vertex - Defines the first vertex that makes up the triangle. (Triangle)
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
        b : Vertex - Defines the second vertex that makes up the triangle. (Triangle)
    (^) back : ITriangleMaterial - Defines a triangle material to be used for the backface of all faces in the 3d object. (Mesh)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) bothsides : Boolean - Indicates whether both the front and reverse sides of a face should be rendered. (Mesh)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
        c : Vertex - Defines the third vertex that makes up the triangle. (Triangle)
    (^) debugbb : Boolean - Indicates whether a debug bounding box should be rendered around the 3d object. (Mesh)
    (^) elements : Array - Returns an array of the elements contained in the mesh object. (Mesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) faces : Array - Returns an array of the faces contained in the mesh object. (Mesh)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) indexes : Array -  (Mesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ITriangleMaterial - Defines the material used to render the faces in the mesh object. (Mesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) outline : ISegmentMaterial - Defines a segment material to be used for outlining the 3d object. (Mesh)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (Triangle)
    (^) addFace(face:Face):void - Adds a face object to the mesh object. (Mesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) asAS3Class(classname:String = null, packagename:String = "", round:Boolean = false, animated:Boolean = false):String - Returns a formatted string containing a self contained AS3 class definition that can be used to re-create the mesh. (Mesh)
    (^) asXML():XML - Returns an xml representation of the mesh (Mesh)
    (^) clone(object:* = null):* - Duplicates the mesh properties to another 3d object. (Mesh)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) invertFaces():void - Inverts the geometry of all face objects. (Mesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the mesh without moving the contents. (Mesh)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Mesh)
    (^) quarterFaces():void - Divides a face object into 4 equal sized face objects. (Mesh)
    (^) removeFace(face:Face):void - Removes a face object from the mesh object. (Mesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    a:Vertex[read-write]
      Vertex A of the triangle
      Defines the first vertex that makes up the triangle.
      Implementation
       public function get a():Vertex
       public function set a(value:Vertex):void


    b:Vertex[read-write]
      Vertex B of the triangle
      Defines the second vertex that makes up the triangle.
      Implementation
       public function get b():Vertex
       public function set b(value:Vertex):void


    c:Vertex[read-write]
      Vertex C of the triangle
      Defines the third vertex that makes up the triangle.
      Implementation
       public function get c():Vertex
       public function set c(value:Vertex):void

  CONSTRUCTOR DETAIL

    public function Triangle(init:Object = null) 
      Constructor for a triangle object.
      The init object parameter 'edge' defines the length of each of the sides of the triangle.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       edge:Number (default = 100, min:0)
       yUp:Boolean (default = true)
  CODE EXAMPLES

    
      There are currently no examples for this class


Trident
=======
  Package : away3d.primitives
  Class : public class Trident
  Inheritance : ObjectContainer3D, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (ObjectContainer3D)
    (^) children : Array - Returns the children of the container as an array of 3d objects (ObjectContainer3D)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) maxX : Number - Returns the maximum x value of the 3d object (ObjectContainer3D)
    (^) maxY : Number - Returns the maximum y value of the 3d object (ObjectContainer3D)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (ObjectContainer3D)
    (^) minX : Number - Returns the minimum x value of the 3d object (ObjectContainer3D)
    (^) minY : Number - Returns the minimum y value of the 3d object (ObjectContainer3D)
    (^) minZ : Number - Returns the minimum z value of the 3d object (ObjectContainer3D)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) transform : Matrix3D (Object3D)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (Trident)
    (^) addChild(child:Object3D):void - Adds a 3d object to the scene as a child of the container (ObjectContainer3D)
    (^) addChildren(... childarray):void - Adds an array of 3d objects to the scene as children of the container (ObjectContainer3D)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) clone(object:* = null):* (ObjectContainer3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) getChildByName(name:String):Object3D - Returns a 3d object specified by name from the child array of the container (ObjectContainer3D)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) movePivot(dx:Number, dy:Number, dz:Number):void - Moves the origin point of the 3d object without moving the contents (ObjectContainer3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (Object3D)
    (^) removeChild(child:Object3D):void - Removes a 3d object from the child array of the container (ObjectContainer3D)
    (^) removeChildByName(name:String):void - Removes a 3d object from the child array of the container (ObjectContainer3D)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the 3d object. (ObjectContainer3D)
    (^) tick(time:int):void (Object3D)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (ObjectContainer3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  EVENTS
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)

  CONSTRUCTOR DETAIL

    public function Trident(len:Number = 1000) 
      Parameters
       len:Number (default = 1000) - The length of the trident axes.
  CODE EXAMPLES

    
      There are currently no examples for this class


UV
==
  Package : away3d.core.base
  Class : public class UV
  Inheritance : ValueObject
  Description : 

  PUBLIC PROPERTIES
        extra : Object - An optional untyped object that can contain used-defined properties. (UV)
        u : Number - Defines the horizontal corrdinate of the texture value. (UV)
        v : Number - Defines the vertical corrdinate of the texture value. (UV)

  PUBLIC METHODS
        (UV)
    (^) addOnChange(listener:Function):void -  (ValueObject)
        clone():UV (UV)
    (^) removeOnChange(listener:Function):void -  (ValueObject)
        toString():String - Used to trace the values of a uv object. (UV)

  PROTECTED METHODS
    (^) notifyChange():void -  (ValueObject)

  PROPERTY DETAIL

    public var extra:Object 
      An optional untyped object that can contain used-defined properties.

    u:Number[read-write]
      Defines the horizontal corrdinate of the texture value.
      Implementation
       public function get u():Number
       public function set u(value:Number):void


    v:Number[read-write]
      Defines the vertical corrdinate of the texture value.
      Implementation
       public function get v():Number
       public function set v(value:Number):void

  CONSTRUCTOR DETAIL

    public function UV(u:Number = 0, v:Number = 0) 
      Parameters
       u:Number (default = 0) - [optional] The horizontal corrdinate of the texture value. Defaults to 0.
       v:Number (default = 0) - [optional] The vertical corrdinate of the texture value. Defaults to 0.
  METHOD DETAIL

    public function clone():UV 
      Duplicates the vertex properties to another Vertex object
      Returns
      UV - The new vertex instance with duplicated properties applied

    public override function toString():String 
      Used to trace the values of a uv object.
      Returns
      String - A string representation of the uv object.
  CODE EXAMPLES

    
      There are currently no examples for this class


ValueObject
===========
  Package : away3d.core.utils
  Class : public class ValueObject
  Inheritance  Subclasses : UV, Vertex
  Description : 

  PUBLIC METHODS
        addOnChange(listener:Function):void -  (ValueObject)
        removeOnChange(listener:Function):void -  (ValueObject)

  PROTECTED METHODS
        notifyChange():void -  (ValueObject)

  METHOD DETAIL

    public function addOnChange(listener:Function):void 
      Parameters
       listener:Function

    protected function notifyChange():void 

    public function removeOnChange(listener:Function):void 
      Parameters
       listener:Function
  CODE EXAMPLES

    
      There are currently no examples for this class


Vertex
======
  Package : away3d.core.base
  Class : public class Vertex
  Inheritance : ValueObject
  Description : 

  PUBLIC PROPERTIES
        extra : Object - An object that contains user defined properties. (Vertex)
        position : Number3D - The vertex position vector (Vertex)
        x : Number - Defines the x coordinate of the vertex relative to the local coordinates of the parent mesh object. (Vertex)
        y : Number - Defines the y coordinate of the vertex relative to the local coordinates of the parent mesh object. (Vertex)
        z : Number - Defines the z coordinate of the vertex relative to the local coordinates of the parent mesh object. (Vertex)

  PUBLIC METHODS
        (Vertex)
    (^) addOnChange(listener:Function):void -  (ValueObject)
        clone():Vertex (Vertex)
        project(projection:Projection):ScreenVertex - Projects the vertex to the screen space of the view. (Vertex)
    (^) removeOnChange(listener:Function):void -  (ValueObject)
        toString():String - Used to trace the values of a vertex object. (Vertex)

  PROTECTED METHODS
    (^) notifyChange():void -  (ValueObject)

  PROPERTY DETAIL

    public var extra:Object 
      An object that contains user defined properties. Defaults to null.

    position:Number3D[read-write]
      The vertex position vector
      Implementation
       public function get position():Number3D
       public function set position(value:Number3D):void


    x:Number[read-write]
      Defines the x coordinate of the vertex relative to the local coordinates of the parent mesh object.
      Implementation
       public function get x():Number
       public function set x(value:Number):void


    y:Number[read-write]
      Defines the y coordinate of the vertex relative to the local coordinates of the parent mesh object.
      Implementation
       public function get y():Number
       public function set y(value:Number):void


    z:Number[read-write]
      Defines the z coordinate of the vertex relative to the local coordinates of the parent mesh object.
      Implementation
       public function get z():Number
       public function set z(value:Number):void

  CONSTRUCTOR DETAIL

    public function Vertex(x:Number = 0, y:Number = 0, z:Number = 0) 
      Parameters
       x:Number (default = 0) - [optional] The local x position of the vertex. Defaults to 0.
       y:Number (default = 0) - [optional] The local y position of the vertex. Defaults to 0.
       z:Number (default = 0) - [optional] The local z position of the vertex. Defaults to 0.
  METHOD DETAIL

    public function clone():Vertex 
      Duplicates the vertex properties to another Vertex object
      Returns
      Vertex - The new vertex instance with duplicated properties applied

    public function project(projection:Projection):ScreenVertex 
      Projects the vertex to the screen space of the view.
      Parameters
       projection:Projection
       Returns
       ScreenVertex

    public override function toString():String 
      Used to trace the values of a vertex object.
      Returns
      String - A string representation of the vertex object.
  CODE EXAMPLES

    
      Vertex Place (Place an object at a vertex)
      vertplace(objectA,objectB, 5);//places objectA at objectB's vertice #5
      function vertplace(who,whob,vert):void {
      var vvTemp:Vertex  =whob.vertices[vert];
      who.x=whob.x + vvTemp.x;
      who.y=whob.y + vvTemp.y;
      who.z=whob.z + vvTemp.z;
      }

VertexPosition
==============
  Package : away3d.core.base
  Class : public class VertexPosition

  PUBLIC PROPERTIES
        vertex : Vertex -  (VertexPosition)
        x : Number - Defines the x coordinate. (VertexPosition)
        y : Number - Defines the y coordinate. (VertexPosition)
        z : Number - Defines the z coordinate. (VertexPosition)

  PUBLIC METHODS
        (VertexPosition)
        adjust(k:Number = 1):void - Adjusts the position of the vertex object incrementally. (VertexPosition)

  PROPERTY DETAIL

    public var vertex:Vertex 

    public var x:Number 
      Defines the x coordinate.

    public var y:Number 
      Defines the y coordinate.

    public var z:Number 
      Defines the z coordinate.
  CONSTRUCTOR DETAIL

    public function VertexPosition(vertex:Vertex) 
      Parameters
       vertex:Vertex - The vertex object used to define the default x, y and z values.
  METHOD DETAIL

    public function adjust(k:Number = 1):void 
      Adjusts the position of the vertex object incrementally.
      Parameters
       k:Number (default = 1) - The fraction by which to adjust the vertex values.
  CODE EXAMPLES

    
      There are currently no examples for this class


View3D
======
  Package : away3d.containers
  Class : public class View3D
  Inheritance
  PUBLIC PROPERTIES
        background : Sprite - A background sprite positioned under the rendered scene. (View3D)
        : Camera3D
 camera : Camera3D  Description : 
 - Camera used when rendering. (View3D)
        clip : Clipping - Clipping area used when rendering. (View3D)
        findhit : FindHit - Traverser used to find the current object under the mouse. (View3D)
        hud : Sprite - A container for 2D overlays positioned over the rendered scene. (View3D)
        mouseMaterial : IUVMaterial - Current material under the mouse. (View3D)
        mouseObject : Object3D - Current object under the mouse. (View3D)
        mouseZeroMove : Boolean - Forces mousemove events to fire even when cursor is static. (View3D)
        primitives : Array - temporary store for rendered primitives. (View3D)
        renderer : IRenderer - Renderer object used to traverse the scenegraph and output the drawing primitives required to render the scene to the view. (View3D)
        scene : Scene3D - Scene used when rendering. (View3D)
        session : AbstractRenderSession - Session object used to draw all drawing primitives returned from the renderer to the view container. (View3D)
        sourceURL : String - Optional string for storing source url. (View3D)
        stats : Boolean - Enables/Disables stats panel. (View3D)
        statsOpen : Boolean - Keeps track of whether the stats panel is currently open. (View3D)
        statsPanel : Stats - Object instance of the stats panel. (View3D)

  PUBLIC METHODS
        (View3D)
        addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener. (View3D)
        addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener. (View3D)
        addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener. (View3D)
        addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener. (View3D)
        addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener. (View3D)
        addSourceURL(url:String):void - Defines a source url string that can be accessed though a View Source option in the right-click menu. (View3D)
        clear():void - Clears previuosly rendered view from the session. (View3D)
        fireMouseMoveEvent(force:Boolean = false):void - Manually fires a mouseMove3D event. (View3D)
        flush():void - Completes the rendering of a view by flushing the session (View3D)
        getBitmapData():BitmapData (View3D)
        getContainer():DisplayObject (View3D)
        removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener. (View3D)
        removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener. (View3D)
        removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener. (View3D)
        removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener. (View3D)
        removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener. (View3D)
        render():void - Renders a snapshot of the view to the render session's view container. (View3D)

  EVENTS
        (View3D)
        (View3D)
        (View3D)
        (View3D)
        (View3D)

  PROPERTY DETAIL

    public var background:Sprite 
      A background sprite positioned under the rendered scene.

    public var camera:Camera3D 
      Camera used when rendering.
      See also
      render()


    public var clip:Clipping 
      Clipping area used when rendering. If null, the visible edges of the screen are located with the Clipping.screen() method.
      See also
      render()
      away3d.core.render.Clipping.scene()


    public var findhit:FindHit 
      Traverser used to find the current object under the mouse.
      See also
      fireMouseEvent


    public var hud:Sprite 
      A container for 2D overlays positioned over the rendered scene.

    arcane var _interactiveLayer:Sprite 

    public var mouseMaterial:IUVMaterial 
      Current material under the mouse.

    public var mouseObject:Object3D 
      Current object under the mouse.

    public var mouseZeroMove:Boolean 
      Forces mousemove events to fire even when cursor is static.

    public var primitives:Array 
      temporary store for rendered primitives.

    renderer:IRenderer[read-write]
      Renderer object used to traverse the scenegraph and output the drawing primitives required to render the scene to the view.
      Implementation
       public function get renderer():IRenderer
       public function set renderer(value:IRenderer):void


    public var scene:Scene3D 
      Scene used when rendering.
      See also
      render()


    session:AbstractRenderSession[read-write]
      Session object used to draw all drawing primitives returned from the renderer to the view container.
      Implementation
       public function get session():AbstractRenderSession
       public function set session(value:AbstractRenderSession):void
       See also
       renderer
       getContainer()


    public var sourceURL:String 
      Optional string for storing source url.

    public var stats:Boolean 
      Enables/Disables stats panel.
      See also
      away3d.core.stats.Stats


    public var statsOpen:Boolean 
      Keeps track of whether the stats panel is currently open.
      See also
      away3d.core.stats.Stats


    public var statsPanel:Stats 
      Object instance of the stats panel.
      See also
      away3d.core.stats.Stats

  CONSTRUCTOR DETAIL

    public function View3D(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       stats:Boolean (default = true)
       scene:ObjectOrInit (default = Scene3D)
       camera:ObjectOrInit (default = Camera3D)
       renderer:Object
       session:Object
       clip:Object (default = Clipping)
       x:Number (default = 0)
       y:Number (default = 0)
  METHOD DETAIL

    public function addOnMouseDown(listener:Function):void 
      Default method for adding a mouseDown3D event listener.
      Parameters
       listener:Function - The listener function.

    public function addOnMouseMove(listener:Function):void 
      Default method for adding a mouseMove3D event listener.
      Parameters
       listener:Function - The listener function.

    public function addOnMouseOut(listener:Function):void 
      Default method for adding a mouseOut3D event listener.
      Parameters
       listener:Function - The listener function.

    public function addOnMouseOver(listener:Function):void 
      Default method for adding a mouseOver3D event listener.
      Parameters
       listener:Function - The listener function.

    public function addOnMouseUp(listener:Function):void 
      Default method for adding a mouseUp3D event listener.
      Parameters
       listener:Function - The listener function.

    public function addSourceURL(url:String):void 
      Defines a source url string that can be accessed though a View Source option in the right-click menu. Requires the stats panel to be enabled.
      Parameters
       url:String - The url to the source files.

    public function clear():void 
      Clears previuosly rendered view from the session.
      See also
      session


    arcane function dispatchMouseEvent(event:MouseEvent3D):void 
      Parameters
       event:MouseEvent3D

    public function fireMouseMoveEvent(force:Boolean = false):void 
      Manually fires a mouseMove3D event.
      Parameters
       force:Boolean (default = false)

    public function flush():void 
      Completes the rendering of a view by flushing the session
      See also
      session


    public function getBitmapData():BitmapData 
      Returns the bitmapData of the rendered scene. session is required to be an instance of BitmapRenderSession, otherwise an error is thrown.
      Returns
      BitmapData - The rendered view image.
      Throws
      - incorrect session object - require BitmapRenderSession.
      See also
      session
      away3d.core.render.BitmapRenderSession


    public function getContainer():DisplayObject 
      Returns the DisplayObject container of the rendered scene.
      Returns
      DisplayObject - The DisplayObject containing the output from the render session of the view.
      See also
      session
      away3d.core.render.BitmapRenderSession
      away3d.core.render.SpriteRenderSession


    public function removeOnMouseDown(listener:Function):void 
      Default method for removing a mouseDown3D event listener.
      Parameters
       listener:Function - The listener function.

    public function removeOnMouseMove(listener:Function):void 
      Default method for removing a mouseMove3D event listener.
      Parameters
       listener:Function - The listener function.

    public function removeOnMouseOut(listener:Function):void 
      Default method for removing a mouseOut3D event listener.
      Parameters
       listener:Function - The listener function.

    public function removeOnMouseOver(listener:Function):void 
      Default method for removing a mouseOver3D event listener.
      Parameters
       listener:Function - The listener function.

    public function removeOnMouseUp(listener:Function):void 
      Default method for removing a mouseUp3D event listener.
      Parameters
       listener:Function - The listener function.

    public function render():void 
      Renders a snapshot of the view to the render session's view container.
      See also
      session

  EVENT DETAIL

    Event object type: away3d.events.MouseEvent3D
      Dispatched when a user presses the let hand mouse button while the cursor is over a 3d object

    Event object type: away3d.events.MouseEvent3D
      Dispatched when a user moves the cursor while it is over a 3d object

    Event object type: away3d.events.MouseEvent3D
      Dispatched when a user moves the cursor away from a 3d object

    Event object type: away3d.events.MouseEvent3D
      Dispatched when a user moves the cursor over a 3d object

    Event object type: away3d.events.MouseEvent3D
      Dispatched when a user releases the let hand mouse button while the cursor is over a 3d object
  CODE EXAMPLES

    
      Place View3D in the middle of your SWF
      var swd:Number=640;
      var swh:Number=480;
      var view:View3D=new View3D({x:swd / 2,y:swh / 2});

WhiteShadingBitmapMaterial
==========================
  Package : away3d.materials
  Class : public class WhiteShadingBitmapMaterial
  Inheritance : CenterLightingMaterial
  Implements : IUVMaterial
  Description : Bitmap material with flat white lighting

  PUBLIC PROPERTIES
    (^) ak : Number = 20 - Coefficient for shininess level (CenterLightingMaterial)
    (^) ambient_brightness : Number = 1 - Coefficient for ambient light level (CenterLightingMaterial)
        bitmap : BitmapData - [read-only] Returns the bitmapData object being used as the material texture. (WhiteShadingBitmapMaterial)
    (^) diffuse_brightness : Number = 1 - Coefficient for diffuse light level (CenterLightingMaterial)
        height : Number - [read-only] Returns the height of the bitmapData being used as the material texture. (WhiteShadingBitmapMaterial)
        repeat : Boolean - Determines if texture bitmap will tile in uv-space (WhiteShadingBitmapMaterial)
        smooth : Boolean - Determines if texture bitmap is smoothed (bilinearly filtered) when drawn to screen (WhiteShadingBitmapMaterial)
    (^) specular_brightness : Number = 1 - Coefficient for specular light level (CenterLightingMaterial)
        visible : Boolean - [read-only] Indicates whether the material is visible (WhiteShadingBitmapMaterial)
        width : Number - [read-only] Returns the width of the bitmapData being used as the material texture. (WhiteShadingBitmapMaterial)

  PROTECTED PROPERTIES
        (WhiteShadingBitmapMaterial)
        addOnResize(listener:Function):void - Default method for adding a materialresize event listener (WhiteShadingBitmapMaterial)
        doubleStepTo(limit:int):void -  (WhiteShadingBitmapMaterial)
        getPixel32(u:Number, v:Number):uint - Returns the argb value of the bitmapData pixel at the given u v coordinate. (WhiteShadingBitmapMaterial)
        removeOnResize(listener:Function):void - Default method for removing a materialresize event listener (WhiteShadingBitmapMaterial)
    (^) renderTriangle(tri:DrawTriangle):void (CenterLightingMaterial)
    (^) updateMaterial(source:Object3D, view:View3D):void - Called once per render loop when material is visible. (CenterLightingMaterial)

  PROPERTY DETAIL

    bitmap:BitmapData[read-only]
      Returns the bitmapData object being used as the material texture.
      Implementation
       public function get bitmap():BitmapData


    height:Number[read-only]
      Returns the height of the bitmapData being used as the material texture.
      Implementation
       public function get height():Number


    public var repeat:Boolean 
      Determines if texture bitmap will tile in uv-space

    public var smooth:Boolean 
      Determines if texture bitmap is smoothed (bilinearly filtered) when drawn to screen

    visible:Boolean[read-only]
      Indicates whether the material is visible
      Implementation
       public function get visible():Boolean


    width:Number[read-only]
      Returns the width of the bitmapData being used as the material texture.
      Implementation
       public function get width():Number

  CONSTRUCTOR DETAIL

    public function WhiteShadingBitmapMaterial(bitmap:BitmapData, init:Object = null) 
      Parameters
       bitmap:BitmapData - The bitmapData object to be used as the material's texture.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       smooth:Boolean (default = false)
       repeat:Boolean (default = false)
  METHOD DETAIL

    public function addOnResize(listener:Function):void 
      Default method for adding a materialresize event listener
      Parameters
       listener:Function - The listener function

    public function doubleStepTo(limit:int):void 
      Parameters
       limit:int

    public function getPixel32(u:Number, v:Number):uint 
      Returns the argb value of the bitmapData pixel at the given u v coordinate.
      Parameters
       u:Number - The u (horizontal) texture coordinate.
       v:Number - The v (verical) texture coordinate.
       Returns
       uint - The argb pixel value.

    public function removeOnResize(listener:Function):void 
      Default method for removing a materialresize event listener
      Parameters
       listener:Function - The listener function
  CODE EXAMPLES

    
      There are currently no examples for this class


WireCircle
==========
  Package : away3d.primitives
  Class : public class WireCircle
  Inheritance : AbstractWirePrimitive, WireMesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) elements : Array - Returns an array of the elements contained in the wiremesh object. (WireMesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ISegmentMaterial - Defines the material used to render the segments in the wiremesh object. (WireMesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
        radius : Number - Defines the radius of the polygon. (WireCircle)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractWirePrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) segments : Array - Returns an array of the segments contained in the wiremesh object. (WireMesh)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
        sides : Number - Defines the number of sides of the polygon. (WireCircle)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
        yUp : Boolean - Defines whether the coordinates of the polygon points use a yUp orientation (true) or a zUp orientation (false). (WireCircle)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (WireCircle)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) addSegment(segment:Segment):void - Adds a segment object to the wiremesh object. (WireMesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (WireCircle)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (WireMesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) removeSegment(segment:Segment):void - Removes a segment object to the wiremesh object. (WireMesh)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    radius:Number[read-write]
      Defines the radius of the polygon. Defaults to 100.
      Implementation
       public function get radius():Number
       public function set radius(value:Number):void


    sides:Number[read-write]
      Defines the number of sides of the polygon. Defaults to 8 (octohedron).
      Implementation
       public function get sides():Number
       public function set sides(value:Number):void


    yUp:Boolean[read-write]
      Defines whether the coordinates of the polygon points use a yUp orientation (true) or a zUp orientation (false). Defaults to true.
      Implementation
       public function get yUp():Boolean
       public function set yUp(value:Boolean):void

  CONSTRUCTOR DETAIL

    public function WireCircle(init:Object = null) 
      Constructor for a wire frame circle object.
      The init object parameters are : 'radius' which is the radius of the circle and 'segments' which determines how many segments the circle divided into.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       radius:Number (default = 100, min:0)
       sides:Int (default = 8, min:3)
       yUp:Boolean (default = true)
  METHOD DETAIL

    public override function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.
  CODE EXAMPLES

    
      There are currently no examples for this class


WireColorMaterial
=================
  Package : away3d.materials
  Class : public class WireColorMaterial
  Implements : ITriangleMaterial
  Description : Wire material for solid color drawing with optional face border outlining

  PUBLIC PROPERTIES
        alpha : Number - Determines the alpha value of the material (WireColorMaterial)
        color : int - Determines the color value of the material (WireColorMaterial)
        visible : Boolean - [read-only] Indicates whether the material is visible (WireColorMaterial)
        width : Number - Determines the wire width (WireColorMaterial)
        wirealpha : Number - Determines the alpha value of the border wire (WireColorMaterial)
        wirecolor : int - Determines the color value of the border wire (WireColorMaterial)

  PROTECTED PROPERTIES
        ini : Init - Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor. (WireColorMaterial)

  PUBLIC METHODS
        (WireColorMaterial)
        renderTriangle(tri:DrawTriangle):void (WireColorMaterial)

  PROPERTY DETAIL

    public var alpha:Number 
      Determines the alpha value of the material

    public var color:int 
      Determines the color value of the material

    protected var ini:Init 
      Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor.

    visible:Boolean[read-only]
      Indicates whether the material is visible
      Implementation
       public function get visible():Boolean


    public var width:Number 
      Determines the wire width

    public var wirealpha:Number 
      Determines the alpha value of the border wire

    public var wirecolor:int 
      Determines the color value of the border wire
  CONSTRUCTOR DETAIL

    public function WireColorMaterial(color:* = null, init:Object = null) 
      Parameters
       color:* (default = null) - A string, hex value or colorname representing the color of the material.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       alpha:Number (default = 1, min:0, max:1)
       wirecolor:Color (default = 0x000000)
       width:Number (default = 1, min:0)
       wirealpha:Number (default = 1, min:0, max:1)
  METHOD DETAIL

    public function renderTriangle(tri:DrawTriangle):void 
      Sends data from the material coupled with data from the DrawTriangle primitive to the render session.
      Parameters
       tri:DrawTriangle
  CODE EXAMPLES

    
      Changing Materials and Outline
      objA.material = Cast.material("newma");
      //change bitmap from library
      objA.material = Cast.material({color:"blue", lighting:true});
      //change light color
      objA.material = new WireColorMaterial();
      objA.material = new ShadingColorMaterial( );
      objA.outline = new WireframeMaterial("yellow", {width:20});//outline size

WireCone
========
  Package : away3d.primitives
  Class : public class WireCone
  Inheritance : AbstractWirePrimitive, WireMesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) elements : Array - Returns an array of the elements contained in the wiremesh object. (WireMesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
        height : Number - Defines the height of the wire cone. (WireCone)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ISegmentMaterial - Defines the material used to render the segments in the wiremesh object. (WireMesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
        radius : Number - Defines the radius of the wire cone base. (WireCone)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractWirePrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) segments : Array - Returns an array of the segments contained in the wiremesh object. (WireMesh)
        segmentsH : Number - Defines the number of vertical segments that make up the wire cone. (WireCone)
        segmentsW : Number - Defines the number of horizontal segments that make up the wire cone. (WireCone)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
        yUp : Boolean - Defines whether the coordinates of the wire cone points use a yUp orientation (true) or a zUp orientation (false). (WireCone)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (WireCone)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) addSegment(segment:Segment):void - Adds a segment object to the wiremesh object. (WireMesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (WireCone)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (WireMesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) removeSegment(segment:Segment):void - Removes a segment object to the wiremesh object. (WireMesh)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
        vertex(w:int, h:int):Vertex - Returns the vertex object specified by the grid position of the mesh. (WireCone)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    height:Number[read-write]
      Defines the height of the wire cone. Defaults to 200.
      Implementation
       public function get height():Number
       public function set height(value:Number):void


    radius:Number[read-write]
      Defines the radius of the wire cone base. Defaults to 100.
      Implementation
       public function get radius():Number
       public function set radius(value:Number):void


    segmentsH:Number[read-write]
      Defines the number of vertical segments that make up the wire cone. Defaults to 1.
      Implementation
       public function get segmentsH():Number
       public function set segmentsH(value:Number):void


    segmentsW:Number[read-write]
      Defines the number of horizontal segments that make up the wire cone. Defaults to 8.
      Implementation
       public function get segmentsW():Number
       public function set segmentsW(value:Number):void


    yUp:Boolean[read-write]
      Defines whether the coordinates of the wire cone points use a yUp orientation (true) or a zUp orientation (false). Defaults to true.
      Implementation
       public function get yUp():Boolean
       public function set yUp(value:Boolean):void

  CONSTRUCTOR DETAIL

    public function WireCone(init:Object = null) 
      Constructor for the wire cone object. The init object parameters are : 'radius' defines the radius of the base of the cone, 'height' the height, 'segmentsW' the number of segments around the cone horizontally and 'segmentsH' the number of segments vertically.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       radius:Number (default = 100, min:0)
       height:Number (default = 200, min:0)
       segmentsW:Int (default = 8, min:3)
       segmentsH:Int (default = 1, min:1)
       yUp:Boolean (default = true)
  METHOD DETAIL

    public override function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.

    public function vertex(w:int, h:int):Vertex 
      Returns the vertex from a 2 dimensional representation of the wire cone's vertex array.
      I=horizontal reference.
      J=vertical reference (0 = base of the cone)
      Returns the vertex object specified by the grid position of the mesh.
      Parameters
       w:int - The horizontal position on the primitive mesh.
       h:int - The vertical position on the primitive mesh.
       Returns
       Vertex
  CODE EXAMPLES

    
      There are currently no examples for this class


WireCube
========
  Package : away3d.primitives
  Class : public class WireCube
  Inheritance : AbstractWirePrimitive, WireMesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
        depth : Number - Defines the depth of the cube. (WireCube)
    (^) elements : Array - Returns an array of the elements contained in the wiremesh object. (WireMesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
        height : Number - Defines the height of the cube. (WireCube)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ISegmentMaterial - Defines the material used to render the segments in the wiremesh object. (WireMesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractWirePrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) segments : Array - Returns an array of the segments contained in the wiremesh object. (WireMesh)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
        v000 : Vertex -  (WireCube)
        v001 : Vertex -  (WireCube)
        v010 : Vertex -  (WireCube)
        v011 : Vertex -  (WireCube)
        v100 : Vertex -  (WireCube)
        v101 : Vertex -  (WireCube)
        v110 : Vertex -  (WireCube)
        v111 : Vertex -  (WireCube)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
        width : Number - Defines the width of the cube. (WireCube)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (WireCube)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) addSegment(segment:Segment):void - Adds a segment object to the wiremesh object. (WireMesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (WireCube)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (WireMesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) removeSegment(segment:Segment):void - Removes a segment object to the wiremesh object. (WireMesh)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    depth:Number[read-write]
      Defines the depth of the cube. Defaults to 100.
      Implementation
       public function get depth():Number
       public function set depth(value:Number):void


    height:Number[read-write]
      Defines the height of the cube. Defaults to 100.
      Implementation
       public function get height():Number
       public function set height(value:Number):void


    public var v000:Vertex 
      One of the wire cube's vertices

    public var v001:Vertex 
      One of the wire cube's vertices

    public var v010:Vertex 
      One of the wire cube's vertices

    public var v011:Vertex 
      One of the wire cube's vertices

    public var v100:Vertex 
      One of the wire cube's vertices

    public var v101:Vertex 
      One of the wire cube's vertices

    public var v110:Vertex 
      One of the wire cube's vertices

    public var v111:Vertex 
      One of the wire cube's vertices

    width:Number[read-write]
      Defines the width of the cube. Defaults to 100.
      Implementation
       public function get width():Number
       public function set width(value:Number):void

  CONSTRUCTOR DETAIL

    public function WireCube(init:Object = null) 
      Constructor for a wire cube object. The init object parameters are : 'width'/'height'/'depth' define the geometry of the cube object.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       width:Number (default = 100, min:0)
       height:Number (default = 100, min:0)
       depth:Number (default = 100, min:0)
  METHOD DETAIL

    public override function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.
  CODE EXAMPLES

    
      There are currently no examples for this class


WireCylinder
============
  Package : away3d.primitives
  Class : public class WireCylinder
  Inheritance : AbstractWirePrimitive, WireMesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) elements : Array - Returns an array of the elements contained in the wiremesh object. (WireMesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
        height : Number - Defines the height of the wire cylinder. (WireCylinder)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ISegmentMaterial - Defines the material used to render the segments in the wiremesh object. (WireMesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
        radius : Number - Defines the radius of the wire cylinder. (WireCylinder)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractWirePrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) segments : Array - Returns an array of the segments contained in the wiremesh object. (WireMesh)
        segmentsH : Number - Defines the number of vertical segments that make up the wire cylinder. (WireCylinder)
        segmentsW : Number - Defines the number of horizontal segments that make up the wire cylinder. (WireCylinder)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
        yUp : Boolean - Defines whether the coordinates of the wire cylinder points use a yUp orientation (true) or a zUp orientation (false). (WireCylinder)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (WireCylinder)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) addSegment(segment:Segment):void - Adds a segment object to the wiremesh object. (WireMesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (WireCylinder)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (WireMesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) removeSegment(segment:Segment):void - Removes a segment object to the wiremesh object. (WireMesh)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
        vertex(w:int, h:int):Vertex - Returns the vertex object specified by the grid position of the mesh. (WireCylinder)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    height:Number[read-write]
      Defines the height of the wire cylinder. Defaults to 200.
      Implementation
       public function get height():Number
       public function set height(value:Number):void


    radius:Number[read-write]
      Defines the radius of the wire cylinder. Defaults to 100.
      Implementation
       public function get radius():Number
       public function set radius(value:Number):void


    segmentsH:Number[read-write]
      Defines the number of vertical segments that make up the wire cylinder. Defaults to 1.
      Implementation
       public function get segmentsH():Number
       public function set segmentsH(value:Number):void


    segmentsW:Number[read-write]
      Defines the number of horizontal segments that make up the wire cylinder. Defaults to 8.
      Implementation
       public function get segmentsW():Number
       public function set segmentsW(value:Number):void


    yUp:Boolean[read-write]
      Defines whether the coordinates of the wire cylinder points use a yUp orientation (true) or a zUp orientation (false). Defaults to true.
      Implementation
       public function get yUp():Boolean
       public function set yUp(value:Boolean):void

  CONSTRUCTOR DETAIL

    public function WireCylinder(init:Object = null) 
      Constructor for a wire cylinder object. The init object parameters are : 'radius' defines the radius of the wire cylinder, 'height' defines the height, 'segmentsW' defines how many segments are the circumference is split into and 'segmentsH' how many segments the wire cylinder is split along its height.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       radius:Number (default = 100, min:0)
       height:Number (default = 200, min:0)
       segmentsW:Int (default = 8, min:3)
       segmentsH:Int (default = 1, min:1)
       yUp:Boolean (default = true)
  METHOD DETAIL

    public override function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.

    public function vertex(w:int, h:int):Vertex 
      Returns the vertex from a 2 dimensional representation of the wire cylinders's vertex array.
      I=horizontal reference.
      J=vertical reference (0 = base of the wire cylinder)
      Returns the vertex object specified by the grid position of the mesh.
      Parameters
       w:int - The horizontal position on the primitive mesh.
       h:int - The vertical position on the primitive mesh.
       Returns
       Vertex
  CODE EXAMPLES

    
      There are currently no examples for this class


WireframeMaterial
=================
  Package : away3d.materials
  Class : public class WireframeMaterial
  Implements : ISegmentMaterial, ITriangleMaterial
  Description : Wire material for face border outlining only

  PUBLIC PROPERTIES
        alpha : Number - Determines the alpha value of the wire (WireframeMaterial)
        color : int - Determines the color value of the wire (WireframeMaterial)
        visible : Boolean - [read-only] Indicates whether the material is visible (WireframeMaterial)
        width : Number - Determines the width value of the wire (WireframeMaterial)

  PROTECTED PROPERTIES
        ini : Init - Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor. (WireframeMaterial)

  PUBLIC METHODS
        (WireframeMaterial)
        renderSegment(seg:DrawSegment):void (WireframeMaterial)
        renderTriangle(tri:DrawTriangle):void (WireframeMaterial)

  PROPERTY DETAIL

    public var alpha:Number 
      Determines the alpha value of the wire

    public var color:int 
      Determines the color value of the wire

    protected var ini:Init 
      Instance of the Init object used to hold and parse default property values specified by the initialiser object in the 3d object constructor.

    visible:Boolean[read-only]
      Indicates whether the material is visible
      Implementation
       public function get visible():Boolean


    public var width:Number 
      Determines the width value of the wire
  CONSTRUCTOR DETAIL

    public function WireframeMaterial(color:* = null, init:Object = null) 
      Parameters
       color:* (default = null) - A string, hex value or colorname representing the color of the wire.
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       alpha:Number (default = 1, min:0, max:1)
       width:Number (default = 1, min:0)
  METHOD DETAIL

    public function renderSegment(seg:DrawSegment):void 
      Sends data from the material coupled with data from the DrawSegment primitive to the render session.
      Parameters
       seg:DrawSegment

    public function renderTriangle(tri:DrawTriangle):void 
      Sends data from the material coupled with data from the DrawTriangle primitive to the render session.
      Parameters
       tri:DrawTriangle
  CODE EXAMPLES

    
      There are currently no examples for this class


WireMesh
========
  Package : away3d.core.base
  Class : public class WireMesh
  Inheritance : BaseMesh
  Implements : IPrimitiveProvider
  Subclasses : AbstractWirePrimitive, LineSegment
  Description : d object containing segment elements

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
        elements : Array - [read-only] Returns an array of the elements contained in the wiremesh object. (WireMesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
        material : ISegmentMaterial - Defines the material used to render the segments in the wiremesh object. (WireMesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (Object3D)
    (^) sceneTransformed : Boolean -  (Object3D)
        segments : Array - [read-only] Returns an array of the segments contained in the wiremesh object. (WireMesh)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (WireMesh)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
        addSegment(segment:Segment):void - Adds a segment object to the wiremesh object. (WireMesh)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
        primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (WireMesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
        removeSegment(segment:Segment):void - Removes a segment object to the wiremesh object. (WireMesh)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    elements:Array[read-only]
      Returns an array of the elements contained in the wiremesh object.
      Implementation
       public function get elements():Array


    public var material:ISegmentMaterial 
      Defines the material used to render the segments in the wiremesh object. Individual material settings on segments will override this setting.
      See also
      away3d.core.base.Segment.material


    segments:Array[read-only]
      Returns an array of the segments contained in the wiremesh object.
      Implementation
       public function get segments():Array

  CONSTRUCTOR DETAIL

    public function WireMesh(init:Object = null) 
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       material:SegmentMaterial
  METHOD DETAIL

    public function addSegment(segment:Segment):void 
      Adds a segment object to the wiremesh object.
      Parameters
       segment:Segment - The segment object to be added.

    public override function primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void 
      Called from the PrimitiveTraverser when passing DrawPrimitive objects to the primitive consumer object
      Parameters
       consumer:IPrimitiveConsumer - The consumer instance
       session:AbstractRenderSession - The render session of the 3d object
       See also
       away3d.core.traverse.PrimitiveTraverser
       away3d.core.draw.DrawSegment


    public function removeSegment(segment:Segment):void 
      Removes a segment object to the wiremesh object.
      Parameters
       segment:Segment - The segment object to be removed.
  CODE EXAMPLES

    
      There are currently no examples for this class


WirePlane
=========
  Package : away3d.primitives
  Class : public class WirePlane
  Inheritance : AbstractWirePrimitive, WireMesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) elements : Array - Returns an array of the elements contained in the wiremesh object. (WireMesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
        height : Number - Defines the height of the wire plane. (WirePlane)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ISegmentMaterial - Defines the material used to render the segments in the wiremesh object. (WireMesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractWirePrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) segments : Array - Returns an array of the segments contained in the wiremesh object. (WireMesh)
        segmentsH : Number - Defines the number of vertical segments that make up the wire plane. (WirePlane)
        segmentsW : Number - Defines the number of horizontal segments that make up the wire plane. (WirePlane)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
        width : Number - Defines the width of the wire plane. (WirePlane)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
        yUp : Boolean - Defines whether the coordinates of the wire plane points use a yUp orientation (true) or a zUp orientation (false). (WirePlane)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (WirePlane)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) addSegment(segment:Segment):void - Adds a segment object to the wiremesh object. (WireMesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (WirePlane)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (WireMesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) removeSegment(segment:Segment):void - Removes a segment object to the wiremesh object. (WireMesh)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
        vertex(i:int, j:int):Vertex - Returns the vertex object specified by the grid position of the mesh. (WirePlane)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    height:Number[read-write]
      Defines the height of the wire plane. Defaults to 100.
      Implementation
       public function get height():Number
       public function set height(value:Number):void


    segmentsH:Number[read-write]
      Defines the number of vertical segments that make up the wire plane. Defaults to 1.
      Implementation
       public function get segmentsH():Number
       public function set segmentsH(value:Number):void


    segmentsW:Number[read-write]
      Defines the number of horizontal segments that make up the wire plane. Defaults to 1.
      Implementation
       public function get segmentsW():Number
       public function set segmentsW(value:Number):void


    width:Number[read-write]
      Defines the width of the wire plane. Defaults to 100.
      Implementation
       public function get width():Number
       public function set width(value:Number):void


    yUp:Boolean[read-write]
      Defines whether the coordinates of the wire plane points use a yUp orientation (true) or a zUp orientation (false). Defaults to true.
      Implementation
       public function get yUp():Boolean
       public function set yUp(value:Boolean):void

  CONSTRUCTOR DETAIL

    public function WirePlane(init:Object = null) 
      Constructor for a wire frame plane object. The init object parameters are : 'width'/'height' defines the size of the plane, 'segments' defines the number of segments for width and height unless overriden, 'segmentsW' defines number segments the plane is split into horizontally and 'segmentsH' how many segments plane is split into vertically.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       width:Number (default = 100, min:0)
       height:Number (default = 100, min:0)
       segments:Int (default = 1, min:1)
       segmentsW:Int (default = segments, min:1)
       segmentsH:Int (default = segments, min:1)
       yUp:Boolean (default = true)
  METHOD DETAIL

    public override function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.

    public function vertex(i:int, j:int):Vertex 
      Returns the vertex from a 2 dimensional representation of the wire frame plane's vertex array.
      I=horizontal reference.
      J=vertical reference.
      Returns the vertex object specified by the grid position of the mesh.
      Parameters
       i:int - The horizontal position on the primitive mesh.
       j:int - The vertical position on the primitive mesh.
       Returns
       Vertex
  CODE EXAMPLES

    
      There are currently no examples for this class


WireSphere
==========
  Package : away3d.primitives
  Class : public class WireSphere
  Inheritance : AbstractWirePrimitive, WireMesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) elements : Array - Returns an array of the elements contained in the wiremesh object. (WireMesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ISegmentMaterial - Defines the material used to render the segments in the wiremesh object. (WireMesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
        radius : Number - Defines the radius of the wire sphere. (WireSphere)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractWirePrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) segments : Array - Returns an array of the segments contained in the wiremesh object. (WireMesh)
        segmentsH : Number - Defines the number of vertical segments that make up the wire sphere. (WireSphere)
        segmentsW : Number - Defines the number of horizontal segments that make up the wire sphere. (WireSphere)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
        yUp : Boolean - Defines whether the coordinates of the wire sphere points use a yUp orientation (true) or a zUp orientation (false). (WireSphere)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (WireSphere)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) addSegment(segment:Segment):void - Adds a segment object to the wiremesh object. (WireMesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (WireSphere)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (WireMesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) removeSegment(segment:Segment):void - Removes a segment object to the wiremesh object. (WireMesh)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
        vertex(w:int, h:int):Vertex - Returns the vertex object specified by the grid position of the mesh. (WireSphere)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    radius:Number[read-write]
      Defines the radius of the wire sphere. Defaults to 100.
      Implementation
       public function get radius():Number
       public function set radius(value:Number):void


    segmentsH:Number[read-write]
      Defines the number of vertical segments that make up the wire sphere. Defaults to 1.
      Implementation
       public function get segmentsH():Number
       public function set segmentsH(value:Number):void


    segmentsW:Number[read-write]
      Defines the number of horizontal segments that make up the wire sphere. Defaults to 8.
      Implementation
       public function get segmentsW():Number
       public function set segmentsW(value:Number):void


    yUp:Boolean[read-write]
      Defines whether the coordinates of the wire sphere points use a yUp orientation (true) or a zUp orientation (false). Defaults to true.
      Implementation
       public function get yUp():Boolean
       public function set yUp(value:Boolean):void

  CONSTRUCTOR DETAIL

    public function WireSphere(init:Object = null) 
      Constructor for a wire frame sphere object.
      The init object parameters are : 'radius' defines the radius of the wire sphere, 'segmentsW' defines the number of segments horizontally around the sphere and 'segmentsH' which defines number of segments vertically between the poles of the sphere.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       radius:Number (default = 100, min:0)
       segmentsW:Int (default = 8, min:3)
       segmentsH:Int (default = 6, min:2)
       yUp:Boolean (default = true)
  METHOD DETAIL

    public override function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.

    public function vertex(w:int, h:int):Vertex 
      Returns the vertex from a 2 dimensional representation of the sphere's vertex array.
      I=horizontal reference.
      J=vertical reference (0 = base of the wire frame sphere)
      Returns the vertex object specified by the grid position of the mesh.
      Parameters
       w:int - The horizontal position on the primitive mesh.
       h:int - The vertical position on the primitive mesh.
       Returns
       Vertex
  CODE EXAMPLES

    
      There are currently no examples for this class


WireTorus
=========
  Package : away3d.primitives
  Class : public class WireTorus
  Inheritance : AbstractWirePrimitive, WireMesh, BaseMesh, Object3D
  Description : 

  PUBLIC PROPERTIES
    (^) alpha : Number - An optional alpha value that can be applied to the 3d object. (Object3D)
    (^) blendMode : String - An optional blend mode that can be applied to the 3d object. (Object3D)
    (^) boundingRadius : Number - Returns the bounding radius of the 3d object (BaseMesh)
    (^) elements : Array - Returns an array of the elements contained in the wiremesh object. (WireMesh)
    (^) extra : Object - An optional untyped object that can contain used-defined properties (Object3D)
    (^) filters : Array - An optional array of filters that can be applied to the 3d object. (Object3D)
    (^) fps : int - Determines the frames per second at which the animation will run. (BaseMesh)
    (^) frame : int - Indicates the current frame of animation (BaseMesh)
    (^) framenames : Dictionary - A dictionary containing all frame names of the mesh (BaseMesh)
    (^) frames : Dictionary - A dictionary containing all frames of the mesh (BaseMesh)
    (^) hasCycleEvent : Boolean - Indicates whether the animation has a cycle event listener (BaseMesh)
    (^) hasSequenceEvent : Boolean - Indicates whether the animation has a sequencedone event listener (BaseMesh)
    (^) inverseSceneTransform : Matrix3D -  (Object3D)
    (^) isRunning : Boolean - Indicates whether the animation is currently running. (BaseMesh)
    (^) loop : Boolean - Determines whether the animation will loop. (BaseMesh)
    (^) material : ISegmentMaterial - Defines the material used to render the segments in the wiremesh object. (WireMesh)
    (^) maxX : Number - Returns the maximum x value of the 3d object (BaseMesh)
    (^) maxY : Number - Returns the maximum y value of the 3d object (BaseMesh)
    (^) maxZ : Number - Returns the maximum z value of the 3d object (BaseMesh)
    (^) minX : Number - Returns the minimum x value of the 3d object (BaseMesh)
    (^) minY : Number - Returns the minimum y value of the 3d object (BaseMesh)
    (^) minZ : Number - Returns the minimum z value of the 3d object (BaseMesh)
    (^) mouseEnabled : Boolean = true - Defines whether mouse events are received on the 3d object (Object3D)
    (^) name : String - An optional name string for the 3d object. (Object3D)
    (^) ownCanvas : Boolean = false - Defines whether the contents of the 3d object are rendered inside it's own sprite (Object3D)
    (^) ownSession : AbstractRenderSession - Defines whether the contents of the 3d object are rendered using it's own render session (Object3D)
    (^) parent : ObjectContainer3D - Defines the parent of the 3d object. (Object3D)
    (^) position : Number3D (Object3D)
    (^) projection : Projection -  (Object3D)
    (^) pushback : Boolean - Elements use their furthest point from the camera when z-sorting (BaseMesh)
    (^) pushfront : Boolean - Elements use their nearest point to the camera when z-sorting (BaseMesh)
        radius : Number - Defines the overall radius of the wire torus. (WireTorus)
    (^) rotationX : Number (Object3D)
    (^) rotationY : Number (Object3D)
    (^) rotationZ : Number (Object3D)
    (^) scene : Scene3D - Returns the parent scene of the 3d object (Object3D)
    (^) scenePosition : Number3D (Object3D)
    (^) sceneTransform : Matrix3D (AbstractWirePrimitive)
    (^) sceneTransformed : Boolean -  (Object3D)
    (^) segments : Array - Returns an array of the segments contained in the wiremesh object. (WireMesh)
        segmentsR : Number - Defines the number of radial segments that make up the wire torus. (WireTorus)
        segmentsT : Number - Defines the number of tubular segments that make up the wire torus. (WireTorus)
    (^) session : AbstractRenderSession - The render session used by the 3d object (Object3D)
    (^) smooth : Boolean - Determines whether the animation will smooth motion (interpolate) between frames. (BaseMesh)
    (^) transform : Matrix3D (Object3D)
        tube : Number - Defines the tube radius of the wire torus. (WireTorus)
    (^) type : String - String defining the type of class used to generate the mesh. (BaseMesh)
    (^) url : String - String defining the source of the mesh. (BaseMesh)
    (^) useHandCursor : Boolean = false - Defines whether a hand cursor is displayed when the mouse rolls over the 3d object. (Object3D)
    (^) vertices : Array - Returns an array of the vertices contained in the mesh object (BaseMesh)
    (^) viewTransform : Matrix3D -  (Object3D)
    (^) visible : Boolean = true - Defines whether the 3d object is visible in the scene (Object3D)
    (^) x : Number (Object3D)
    (^) y : Number (Object3D)
        yUp : Boolean - Defines whether the coordinates of the wire torus points use a yUp orientation (true) or a zUp orientation (false). (WireTorus)
    (^) z : Number (Object3D)

  PROTECTED PROPERTIES
        (WireTorus)
    (^) addOnCycle(listener:Function):void - Default method for adding a cycle event listener (BaseMesh)
    (^) addOnDimensionsChange(listener:Function):void - Default method for adding a dimensionschanged event listener (Object3D)
    (^) addOnMouseDown(listener:Function):void - Default method for adding a mouseDown3D event listener (Object3D)
    (^) addOnMouseMove(listener:Function):void - Default method for adding a mouseMove3D event listener (Object3D)
    (^) addOnMouseOut(listener:Function):void - Default method for adding a mouseOut3D event listener (Object3D)
    (^) addOnMouseOver(listener:Function):void - Default method for adding a mouseOver3D event listener (Object3D)
    (^) addOnMouseUp(listener:Function):void - Default method for adding a mouseUp3D event listener (Object3D)
    (^) addOnRadiusChange(listener:Function):void - Default method for adding a radiuschanged event listener (Object3D)
    (^) addOnSceneChange(listener:Function):void - Default method for adding a scenechanged event listener (Object3D)
    (^) addOnSceneTransformChange(listener:Function):void - Default method for adding a scenetransformchanged event listener (Object3D)
    (^) addOnSequenceDone(listener:Function):void - Default method for adding a squencedone event listener (BaseMesh)
    (^) addOnTransformChange(listener:Function):void - Default method for adding a transformchanged event listener (Object3D)
    (^) addSegment(segment:Segment):void - Adds a segment object to the wiremesh object. (WireMesh)
        buildPrimitive():void - Builds the vertex, face and uv objects that make up the 3d primitive. (WireTorus)
    (^) clone(object:* = null):* (Object3D)
    (^) distanceTo(obj:Object3D):Number - Calulates the absolute distance between the local 3d object position and the position of the given 3d object (Object3D)
    (^) gotoAndPlay(value:int):void - Starts playing the animation at the specified frame. (BaseMesh)
    (^) gotoAndStop(value:int):void - Brings the animation to the specifed frame and stops it there. (BaseMesh)
    (^) lookAt(target:Number3D, upAxis:Number3D = null):void (Object3D)
    (^) moveBackward(distance:Number):void - Moves the 3d object backwards along it's local z axis (Object3D)
    (^) moveDown(distance:Number):void - Moves the 3d object backwards along it's local y axis (Object3D)
    (^) moveForward(distance:Number):void - Moves the 3d object forwards along it's local z axis (Object3D)
    (^) moveLeft(distance:Number):void - Moves the 3d object backwards along it's local x axis (Object3D)
    (^) moveRight(distance:Number):void - Moves the 3d object forwards along it's local x axis (Object3D)
    (^) moveTo(target:Number3D):void - Moves the 3d object directly to a point in space (Object3D)
    (^) moveUp(distance:Number):void - Moves the 3d object forwards along it's local y axis (Object3D)
    (^) pitch(angle:Number):void - Rotates the 3d object around it's local x-axis (Object3D)
    (^) play(sequence:AnimationSequence):void - Plays a sequence of frames (BaseMesh)
    (^) primitives(consumer:IPrimitiveConsumer, session:AbstractRenderSession):void (WireMesh)
    (^) removeOnCycle(listener:Function):void - Default method for removing a cycle event listener (BaseMesh)
    (^) removeOnDimensionsChange(listener:Function):void - Default method for removing a dimensionschanged event listener (Object3D)
    (^) removeOnMouseDown(listener:Function):void - Default method for removing a mouseDown3D event listener (Object3D)
    (^) removeOnMouseMove(listener:Function):void - Default method for removing a mouseMove3D event listener (Object3D)
    (^) removeOnMouseOut(listener:Function):void - Default method for removing a mouseOut3D event listener (Object3D)
    (^) removeOnMouseOver(listener:Function):void - Default method for removing a mouseOver3D event listener (Object3D)
    (^) removeOnMouseUp(listener:Function):void - Default method for removing a mouseUp3D event listener (Object3D)
    (^) removeOnRadiusChange(listener:Function):void - Default method for removing a radiuschanged event listener (Object3D)
    (^) removeOnSceneChange(listener:Function):void - Default method for removing a scenechanged event listener (Object3D)
    (^) removeOnSceneTransformChange(listener:Function):void - Default method for removing a scenetransformchanged event listener (Object3D)
    (^) removeOnSequenceDone(listener:Function):void - Default method for removing a squencedone event listener (BaseMesh)
    (^) removeOnTransformChange(listener:Function):void - Default method for removing a transformchanged event listener (Object3D)
    (^) removeSegment(segment:Segment):void - Removes a segment object to the wiremesh object. (WireMesh)
    (^) roll(angle:Number):void - Rotates the 3d object around it's local z-axis (Object3D)
    (^) rotate(axis:Number3D, angle:Number):void - Rotates the 3d object around an axis by a defined angle (Object3D)
    (^) scale(scale:Number):void - Scales the contents of the mesh. (BaseMesh)
    (^) scaleAnimation(scale:Number):void - Scales the vertex positions contained within all animation frames (BaseMesh)
    (^) scaleX(scaleX:Number):void - Scales the contents of the mesh along the x-axis. (BaseMesh)
    (^) scaleY(scaleY:Number):void - Scales the contents of the mesh along the y-axis. (BaseMesh)
    (^) scaleZ(scaleZ:Number):void - Scales the contents of the mesh along the z-axis. (BaseMesh)
    (^) setPlaySequences(playlist:Array, loopLast:Boolean = false):void - Passes an array of animationsequence objects to be added to the animation. (BaseMesh)
    (^) tick(time:int):void (BaseMesh)
    (^) toString():String - Used to trace the values of a 3d object. (Object3D)
    (^) translate(axis:Number3D, distance:Number):void - Moves the 3d object along a vector by a defined length (Object3D)
    (^) traverse(traverser:Traverser):void - Used when traversing the scenegraph (Object3D)
        vertex(r:int, t:int):Vertex - Returns the vertex object specified by the grid position of the mesh. (WireTorus)
    (^) yaw(angle:Number):void - Rotates the 3d object around it's local y-axis (Object3D)

  PROTECTED METHODS
    (^) addElement(element:IMeshElement):void - Adds an element to the mesh object. (BaseMesh)
    (^) removeElement(element:IMeshElement):void - Removes an element to the mesh object. (BaseMesh)
    (^) scaleXYZ(scaleX:Number, scaleY:Number, scaleZ:Number):void - Scales the contents of the mesh using 3 axis values. (BaseMesh)

  EVENTS
    (^) (BaseMesh)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (Object3D)
    (^) (BaseMesh)
    (^) (Object3D)

  PROPERTY DETAIL

    radius:Number[read-write]
      Defines the overall radius of the wire torus. Defaults to 100.
      Implementation
       public function get radius():Number
       public function set radius(value:Number):void


    segmentsR:Number[read-write]
      Defines the number of radial segments that make up the wire torus. Defaults to 8.
      Implementation
       public function get segmentsR():Number
       public function set segmentsR(value:Number):void


    segmentsT:Number[read-write]
      Defines the number of tubular segments that make up the wire torus. Defaults to 6.
      Implementation
       public function get segmentsT():Number
       public function set segmentsT(value:Number):void


    tube:Number[read-write]
      Defines the tube radius of the wire torus. Defaults to 40.
      Implementation
       public function get tube():Number
       public function set tube(value:Number):void


    yUp:Boolean[read-write]
      Defines whether the coordinates of the wire torus points use a yUp orientation (true) or a zUp orientation (false). Defaults to true.
      Implementation
       public function get yUp():Boolean
       public function set yUp(value:Boolean):void

  CONSTRUCTOR DETAIL

    public function WireTorus(init:Object = null) 
      Constructor for a wire frame torus object.
      The init object parameters are : 'radius' defines the radius of the torus, 'tube' defines the tube radius (thickness), 'segmentsR' defines the number of segments the torus is divided into around rotationally around the circumference of the circle defined by the radius and 'segmentsT' which defines number of segments for the tube, around it's cross-section.
      Parameters
       init:Object (default = null) - [optional] An initialisation object for specifying default instance properties.
       Init Parameters
       radius:Number (default = 100, min:0)
       tube:Number (default = 40, min:0, max:radius)
       segmentsR:Int (default = 8, min:3)
       segmentsT:Int (default = 6, min:3)
       yUp:Boolean (default = true)
  METHOD DETAIL

    public override function buildPrimitive():void 
      Builds the vertex, face and uv objects that make up the 3d primitive.

    public function vertex(r:int, t:int):Vertex 
      Returns the vertex from a 2 dimensional representation of the torus' vertex array.
      I=horizontal reference.
      J=vertical reference
      Returns the vertex object specified by the grid position of the mesh.
      Parameters
       r:int - The radial position on the primitive mesh.
       t:int - The tubular position on the primitive mesh.
       Returns
       Vertex
  CODE EXAMPLES

    
      There are currently no examples for this class


ZDepthFilter
============
  Package : away3d.core.filter
  Class : public class ZDepthFilter
  Implements : IPrimitiveFilter
  Description : Defines a maximum z value for rendering primitives

  PUBLIC METHODS
        (ZDepthFilter)
        filter(primitives:Array, scene:Scene3D, camera:Camera3D, clip:Clipping):Array - Applies the filter to the primitive array. (ZDepthFilter)
        toString():String - Used to trace the values of a filter. (ZDepthFilter)

  CONSTRUCTOR DETAIL

    public function ZDepthFilter(maxZ:Number) 
      Parameters
       maxZ:Number - A maximum allowed depth value for drawing primitives.
  METHOD DETAIL

    public function filter(primitives:Array, scene:Scene3D, camera:Camera3D, clip:Clipping):Array 
      Applies the filter to the primitive array.
      Parameters
       primitives:Array - The primitives to be filtered.
       scene:Scene3D - The scene to which the primitives belongs.
       camera:Camera3D - The camera being used in the renderer for the primitives.
       clip:Clipping - The clipping object used in the renderer for the primitive's view.
       Returns
       Array

    public function toString():String 
      Used to trace the values of a filter.
      Returns
      String - A string representation of the filter object.
  CODE EXAMPLES

    
      There are currently no examples for this class


ZSortFilter
===========
  Package : away3d.core.filter
  Class : public class ZSortFilter
  Implements : IPrimitiveFilter
  Description : 

  PUBLIC METHODS
        filter(primitives:Array, scene:Scene3D, camera:Camera3D, clip:Clipping):Array - Applies the filter to the primitive array. (ZSortFilter)
        toString():String - Used to trace the values of a filter. (ZSortFilter)

  METHOD DETAIL

    public function filter(primitives:Array, scene:Scene3D, camera:Camera3D, clip:Clipping):Array 
      Applies the filter to the primitive array.
      Parameters
       primitives:Array - The primitives to be filtered.
       scene:Scene3D - The scene to which the primitives belongs.
       camera:Camera3D - The camera being used in the renderer for the primitives.
       clip:Clipping - The clipping object used in the renderer for the primitive's view.
       Returns
       Array

    public function toString():String 
      Used to trace the values of a filter.
      Returns
      String - A string representation of the filter object.
  CODE EXAMPLES

    
      There are currently no examples for this class
