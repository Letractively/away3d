package away3d.cameras.lenses;

import flash.display.Sprite;
import away3d.core.geom.Plane3D;
import away3d.core.utils.CameraVarsStore;
import flash.events.EventDispatcher;
import away3d.core.math.Matrix3D;
import away3d.core.utils.DrawPrimitiveStore;
import away3d.containers.View3D;
import away3d.core.draw.ScreenVertex;
import away3d.core.clip.Clipping;
import away3d.core.base.Object3D;
import away3d.core.geom.Frustum;
import away3d.cameras.Camera3D;


/**
 * Abstract lens for resolving perspective using the <code>Camera3D</code> object's position and properties
 */
class AbstractLens  {
	
	private static inline var toRADIANS:Float = Math.PI / 180;
	private static inline var toDEGREES:Float = 180 / Math.PI;
	private var _view:View3D;
	private var _drawPrimitiveStore:DrawPrimitiveStore;
	private var _cameraVarsStore:CameraVarsStore;
	private var _camera:Camera3D;
	private var _clipping:Clipping;
	private var _clipTop:Float;
	private var _clipBottom:Float;
	private var _clipLeft:Float;
	private var _clipRight:Float;
	private var _clipHeight:Float;
	private var _clipWidth:Float;
	private var _focusOverZoom:Float;
	private var _zoom2:Float;
	private var _frustum:Frustum;
	private var _near:Float;
	private var _far:Float;
	private var _plane:Plane3D;
	private var _len:Float;
	private var _screenVertex:ScreenVertex;
	private var _sx:Float;
	private var _sy:Float;
	private var _sz:Float;
	private var _sw:Float;
	private var _vx:Float;
	private var _vy:Float;
	private var _vz:Float;
	private var _scz:Float;
	private var _projected:ScreenVertex;
	private var _persp:Float;
	private var classification:Int;
	private var viewTransform:Matrix3D;
	private var view:Matrix3D;
	

	public function setView(val:View3D):Void {
		
		_view = val;
		_drawPrimitiveStore = val.drawPrimitiveStore;
		_cameraVarsStore = val.cameraVarsStore;
		_camera = val.camera;
		_clipping = val.screenClipping;
		_clipTop = _clipping.maxY;
		_clipBottom = _clipping.minY;
		_clipLeft = _clipping.minX;
		_clipRight = _clipping.maxX;
		_clipHeight = _clipBottom - _clipTop;
		_clipWidth = _clipRight - _clipLeft;
		_far = _clipping.maxZ;
	}

	// autogenerated
	public function new () {
		this.view = new Matrix3D();
		
	}

	

}

