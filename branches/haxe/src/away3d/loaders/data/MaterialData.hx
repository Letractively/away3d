package away3d.loaders.data;

import flash.display.BitmapData;
import away3d.materials.IMaterial;
import flash.events.EventDispatcher;
import away3d.core.base.Segment;
import away3d.materials.ITriangleMaterial;
import away3d.materials.ISegmentMaterial;
import away3d.core.base.Face;
import away3d.core.base.Object3D;
import away3d.materials.IUVMaterial;
import away3d.core.base.Geometry;
import away3d.core.base.Element;


/**
 * Data class for the material data of a face.
 * 
 * @see away3d.loaders.data.FaceData
 */
class MaterialData  {
	public var material(getMaterial, setMaterial) : IMaterial;
	
	private var _material:IMaterial;
	private var _element:Element;
	/**
	 * String representing a texture material.
	 */
	public static inline var TEXTURE_MATERIAL:String = "textureMaterial";
	/**
	 * String representing a shaded material.
	 */
	public static inline var SHADING_MATERIAL:String = "shadingMaterial";
	/**
	 * String representing a color material.
	 */
	public static inline var COLOR_MATERIAL:String = "colorMaterial";
	/**
	 * String representing a wireframe material.
	 */
	public static inline var WIREFRAME_MATERIAL:String = "wireframeMaterial";
	/**
	 * The name of the material used as a unique reference.
	 */
	public var name:String;
	/**
	 * Optional ambient color of the material.
	 */
	public var ambientColor:Int;
	/**
	 * Optional diffuse color of the material.
	 */
	public var diffuseColor:Int;
	/**
	 * Optional specular color of the material.
	 */
	public var specularColor:Int;
	/**
	 * Optional shininess of the material.
	 */
	public var shininess:Float;
	/**
	 * Reference to the filename of the texture image.
	 */
	public var textureFileName:String;
	/**
	 * Reference to the bitmapData object of the texture image.
	 */
	public var textureBitmap:BitmapData;
	/**
	 * String representing the material type.
	 */
	public var materialType:String;
	/**
	 * Array of indexes representing the elements that use the material.
	 */
	public var elements:Array<Dynamic>;
	

	/**
	 * defines the material object of the resulting material.
	 */
	public function getMaterial():IMaterial {
		
		return _material;
	}

	public function setMaterial(val:IMaterial):IMaterial {
		
		if (_material == val) {
			return val;
		}
		_material = val;
		if (Std.is(_material, IUVMaterial)) {
			textureBitmap = (cast(_material, IUVMaterial)).bitmap;
		}
		if (Std.is(_material, ITriangleMaterial)) {
			for (__i in 0...elements.length) {
				_element = elements[__i];

				if (_element != null) {
					(cast(_element, Face)).material = cast(_material, ITriangleMaterial);
				}
			}

		} else if (Std.is(_material, ISegmentMaterial)) {
			for (__i in 0...elements.length) {
				_element = elements[__i];

				if (_element != null) {
					(cast(_element, Segment)).material = cast(_material, ISegmentMaterial);
				}
			}

		}
		return val;
	}

	public function clone(targetObj:Object3D):MaterialData {
		
		var cloneMatData:MaterialData = targetObj.materialLibrary.addMaterial(name);
		cloneMatData.materialType = materialType;
		cloneMatData.ambientColor = ambientColor;
		cloneMatData.diffuseColor = diffuseColor;
		cloneMatData.shininess = shininess;
		cloneMatData.specularColor = specularColor;
		cloneMatData.textureBitmap = textureBitmap;
		cloneMatData.textureFileName = textureFileName;
		cloneMatData.material = material;
		for (__i in 0...elements.length) {
			var element:Element = elements[__i];

			if (element != null) {
				var parentGeometry:Geometry = element.parent;
				var correspondingElement:Element = parentGeometry.cloneElementDictionary.get(element);
				cloneMatData.elements.push(correspondingElement);
			}
		}

		return cloneMatData;
	}

	// autogenerated
	public function new () {
		this.materialType = WIREFRAME_MATERIAL;
		this.elements = [];
		
	}

	

}

