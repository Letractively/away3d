package away3d.loaders.utils;

import away3d.core.utils.Debug;
import flash.utils.Dictionary;
import away3d.loaders.data.ChannelData;


/**
 * Store for all animation channels associated with an externally loaded file.
 */
class ChannelLibrary extends Dictionary  {
	
	private var _channel:ChannelData;
	private var _channelArray:Array<Dynamic>;
	private var _channelArrayDirty:Bool;
	

	private function updateChannelArray():Void {
		
		_channelArray = [];
		var __keys:Iterator<Dynamic> = untyped (__keys__(this)).iterator();
		for (__key in __keys) {
			_channel = this[cast __key];

			_channelArray.push(_channel);
		}

	}

	/**
	 * Adds an animation channel name reference to the library.
	 */
	public function addChannel(name:String, xml:Xml):ChannelData {
		//return if animation already exists
		
		if ((this[cast name] != null)) {
			return this[cast name];
		}
		_channelArrayDirty = true;
		var channelData:ChannelData = new ChannelData();
		channelData.xml = xml;
		this[cast channelData.name = name] = channelData;
		return channelData;
	}

	/**
	 * Returns an animation channel data object for the given name reference in the library.
	 */
	public function getChannel(name:String):ChannelData {
		//return if animation exists
		
		if ((this[cast name] != null)) {
			return this[cast name];
		}
		Debug.warning("Channel '" + name + "' does not exist");
		return null;
	}

	/**
	 * Returns an array of all animation channels.
	 */
	public function getChannelArray():Array<Dynamic> {
		
		if (_channelArrayDirty) {
			updateChannelArray();
		}
		return _channelArray;
	}

	// autogenerated
	public function new () {
		super();
		
	}

	

}

