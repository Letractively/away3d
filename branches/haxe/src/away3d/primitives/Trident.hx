package away3d.primitives;

import away3d.extrusions.Lathe;
import away3d.materials.WireframeMaterial;
import away3d.primitives.LineSegment;
import away3d.containers.ObjectContainer3D;
import flash.events.EventDispatcher;
import away3d.core.base.Mesh;
import away3d.core.math.Number3D;
import away3d.core.base.Vertex;


/**
 * Creates an axis trident.
 */
class Trident extends ObjectContainer3D  {
	
	

	/**
	 * Creates a new <code>Trident</code> object.
	 *
	 * @param	 len				The length of the trident axes. Default is 1000.
	 * @param	 showLetters	If the Trident should display the letters X. Y and Z.
	 */
	public function new(?len:Float=1000, ?showLetters:Bool=false) {
		// autogenerated
		super();
		
		OPPOSITE_OR[X | X] = N;
		OPPOSITE_OR[XY | X] = Y;
		OPPOSITE_OR[XZ | X] = Z;
		OPPOSITE_OR[XYZ | X] = YZ;
		OPPOSITE_OR[Y | Y] = N;
		OPPOSITE_OR[XY | Y] = X;
		OPPOSITE_OR[XYZ | Y] = XZ;
		OPPOSITE_OR[YZ | Y] = Z;
		OPPOSITE_OR[Z | Z] = N;
		OPPOSITE_OR[XZ | Z] = X;
		OPPOSITE_OR[XYZ | Z] = XY;
		OPPOSITE_OR[YZ | Z] = Y;
		SCALINGS[1] = [1, 1, 1];
		SCALINGS[2] = [-1, 1, 1];
		SCALINGS[4] = [-1, 1, -1];
		SCALINGS[8] = [1, 1, -1];
		SCALINGS[16] = [1, -1, 1];
		SCALINGS[32] = [-1, -1, 1];
		SCALINGS[64] = [-1, -1, -1];
		SCALINGS[128] = [1, -1, -1];
		
		buildTrident(len, showLetters);
	}

	private function addArrowSegments(a:Vertex, b:Vertex, mat:WireframeMaterial, ?x:Float=0, ?y:Float=0, ?z:Float=0):Void {
		
		var line:LineSegment = new LineSegment();
		line.start = new Vertex();
		line.end = new Vertex();
		addChild(line);
	}

	private function buildTrident(len:Float, showLetters:Bool):Void {
		
		var scaleH:Float = len / 10;
		var scaleW:Float = len / 20;
		var offset:Float = len - scaleW;
		var matx:WireframeMaterial = new WireframeMaterial();
		var maty:WireframeMaterial = new WireframeMaterial();
		var matz:WireframeMaterial = new WireframeMaterial();
		var lineX:LineSegment = new LineSegment();
		var lineY:LineSegment = new LineSegment();
		var lineZ:LineSegment = new LineSegment();
		var arrowx:Lathe = new Lathe();
		(cast(arrowx, Mesh)).rotationZ = -90;
		(cast(arrowx, Mesh)).applyRotations();
		addArrowSegments((cast(arrowx, Mesh)).vertices[5], (cast(arrowx, Mesh)).vertices[3], matx, offset, 0, 0);
		addArrowSegments((cast(arrowx, Mesh)).vertices[5], (cast(arrowx, Mesh)).vertices[4], matx, offset, 0, 0);
		addArrowSegments((cast(arrowx, Mesh)).vertices[4], (cast(arrowx, Mesh)).vertices[6], matx, offset, 0, 0);
		addArrowSegments((cast(arrowx, Mesh)).vertices[5], (cast(arrowx, Mesh)).vertices[11], matx, offset, 0, 0);
		addArrowSegments((cast(arrowx, Mesh)).vertices[6], (cast(arrowx, Mesh)).vertices[11], matx, offset, 0, 0);
		addArrowSegments((cast(arrowx, Mesh)).vertices[5], (cast(arrowx, Mesh)).vertices[19], matx, offset, 0, 0);
		addArrowSegments((cast(arrowx, Mesh)).vertices[19], (cast(arrowx, Mesh)).vertices[11], matx, offset, 0, 0);
		addArrowSegments((cast(arrowx, Mesh)).vertices[19], (cast(arrowx, Mesh)).vertices[4], matx, offset, 0, 0);
		var arrowy:Lathe = new Lathe();
		addArrowSegments((cast(arrowy, Mesh)).vertices[5], (cast(arrowy, Mesh)).vertices[3], maty, 0, offset, 0);
		addArrowSegments((cast(arrowy, Mesh)).vertices[5], (cast(arrowy, Mesh)).vertices[4], maty, 0, offset, 0);
		addArrowSegments((cast(arrowy, Mesh)).vertices[4], (cast(arrowy, Mesh)).vertices[6], maty, 0, offset, 0);
		addArrowSegments((cast(arrowy, Mesh)).vertices[5], (cast(arrowy, Mesh)).vertices[11], maty, 0, offset, 0);
		addArrowSegments((cast(arrowy, Mesh)).vertices[6], (cast(arrowy, Mesh)).vertices[11], maty, 0, offset, 0);
		addArrowSegments((cast(arrowy, Mesh)).vertices[5], (cast(arrowy, Mesh)).vertices[19], maty, 0, offset, 0);
		addArrowSegments((cast(arrowy, Mesh)).vertices[19], (cast(arrowy, Mesh)).vertices[11], maty, 0, offset, 0);
		addArrowSegments((cast(arrowy, Mesh)).vertices[19], (cast(arrowy, Mesh)).vertices[4], maty, 0, offset, 0);
		var arrowz:Lathe = new Lathe();
		arrowz.rotationX = 90;
		(cast(arrowz, Mesh)).applyRotations();
		addArrowSegments((cast(arrowz, Mesh)).vertices[5], (cast(arrowz, Mesh)).vertices[3], matz, 0, 0, offset);
		addArrowSegments((cast(arrowz, Mesh)).vertices[5], (cast(arrowz, Mesh)).vertices[4], matz, 0, 0, offset);
		addArrowSegments((cast(arrowz, Mesh)).vertices[4], (cast(arrowz, Mesh)).vertices[6], matz, 0, 0, offset);
		addArrowSegments((cast(arrowz, Mesh)).vertices[5], (cast(arrowz, Mesh)).vertices[11], matz, 0, 0, offset);
		addArrowSegments((cast(arrowz, Mesh)).vertices[6], (cast(arrowz, Mesh)).vertices[11], matz, 0, 0, offset);
		addArrowSegments((cast(arrowz, Mesh)).vertices[5], (cast(arrowz, Mesh)).vertices[19], matz, 0, 0, offset);
		addArrowSegments((cast(arrowz, Mesh)).vertices[19], (cast(arrowz, Mesh)).vertices[11], matz, 0, 0, offset);
		addArrowSegments((cast(arrowz, Mesh)).vertices[19], (cast(arrowz, Mesh)).vertices[4], matz, 0, 0, offset);
		arrowx = arrowy = arrowz = null;
		//x
		lineX.start = new Vertex();
		lineX.end = new Vertex();
		addChild(lineX);
		//y
		lineY.start = new Vertex();
		lineY.end = new Vertex();
		addChild(lineY);
		//z
		lineZ.start = new Vertex();
		lineZ.end = new Vertex();
		addChild(lineZ);
		if (showLetters) {
			var scl15:Float = scaleW * 1.5;
			var sclh3:Float = scaleH * 3;
			var sclh2:Float = scaleH * 2;
			var sclh34:Float = scaleH * 3.4;
			var x1:LineSegment = new LineSegment();
			x1.start = new Vertex();
			x1.end = new Vertex();
			var x2:LineSegment = new LineSegment();
			x2.start = new Vertex();
			x2.end = new Vertex();
			addChild(x1);
			addChild(x2);
			//y
			var y1:LineSegment = new LineSegment();
			var y2:LineSegment = new LineSegment();
			var y3:LineSegment = new LineSegment();
			var cross:Float = len + (sclh2) + (((len + sclh34) - (len + sclh2)) / 3 * 2);
			y1.start = new Vertex();
			y1.end = new Vertex();
			y2.start = new Vertex();
			y2.end = new Vertex();
			y3.start = new Vertex();
			y3.end = new Vertex();
			addChild(y1);
			addChild(y2);
			addChild(y3);
			//z
			var z1:LineSegment = new LineSegment();
			var z2:LineSegment = new LineSegment();
			var z3:LineSegment = new LineSegment();
			z1.start = new Vertex();
			z2.end = new Vertex();
			z1.end = new Vertex();
			z2.start = new Vertex();
			z3.start = z2.end;
			z3.end = z1.start;
			addChild(z1);
			addChild(z2);
			addChild(z3);
		}
	}

}

