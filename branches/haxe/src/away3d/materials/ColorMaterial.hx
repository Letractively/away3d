package away3d.materials;

import away3d.haxeutils.HashableEventDispatcher;
import away3d.core.draw.DrawFog;
import away3d.containers.View3D;
import flash.events.Event;
import away3d.events.MaterialEvent;
import away3d.core.draw.DrawBillboard;
import away3d.core.base.Object3D;
import away3d.core.utils.Cast;
import away3d.core.utils.Init;
import away3d.core.draw.DrawTriangle;
import away3d.core.draw.DrawPrimitive;


// use namespace arcane;

/**
 * Material for solid color drawing
 */
class ColorMaterial extends HashableEventDispatcher, implements ITriangleMaterial, implements IFogMaterial, implements IBillboardMaterial {
	public var color(getColor, setColor) : Int;
	public var alpha(getAlpha, setAlpha) : Float;
	public var visible(getVisible, null) : Bool;
	
	private var _color:Int;
	private var _alpha:Float;
	private var _materialDirty:Bool;
	private var _materialupdated:MaterialEvent;
	/**
	 * Instance of the Init object used to hold and parse default property values
	 * specified by the initialiser object in the 3d object constructor.
	 */
	private var ini:Init;
	

	/** @private */
	public function notifyMaterialUpdate():Void {
		
		if (!hasEventListener(MaterialEvent.MATERIAL_UPDATED)) {
			return;
		}
		if (_materialupdated == null) {
			_materialupdated = new MaterialEvent(MaterialEvent.MATERIAL_UPDATED, this);
		}
		dispatchEvent(_materialupdated);
	}

	/**
	 * 24 bit color value representing the material color
	 */
	public function setColor(val:Int):Int {
		
		if (_color == val) {
			return val;
		}
		_color = val;
		_materialDirty = true;
		return val;
	}

	public function getColor():Int {
		
		return _color;
	}

	/**
	 * @inheritDoc
	 */
	public function setAlpha(val:Float):Float {
		
		if (_alpha == val) {
			return val;
		}
		_alpha = val;
		_materialDirty = true;
		return val;
	}

	public function getAlpha():Float {
		
		return _alpha;
	}

	/**
	 * @inheritDoc
	 */
	public function getVisible():Bool {
		
		return (alpha > 0);
	}

	/**
	 * Creates a new <code>ColorMaterial</code> object.
	 * 
	 * @param	color				A string, hex value or colorname representing the color of the material.
	 * @param	init	[optional]	An initialisation object for specifying default instance properties.
	 */
	public function new(?color:Dynamic=null, ?init:Dynamic=null) {
		// autogenerated
		super();
		
		
		if (color == null) {
			color = "random";
		}
		this.color = Cast.trycolor(color);
		ini = Init.parse(init);
		_alpha = ini.getNumber("alpha", 1, {min:0, max:1});
	}

	/**
	 * @inheritDoc
	 */
	public function updateMaterial(source:Object3D, view:View3D):Void {
		
		if (_materialDirty) {
			_materialDirty = false;
			notifyMaterialUpdate();
		}
	}

	/**
	 * @inheritDoc
	 */
	public function renderTriangle(tri:DrawTriangle):Void {
		
		tri.source.session.renderTriangleColor(_color, _alpha, tri.v0, tri.v1, tri.v2);
	}

	/**
	 * @inheritDoc
	 */
	public function renderBillboard(bill:DrawBillboard):Void {
		
		bill.source.session.renderBillboardColor(_color, _alpha, bill);
	}

	/**
	 * @inheritDoc
	 */
	public function renderFog(fog:DrawFog):Void {
		
		fog.source.session.renderFogColor(fog.clip, _color, _alpha);
	}

	/**
	 * @inheritDoc
	 */
	public function clone():IFogMaterial {
		
		return new ColorMaterial(_color, {alpha:_alpha});
	}

	/**
	 * @inheritDoc
	 */
	public function addOnMaterialUpdate(listener:Dynamic):Void {
		
		addEventListener(MaterialEvent.MATERIAL_UPDATED, listener, false, 0, true);
	}

	/**
	 * @inheritDoc
	 */
	public function removeOnMaterialUpdate(listener:Dynamic):Void {
		
		removeEventListener(MaterialEvent.MATERIAL_UPDATED, listener, false);
	}

}

