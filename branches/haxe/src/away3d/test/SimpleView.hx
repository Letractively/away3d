package away3d.test;

import away3d.cameras.Camera3D;
import away3d.containers.View3D;
import away3d.core.base.Object3D;
import away3d.core.render.Renderer;
import away3d.core.stats.Tasks;
import flash.display.Sprite;
import flash.events.Event;
import flash.events.EventDispatcher;
import flash.display.Stage;
import flash.display.DisplayObject;


class SimpleView extends Sprite  {
	
	private var task:String;
	private var view:View3D;
	private var target:Object3D;
	

	/**
	 * SimpleView for testing/demo purpose
	 * 
	 * @param task Your task name for profiler
	 * @param desc Your description for this task
	 * 
	 */
	public function new(?task:String="Draw", ?desc:String="") {
		// autogenerated
		super();
		
		OPPOSITE_OR[X | X] = N;
		OPPOSITE_OR[XY | X] = Y;
		OPPOSITE_OR[XZ | X] = Z;
		OPPOSITE_OR[XYZ | X] = YZ;
		OPPOSITE_OR[Y | Y] = N;
		OPPOSITE_OR[XY | Y] = X;
		OPPOSITE_OR[XYZ | Y] = XZ;
		OPPOSITE_OR[YZ | Y] = Z;
		OPPOSITE_OR[Z | Z] = N;
		OPPOSITE_OR[XZ | Z] = X;
		OPPOSITE_OR[XYZ | Z] = XY;
		OPPOSITE_OR[YZ | Z] = Y;
		SCALINGS[1] = [1, 1, 1];
		SCALINGS[2] = [-1, 1, 1];
		SCALINGS[4] = [-1, 1, -1];
		SCALINGS[8] = [1, 1, -1];
		SCALINGS[16] = [1, -1, 1];
		SCALINGS[32] = [-1, -1, 1];
		SCALINGS[64] = [-1, -1, -1];
		SCALINGS[128] = [1, -1, -1];
		
		this.task = task;
		view = new View3D({x:flash.Lib.current.stage.stageWidth * .5, y:flash.Lib.current.stage.stageHeight * .5, camera:new Camera3D({y:2000 * Math.sin(Math.PI / 6), z:2000}), renderer:Renderer.BASIC});
		target = new Object3D();
		view.scene.addChild(target);
		view.camera.lookAt(target.position);
		view.addEventListener(Event.ADDED_TO_STAGE, init);
		addChild(view);
		//stat+profiler
		Tasks.init(this, desc);
	}

	private function init(event:Event):Void {
		//stage
		
		flash.Lib.current.stage.scaleMode = "noScale";
		flash.Lib.current.stage.showDefaultContextMenu = true;
		flash.Lib.current.stage.stageFocusRect = false;
		flash.Lib.current.stage.quality = "medium";
		flash.Lib.current.stage.frameRate = 30;
		create();
	}

	private function create():Void {
		//plz override me
		
	}

	private function start():Void {
		
		view.camera.lookAt(target.position);
		addEventListener(Event.ENTER_FRAME, run);
	}

	private function run(event:Event):Void {
		//update
		
		view.render();
		//begin profiler
		Tasks.begin(task);
		//draw
		draw();
		//end profiler
		Tasks.end(task);
	}

	private function draw():Void {
		//plz override me
		
	}

}

