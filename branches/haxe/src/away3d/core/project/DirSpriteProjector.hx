package away3d.core.project;

import away3d.sprites.DirSprite2D;
import away3d.core.utils.ValueObject;
import flash.events.EventDispatcher;
import flash.display.BitmapData;
import away3d.containers.View3D;
import flash.utils.Dictionary;
import away3d.core.utils.DrawPrimitiveStore;
import away3d.core.draw.IPrimitiveConsumer;
import away3d.core.draw.ScreenVertex;
import away3d.core.base.Object3D;
import away3d.cameras.lenses.ILens;
import away3d.core.draw.IPrimitiveProvider;
import flash.display.Sprite;
import away3d.core.math.Matrix3D;
import away3d.core.base.Vertex;


class DirSpriteProjector implements IPrimitiveProvider {
	public var view(getView, setView) : View3D;
	
	private var _view:View3D;
	private var _vertexDictionary:Dictionary;
	private var _drawPrimitiveStore:DrawPrimitiveStore;
	private var _dirsprite:DirSprite2D;
	private var _vertices:Array<Dynamic>;
	private var _bitmaps:Dictionary;
	private var _lens:ILens;
	private var _vertex:Vertex;
	private var _screenVertex:ScreenVertex;
	private var _persp:Float;
	

	public function getView():View3D {
		
		return _view;
	}

	public function setView(val:View3D):View3D {
		
		_view = val;
		_drawPrimitiveStore = view.drawPrimitiveStore;
		return val;
	}

	public function primitives(source:Object3D, viewTransform:Matrix3D, consumer:IPrimitiveConsumer):Void {
		
		_vertexDictionary = _drawPrimitiveStore.createVertexDictionary(source);
		_dirsprite = cast(source, DirSprite2D);
		_vertices = _dirsprite.vertices;
		_bitmaps = _dirsprite.bitmaps;
		_lens = _view.camera.lens;
		if (_vertices.length == 0) {
			return;
		}
		var minz:Float = Math.POSITIVE_INFINITY;
		var bitmap:BitmapData = null;
		for (__i in 0..._vertices.length) {
			_vertex = _vertices[__i];

			_screenVertex = _lens.project(viewTransform, _vertex);
			var z:Float = _screenVertex.z;
			if (z < minz) {
				minz = z;
				bitmap = _bitmaps[cast _vertex];
			}
		}

		if (bitmap == null) {
			return;
		}
		_screenVertex = _lens.project(viewTransform, _dirsprite.center);
		if (!_screenVertex.visible) {
			return;
		}
		_persp = view.camera.zoom / (1 + _screenVertex.z / view.camera.focus);
		_screenVertex.z += _dirsprite.deltaZ;
		consumer.primitive(_drawPrimitiveStore.createDrawScaledBitmap(source, _screenVertex, _dirsprite.smooth, bitmap, _persp * _dirsprite.scaling, _dirsprite.rotation));
	}

	// autogenerated
	public function new () {
		
	}

	

}

