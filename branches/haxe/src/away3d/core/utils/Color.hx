package away3d.core.utils;



/** Static helper class for color manipulations */
class Color  {
	
	public static inline var white:Int = 0xFFFFFF;
	public static inline var black:Int = 0x000000;
	public static inline var red:Int = 0xFF0000;
	public static inline var green:Int = 0x00FF00;
	public static inline var blue:Int = 0x0000FF;
	public static inline var yellow:Int = 0xFFFF00;
	public static inline var cyan:Int = 0x00FFFF;
	public static inline var purple:Int = 0xFF00FF;
	

	public static function multiply(color:Int, k:Float):Int {
		
		var r:Int = color & 0xFF0000 >> 16;
		var g:Int = color & 0xFF00 >> 8;
		var b:Int = color & 0xFF;
		return fromIntsCheck(Std.int(r * k), Std.int(g * k), Std.int(b * k));
	}

	public static function add(colora:Int, colorb:Int):Int {
		
		var ra:Int = colora & 0xFF0000 >> 16;
		var ga:Int = colora & 0xFF00 >> 8;
		var ba:Int = colora & 0xFF;
		var rb:Int = colorb & 0xFF0000 >> 16;
		var gb:Int = colorb & 0xFF00 >> 8;
		var bb:Int = colorb & 0xFF;
		return fromIntsCheck(ra + rb, ga + gb, ba + bb);
	}

	public static function inverseAdd(colora:Int, colorb:Int):Int {
		
		var ra:Int = 255 - colora & 0xFF0000 >> 16;
		var ga:Int = 255 - colora & 0xFF00 >> 8;
		var ba:Int = 255 - colora & 0xFF;
		var rb:Int = 255 - colorb & 0xFF0000 >> 16;
		var gb:Int = 255 - colorb & 0xFF00 >> 8;
		var bb:Int = 255 - colorb & 0xFF;
		return fromIntsCheck(255 - (ra + rb), 255 - (ga + gb), 255 - (ba + bb));
	}

	public static function fromHSV(hue:Float, saturation:Float, value:Float):Int {
		
		var h:Float = ((hue % 360) + 360) % 360;
		var s:Float = saturation;
		var v:Float = value;
		var hi:Int = Std.int(h / 60) % 6;
		var f:Float = h / 60 - hi;
		var p:Float = v * (1 - s);
		var q:Float = v * (1 - f * s);
		var t:Float = v * (1 - (1 - f) * s);
		switch (hi) {
			case 0 :
				return fromFloats(v, t, p);
			case 1 :
				return fromFloats(q, v, p);
			case 2 :
				return fromFloats(p, v, t);
			case 3 :
				return fromFloats(p, q, v);
			case 4 :
				return fromFloats(t, p, v);
			case 5 :
				return fromFloats(v, p, q);
			

		}
		return 0;
	}

	public static function fromFloats(red:Float, green:Float, blue:Float):Int {
		
		return 0x10000 * Std.int(red * 0xFF) + 0x100 * Std.int(green * 0xFF) + Std.int(blue * 0xFF);
	}

	public static function fromInts(red:Int, green:Int, blue:Int):Int {
		
		return 0x10000 * red + 0x100 * green + blue;
	}

	public static function fromIntsCheck(red:Int, green:Int, blue:Int):Int {
		
		red = Std.int(Math.max(0, Math.min(255, red)));
		green = Std.int(Math.max(0, Math.min(255, green)));
		blue = Std.int(Math.max(0, Math.min(255, blue)));
		return 0x10000 * red + 0x100 * green + blue;
	}

	// autogenerated
	public function new () {
		
	}

	

}

