package away3d.core.utils;

import flash.display.BitmapData;
import away3d.primitives.data.CubeMaterialsData;
import away3d.materials.IMaterial;
import flash.events.EventDispatcher;
import away3d.materials.ISegmentMaterial;
import away3d.core.base.Object3D;
import away3d.core.math.Number3D;


// use namespace arcane;

/** Convinient object initialization support */
class Init  {
	
	/** @private */
	public var init:Dynamic;
	private static var inits:Array<Dynamic> = [];
	

	public function new(init:Dynamic) {
		
		
		this.init = init;
	}

	public static function parse(init:Dynamic):Init {
		
		if (init == null) {
			return new Init();
		}
		if (Std.is(init, Init)) {
			return cast(init, Init);
		}
		inits.push(init);
		return new Init();
	}

	public function getInt(name:String, def:Int, ?bounds:Dynamic=null):Int {
		
		if (init == null) {
			return def;
		}
		if (!Reflect.hasField(init, name)) {
			return def;
		}
		var result:Int = Reflect.field(init, name);
		if (bounds != null) {
			if (Reflect.hasField(bounds, "min")) {
				var min:Int = Reflect.field(bounds, "min");
				if (result < min) {
					result = min;
				}
			}
			if (Reflect.hasField(bounds, "max")) {
				var max:Int = Reflect.field(bounds, "max");
				if (result > max) {
					result = max;
				}
			}
		}
		Reflect.deleteField(init, name);
		return result;
	}

	public function getNumber(name:String, def:Float, ?bounds:Dynamic=null):Float {
		
		if (init == null) {
			return def;
		}
		if (!Reflect.hasField(init, name)) {
			return def;
		}
		var result:Float = Reflect.field(init, name);
		if (bounds != null) {
			if (Reflect.hasField(bounds, "min")) {
				var min:Float = Reflect.field(bounds, "min");
				if (result < min) {
					result = min;
				}
			}
			if (Reflect.hasField(bounds, "max")) {
				var max:Float = Reflect.field(bounds, "max");
				if (result > max) {
					result = max;
				}
			}
		}
		Reflect.deleteField(init, name);
		return result;
	}

	public function getString(name:String, def:String):String {
		
		if (init == null) {
			return def;
		}
		if (!Reflect.hasField(init, name)) {
			return def;
		}
		var result:String = Reflect.field(init, name);
		Reflect.deleteField(init, name);
		return result;
	}

	public function getBoolean(name:String, def:Bool):Bool {
		
		if (init == null) {
			return def;
		}
		if (!Reflect.hasField(init, name)) {
			return def;
		}
		var result:Bool = (Reflect.field(init, name) != null);
		Reflect.deleteField(init, name);
		return result;
	}

	public function getObject(name:String, ?type:Class<Dynamic>=null):Dynamic {
		
		if (init == null) {
			return null;
		}
		if (!Reflect.hasField(init, name)) {
			return null;
		}
		var result:Dynamic = Reflect.field(init, name);
		Reflect.deleteField(init, name);
		if (result == null) {
			return null;
		}
		if (type != null) {
			if (!(Std.is(result, type))) {
				throw new CastError();
			}
		}
		return result;
	}

	public function getObjectOrInit(name:String, ?type:Class<Dynamic>=null):Dynamic {
		
		if (init == null) {
			return null;
		}
		if (!Reflect.hasField(init, name)) {
			return null;
		}
		var result:Dynamic = Reflect.field(init, name);
		Reflect.deleteField(init, name);
		if (result == null) {
			return null;
		}
		if (type != null) {
			if (!(Std.is(result, type))) {
				return Type.createInstance(type, []);
			}
		}
		return result;
	}

	public function getObject3D(name:String):Object3D {
		
		return cast(getObject(name, Object3D), Object3D);
	}

	public function getNumber3D(name:String):Number3D {
		
		return cast(getObject(name, Number3D), Number3D);
	}

	public function getPosition(name:String):Number3D {
		
		var value:Dynamic = getObject(name);
		if (value == null) {
			return null;
		}
		if (Std.is(value, Number3D)) {
			return cast(value, Number3D);
		}
		if (Std.is(value, Object3D)) {
			var o:Object3D = cast(value, Object3D);
			return o.scene ? o.scenePosition : o.position;
		}
		if (Std.is(value, String)) {
			if (value == "center") {
				return new Number3D();
			}
		}
		throw new CastError();
		
		// autogenerated
		return null;
	}

	public function getArray(name:String):Array<Dynamic> {
		
		if (init == null) {
			return [];
		}
		if (!Reflect.hasField(init, name)) {
			return [];
		}
		var result:Array<Dynamic> = Reflect.field(init, name);
		Reflect.deleteField(init, name);
		return result;
	}

	public function getInit(name:String):Init {
		
		if (init == null) {
			return new Init();
		}
		if (!Reflect.hasField(init, name)) {
			return new Init();
		}
		var result:Init = Init.parse(Reflect.field(init, name));
		Reflect.deleteField(init, name);
		return result;
	}

	public function getCubeMaterials(name:String):CubeMaterialsData {
		
		if (init == null) {
			return null;
		}
		if (!Reflect.hasField(init, name)) {
			return null;
		}
		var result:CubeMaterialsData;
		if (Std.is(Reflect.field(init, name), CubeMaterialsData)) {
			result = cast(Reflect.field(init, name), CubeMaterialsData);
		} else if (Std.is(Reflect.field(init, name), Dynamic)) {
			result = new CubeMaterialsData();
		}
		Reflect.deleteField(init, name);
		return result;
	}

	public function getColor(name:String, def:Int):Int {
		
		if (init == null) {
			return def;
		}
		if (!Reflect.hasField(init, name)) {
			return def;
		}
		var result:Int = Cast.color(Reflect.field(init, name));
		Reflect.deleteField(init, name);
		return result;
	}

	public function getBitmap(name:String):BitmapData {
		
		if (init == null) {
			return null;
		}
		if (!Reflect.hasField(init, name)) {
			return null;
		}
		var result:BitmapData = Cast.bitmap(Reflect.field(init, name));
		Reflect.deleteField(init, name);
		return result;
	}

	public function getMaterial(name:String):IMaterial {
		
		if (init == null) {
			return null;
		}
		if (!Reflect.hasField(init, name)) {
			return null;
		}
		var result:IMaterial = Cast.material(Reflect.field(init, name));
		Reflect.deleteField(init, name);
		return result;
	}

	public function getSegmentMaterial(name:String):ISegmentMaterial {
		
		if (init == null) {
			return null;
		}
		if (!Reflect.hasField(init, name)) {
			return null;
		}
		var result:ISegmentMaterial = Cast.wirematerial(Reflect.field(init, name));
		Reflect.deleteField(init, name);
		return result;
	}

	public function removeFromCheck():Void {
		
		if (init == null) {
			return;
		}
		Reflect.setField(init, "dontCheckUnused", true);
	}

	public function addForCheck():Void {
		
		if (init == null) {
			return;
		}
		Reflect.setField(init, "dontCheckUnused", false);
		inits.push(init);
	}

	public static function checkUnusedArguments():Void {
		
		if (inits.length == 0) {
			return;
		}
		var list:Array<Dynamic> = inits;
		inits = [];
		for (__i in 0...list.length) {
			var init:Dynamic = list[__i];

			if (Reflect.hasField(init, "dontCheckUnused")) {
				if ((Reflect.field(init, "dontCheckUnused") != null)) {
					continue;
				}
			}
			var s:String = null;
			var name:String;
			for (name in Reflect.fields(init)) {
				if (name == "dontCheckUnused") {
					continue;
				}
				if (s == null) {
					s = "";
				} else {
					s += ", ";
				}
				s += name + ":" + Reflect.field(init, name);
				
			}

			if (s != null) {
				Debug.warning("Unused arguments: {" + s + "}");
			}
		}

	}

}

