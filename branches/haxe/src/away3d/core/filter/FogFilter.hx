package away3d.core.filter;    import away3d.cameras.*;    import away3d.containers.*;    import away3d.core.base.Object3D;    import away3d.core.clip.*;    import away3d.core.draw.*;    import away3d.core.render.*;    import away3d.core.utils.*;    import away3d.materials.*;    /**    * Adds fog layers to a view and provides automatic farfield filtering for primitives outside the furthest fog layers.	*/    class FogFilter implements IPrimitiveFilter {    	public var material(getMaterial, setMaterial) : IFogMaterial;    	    	var i:Int;    	    	var _primitives:Array<Dynamic>;    	var pri:DrawPrimitive;    	    	var _material:IFogMaterial;    	var _minZ:Float;    	var _maxZ:Int;    	var _subdivisions:Int;    	var _materials:Array<Dynamic> ;    	    	var _fogPrimitives:Array<Dynamic> ;    	var fog:DrawFog;		         /**        * Instance of the Init object used to hold and parse default property values        * specified by the initialiser object in the 3d object constructor.        */		var ini:Init;				/**		 * Defines the material used by the fog layers.		 */		public function getMaterial():IFogMaterial{			return _material;		}				public function setMaterial(val:IFogMaterial):IFogMaterial{			_material = val;			return val;		}				/**		 * Allows color change at runtime of the filter		 * @param	color			The new color for the filter		 */		public function updateMaterialColor(color:UInt):Void		{			for (fog in _fogPrimitives) {				if(Std.is( fog.material, ColorMaterial))					fog.material = new ColorMaterial(color, {alpha:fog.material.alpha});			}		}    			/**		 * Creates a new <code>FogFilter</code> object.		 *		 * @param	init			[optional]	An initialisation object for specifying default instance properties.		 */		function new(?init:Dynamic = null){			
			_materials = [];
			_fogPrimitives = [];
			ini = Init.parse(init);						_material = cast( ini.getMaterial("material"), IFogMaterial);			_minZ = ini.getNumber("minZ", 1000, {min:0});            _maxZ = ini.getNumber("maxZ", 5000, {min:0});            _subdivisions = ini.getInt("subdivisions", 20, {min:1, max:50});            _materials = ini.getArray("materials");                        if (!(Std.is( _material, IFogMaterial)))            	throw new Error("FogFilter requires IFogMaterial");                        if (!_material && !_materials.length)            	_material = new ColorMaterial(0x000000);                        //materials override subdivisions            if (!_materials.length) {            	i = _subdivisions;            	while (i--)            		_materials.push(_material.clone());            } else {            	_subdivisions = _materials.length;            }                        i = _subdivisions;            while(i--) {            	(cast( _materials[i], IFogMaterial)).alpha = 0.45*i/_subdivisions;            	fog = new DrawFog();            	fog.screenZ = _minZ + (_maxZ - _minZ)*i/(_subdivisions - 1);            	fog.material = _materials[i];            	_fogPrimitives.unshift(fog);            }		}        		/**		 * @inheritDoc		 */        public function filter(primitives:Array<Dynamic>, scene:Scene3D, camera:Camera3D, clip:Clipping):Array<Dynamic>        {        	if (!primitives.length || !primitives[0].source || primitives[0].source.session != scene.session)        		return primitives;        				for (fog in _fogPrimitives) {				fog.source = scene;				fog.clip = clip;				primitives.push(fog);			}						_primitives = [];						for (pri in primitives) {				if (pri.screenZ < _maxZ)					_primitives.push(pri); 			}        	return _primitives;        }				/**		 * Used to trace the values of a filter.		 * 		 * @return A string representation of the filter object.		 */        public function toString():String        {            return "FogFilter";        }    }