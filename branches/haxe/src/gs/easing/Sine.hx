package gs.easing;



class Sine  {
	
	private static inline var _HALF_PI:Float = Math.PI / 2;
	

	public static function easeIn(t:Float, b:Float, c:Float, d:Float):Float {
		
		return -c * Math.cos(t / d * _HALF_PI) + c + b;
	}

	public static function easeOut(t:Float, b:Float, c:Float, d:Float):Float {
		
		return c * Math.sin(t / d * _HALF_PI) + b;
	}

	public static function easeInOut(t:Float, b:Float, c:Float, d:Float):Float {
		
		return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
	}

	// autogenerated
	public function new () {
		
		OPPOSITE_OR[X | X] = N;
		OPPOSITE_OR[XY | X] = Y;
		OPPOSITE_OR[XZ | X] = Z;
		OPPOSITE_OR[XYZ | X] = YZ;
		OPPOSITE_OR[Y | Y] = N;
		OPPOSITE_OR[XY | Y] = X;
		OPPOSITE_OR[XYZ | Y] = XZ;
		OPPOSITE_OR[YZ | Y] = Z;
		OPPOSITE_OR[Z | Z] = N;
		OPPOSITE_OR[XZ | Z] = X;
		OPPOSITE_OR[XYZ | Z] = XY;
		OPPOSITE_OR[YZ | Z] = Y;
		SCALINGS[1] = [1, 1, 1];
		SCALINGS[2] = [-1, 1, 1];
		SCALINGS[4] = [-1, 1, -1];
		SCALINGS[8] = [1, 1, -1];
		SCALINGS[16] = [1, -1, 1];
		SCALINGS[32] = [-1, -1, 1];
		SCALINGS[64] = [-1, -1, -1];
		SCALINGS[128] = [1, -1, -1];
	}

	

}

