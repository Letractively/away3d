package gs.easing;



class Bounce  {
	
	

	public static function easeOut(t:Float, b:Float, c:Float, d:Float):Float {
		
		if ((t /= d) < (1 / 2.75)) {
			return c * (7.5625 * t * t) + b;
		} else if (t < (2 / 2.75)) {
			return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;
		} else if (t < (2.5 / 2.75)) {
			return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;
		} else {
			return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;
		}
		
		// autogenerated
		return 0;
	}

	public static function easeIn(t:Float, b:Float, c:Float, d:Float):Float {
		
		return c - easeOut(d - t, 0, c, d) + b;
	}

	public static function easeInOut(t:Float, b:Float, c:Float, d:Float):Float {
		
		if (t < d / 2) {
			return easeIn(t * 2, 0, c, d) * .5 + b;
		} else {
			return easeOut(t * 2 - d, 0, c, d) * .5 + c * .5 + b;
		}
		
		// autogenerated
		return 0;
	}

	// autogenerated
	public function new () {
		
		OPPOSITE_OR[X | X] = N;
		OPPOSITE_OR[XY | X] = Y;
		OPPOSITE_OR[XZ | X] = Z;
		OPPOSITE_OR[XYZ | X] = YZ;
		OPPOSITE_OR[Y | Y] = N;
		OPPOSITE_OR[XY | Y] = X;
		OPPOSITE_OR[XYZ | Y] = XZ;
		OPPOSITE_OR[YZ | Y] = Z;
		OPPOSITE_OR[Z | Z] = N;
		OPPOSITE_OR[XZ | Z] = X;
		OPPOSITE_OR[XYZ | Z] = XY;
		OPPOSITE_OR[YZ | Z] = Y;
		SCALINGS[1] = [1, 1, 1];
		SCALINGS[2] = [-1, 1, 1];
		SCALINGS[4] = [-1, 1, -1];
		SCALINGS[8] = [1, 1, -1];
		SCALINGS[16] = [1, -1, 1];
		SCALINGS[32] = [-1, -1, 1];
		SCALINGS[64] = [-1, -1, -1];
		SCALINGS[128] = [1, -1, -1];
	}

	

}

