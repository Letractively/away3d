package gs;

import gs.utils.tween.TweenInfo;


class OverwriteManager  {
	
	public static inline var version:Float = 3.11;
	public static inline var NONE:Int = 0;
	public static inline var ALL:Int = 1;
	public static inline var AUTO:Int = 2;
	public static inline var CONCURRENT:Int = 3;
	public static var mode:Int;
	public static var enabled:Bool;
	

	public static function init(?$mode:Int=2):Int {
		
		if (TweenLite.version < 10.04) {
			trace("TweenLite warning: Your TweenLite class needs to be updated to work with OverwriteManager (or you may need to clear your ASO files). Please download and install the latest version from http://www.tweenlite.com.");
		}
		TweenLite.overwriteManager = OverwriteManager;
		mode = $mode;
		enabled = true;
		return mode;
	}

	public static function manageOverwrites($tween:TweenLite, $targetTweens:Array<Dynamic>):Void {
		
		var vars:Dynamic = $tween.vars;
		var m:Int = (vars.overwrite == undefined) ? mode : Std.int(vars.overwrite);
		if (m < 2 || $targetTweens == null) {
			return;
		}
		var startTime:Float = $tween.startTime;
		var a:Array<Dynamic> = [];
		var i:Int;
		var tween:TweenLite;
		i = $targetTweens.length - 1;
		while (i > -1) {
			tween = $targetTweens[i];
			if (tween != $tween && tween.startTime <= startTime && tween.startTime + (tween.duration * 1000 / tween.combinedTimeScale) > startTime) {
				a[a.length] = tween;
			}
			
			// update loop variables
			i--;
		}

		if (a.length == 0 || $tween.tweens.length == 0) {
			return;
		}
		if (m == AUTO) {
			var tweens:Array<Dynamic> = $tween.tweens;
			var v:Dynamic = {};
			var j:Int;
			var ti:TweenInfo;
			var overwriteProps:Array<Dynamic>;
			i = tweens.length - 1;
			while (i > -1) {
				ti = tweens[i];
				//is a plugin with multiple overwritable properties
				if (ti.isPlugin && ti.name == "_MULTIPLE_") {
					overwriteProps = ti.target.overwriteProps;
					j = overwriteProps.length - 1;
					while (j > -1) {
						Reflect.setField(v, overwriteProps[j], true);
						
						// update loop variables
						j--;
					}

					Reflect.setField(v, ti.target.propName, true);
				} else {
					Reflect.setField(v, ti.name, true);
				}
				
				// update loop variables
				i--;
			}

			i = a.length - 1;
			while (i > -1) {
				killVars(v, a[i].exposedVars, a[i].tweens);
				
				// update loop variables
				i--;
			}

		} else {
			i = a.length - 1;
			while (i > -1) {
				a[i].enabled = false;
				
				// update loop variables
				i--;
			}

		}
	}

	public static function killVars($killVars:Dynamic, $vars:Dynamic, $tweens:Array<Dynamic>):Void {
		
		var i:Int;
		var p:String;
		var ti:TweenInfo;
		i = $tweens.length - 1;
		while (i > -1) {
			ti = $tweens[i];
			if (ti.name in $killVars) {
				$tweens.splice(i, 1);
				//is a plugin with multiple overwritable properties
				
			} else if (ti.isPlugin && ti.name == "_MULTIPLE_") {
				ti.target.killProps($killVars);
				if (ti.target.overwriteProps.length == 0) {
					$tweens.splice(i, 1);
				}
			}
			
			// update loop variables
			i--;
		}

		for (p in Reflect.fields($killVars)) {
			Reflect.deleteField($vars, p);
			
		}

	}

	// autogenerated
	public function new () {
		
	}

	

}

