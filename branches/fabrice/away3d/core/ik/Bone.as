package away3d.core.ik{    import flash.geom.Matrix;	import away3d.core.scene.Scene3D;	import away3d.core.mesh.Mesh;	import away3d.core.mesh.UV;	import away3d.core.mesh.Vertex;	import away3d.core.mesh.Face;	import away3d.core.scene.MouseEvent3D;	import away3d.core.material.ColorMaterial;	import away3d.core.material.IMaterial;	    public class Bone extends Mesh    {				public var _x:Number;		public var _y:Number;		public var _z:Number;		public var _length:Number;		public var _vertices:Array;		public var mesh:Mesh;		public var _chainid:int;		public var _parentid:int;				public var _matrix:Matrix;	   		function Bone(x:Number,y:Number,z:Number,length:Number, chainid:int, parentid:int, verticelist:Array, visible:Boolean = false, mat:IMaterial = null)		{			this._x = x;			this._y = y;			this._z = z;			this._length = length;			this._vertices = new Array();			this._vertices = this._vertices.concat(verticelist);			this._matrix = new Matrix();			this._chainid = chainid;			this._parentid = parentid;			if(visible){				super({material:mat, x:this._x, y:this._y, z:this._z});				this.generateBoneMesh(this._length);			}					}		//		//MouseEvents		public function setMouseEvents():void{			this.addOnMouseDown(this.onPressMouse);			this.addOnMouseMove(this.onMoveMouse);			this.addOnMouseOut(this.onOutMouse);			this.addOnMouseOver(this.onOverMouse);			this.addOnMouseUp(this.onUpMouse);		}		public function onPressMouse(event:MouseEvent3D){			trace("press bone");		}		public function onMoveMouse(event:MouseEvent3D){			trace("move bone");		}		public function onOutMouse(event:MouseEvent3D){			trace("out bone");		}		public function onOverMouse(event:MouseEvent3D){			trace("over bone");		}		public function onUpMouse(event:MouseEvent3D){			trace("up bone");		}				//geomtrie if visible		private function generateBoneMesh(length:Number):void		{				trace("generate bone...");						var yfloor:Number = (length/100)*10;			var width:Number = (yfloor*1.5)*.5;			 			var vertices = new Array();			vertices[0] = new Vertex(0, 0, 0);			vertices[1] = new Vertex(-width, yfloor, width);			vertices[2] = new Vertex(width, yfloor, width);			vertices[3] = new Vertex(width, yfloor, -width);			vertices[4] = new Vertex(-width, yfloor, -width);			vertices[5] = new Vertex(0, length, 0);						// fake uvs since we will only use trace line and fills			var uv1 = new UV(0,0);			var uv2 = new UV(1,0.5);			var uv3 = new UV(0.5,1);			//zero pyramide			addFace(new Face(vertices[0], vertices[1], vertices[2], null, uv1, uv2, uv3));			addFace(new Face(vertices[0], vertices[2], vertices[3], null, uv1, uv2, uv3));			addFace(new Face(vertices[0], vertices[3], vertices[4], null, uv1, uv2, uv3));			addFace(new Face(vertices[0], vertices[4], vertices[1], null, uv1, uv2, uv3));			//top pyramide			addFace(new Face(vertices[1], vertices[5], vertices[2], null, uv1, uv2, uv3));			addFace(new Face(vertices[2], vertices[5], vertices[3], null, uv1, uv2, uv3));			addFace(new Face(vertices[3], vertices[5], vertices[4], null, uv1, uv2, uv3));			addFace(new Face(vertices[4], vertices[5], vertices[1], null, uv1, uv2, uv3));					}				public function get verticesgroup():Array		{			return this._vertices;		}				public function set verticesgroup(vertices:Array):void		{				this._vertices = new Array();			this._vertices = vertices.concat();		}				public function get length():Number		{			return this._length;		}				public function set length(val:Number):void		{			this._length = val;		}				public function get matrix():Matrix		{			return this._matrix;		}				public function set matrix(mat:Matrix):void		{			this._matrix = mat;		}		// overrides probably not needed		/*		public function get x():Number		{			return this._x;		}				public function set x(value:Number):void		{			if (value == this._x)			return;			this._x = value;		}				public function get y():Number		{			return this._y;		}				public function set y(value:Number):void		{			if (value == this._y)			return;			this._y = value;		}		public function get z():Number		{			return this._z;		}				public function set z(value:Number):void		{			if (value == this._z)			return;			this._z = value;		}		*/		     }}