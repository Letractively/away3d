package away3d.core.ik{    import flash.geom.Matrix;	import away3d.core.scene.Scene3D;	import away3d.core.mesh.Mesh;	import away3d.core.mesh.UV;	import away3d.core.mesh.Vertex;	import away3d.core.mesh.Face;	import away3d.core.scene.MouseEvent3D;	import away3d.core.material.ColorMaterial;	import away3d.core.material.IMaterial;	import away3d.core.math.Number3D;	import away3d.core.ik.IKEvent;	import away3d.core.ik.Chain;	    public class Bone extends Mesh    {				public var _start:Number3D;		public var _end:Number3D;		public var _rotations:Number3D;		private var chain:Chain;		public var _length:Number;		public var _vertices:Array;		public var mesh:Mesh;		public var _chainid:int;		public var _parentid:int;		public var _id:int;		public var _extremity:Boolean;		public var _visible:Boolean;		private static var toDEGREES:Number = 180 / Math.PI;				public var _matrix:Matrix;	   		function Bone(start:Number3D, end:Number3D ,length:Number, extremity:Boolean, chain:Chain, chainid:int, parentid:int, verticelist:Array, visible:Boolean = false, mat:IMaterial = null)		{			this._start = new Number3D(start.x, start.y, start.z);			this._end = new Number3D(end.x, end.y+length, end.z);			this._length = length;			this._vertices = new Array();			this._vertices = this._vertices.concat(verticelist);			this._matrix = new Matrix();			this._chainid = chainid;			this._parentid = parentid-1;			this._id = parentid;			this.chain = chain;			this._extremity = extremity;			this._visible = visible;			this._rotations = new Number3D(0,0,0);			if(visible){				super({material:mat, x:this._start.x, y:this._start.y, z:this._start.z});				this.generateBoneMesh(this._length);			}		}		//		//MouseEvents		public function setMouseEvents():void{			this.addOnMouseDown(this.onPressMouse);			this.addOnMouseMove(this.onMoveMouse);			this.addOnMouseOut(this.onOutMouse);			this.addOnMouseOver(this.onOverMouse);			this.addOnMouseUp(this.onUpMouse);		}		public function onPressMouse(event:MouseEvent3D){			//trace("press bone");			//trace("Bone"+this._id+" says parentID: "+(this._parentid)+", extrimity: "+this._extremity+", chainid: "+this._chainid);			this.rotateUpdate(this._start, 5);			trace(this._id);			//trace(this._start+", "+this._end);		}		public function onMoveMouse(event:MouseEvent3D){			//trace("move bone");		}		public function onOutMouse(event:MouseEvent3D){			//trace("out bone");		}		public function onOverMouse(event:MouseEvent3D){			//trace("over bone");		}		public function onUpMouse(event:MouseEvent3D){			//trace("up bone");		}						//geomtrie if visible		private function generateBoneMesh(length:Number):void		{				trace("generate bone...");						var yfloor:Number = (length/100)*10;			var width:Number = (yfloor*1.5)*.5;			 			var vertices = new Array();			vertices[0] = new Vertex(0, 0, 0);			vertices[1] = new Vertex(-width, yfloor, width);			vertices[2] = new Vertex(width, yfloor, width);			vertices[3] = new Vertex(width, yfloor, -width);			vertices[4] = new Vertex(-width, yfloor, -width);			vertices[5] = new Vertex(0, length, 0);						// fake uvs since we will only use trace line and fills			var uv1 = new UV(0,0);			var uv2 = new UV(1,0.5);			var uv3 = new UV(0.5,1);			//zero pyramide			addFace(new Face(vertices[0], vertices[1], vertices[2], null, uv1, uv2, uv3));			addFace(new Face(vertices[0], vertices[2], vertices[3], null, uv1, uv2, uv3));			addFace(new Face(vertices[0], vertices[3], vertices[4], null, uv1, uv2, uv3));			addFace(new Face(vertices[0], vertices[4], vertices[1], null, uv1, uv2, uv3));			//top pyramide			addFace(new Face(vertices[1], vertices[5], vertices[2], null, uv1, uv2, uv3));			addFace(new Face(vertices[2], vertices[5], vertices[3], null, uv1, uv2, uv3));			addFace(new Face(vertices[3], vertices[5], vertices[4], null, uv1, uv2, uv3));			addFace(new Face(vertices[4], vertices[5], vertices[1], null, uv1, uv2, uv3));					}				public function get extremity():Boolean		{			return this._extremity;		}		public function set extremity(extremity:Boolean):void		{			this._extremity = extremity;		}				public function get verticelist():Array		{			return this._vertices;		}				public function set verticelist(avertices:Array):void		{				this._vertices = new Array();			this._vertices = vertices.concat();		}				public function get length():Number		{			return this._length;		}				public function set length(val:Number):void		{			this._length = val;		}				public function get matrix():Matrix		{			return this._matrix;		}				public function set matrix(mat:Matrix):void		{			this._matrix = mat;		}				//rotaties		// here we get new base start from previous bone and destination rotation		public function rotateUpdate(newstart:Number3D, increaseAngX:Number = 0, increaseAngY:Number = 0, increaseAngZ:Number = 0):void		{						 			// vertice draaien ChainUpdater.rotateXYZ(aVertices, angX, angY, angZ);			this.start = newstart;			this._rotations.x += increaseAngX;			this._rotations.y += increaseAngX;			this._rotations.z += increaseAngX;			trace("--> this._end rotate at: "+(this._rotations.x*toDEGREES)+" end : "+this._end);						ChainUpdater.rotateXYZ([this._end], this._rotations.x, this._rotations.y, this._rotations.z);//*toDEGREES						trace("<--- rotated end this._end"+this._end);			 			//ok tell next bone in chain to do same thing			if(!this._extremity){								trace("rotate bone:"+this._id);				this.chain.bones[this._id+1].rotateUpdate(this._end, increaseAngX, increaseAngY, increaseAngZ) ;								if(this._visible){					trace("update rotation model");					this.rotationX = this._rotations.x;					this.rotationY = this._rotations.y;					this.rotationZ = this._rotations.z;				}							} else{				trace("no i'am extrimity!"+this._id);			}			 		}								//start point		public function get start():Number3D		{			return this._start;		}				public function set start(nstart:Number3D):void		{			this._start.x = nstart.x;			this._start.y = nstart.y;			this._start.z = nstart.z;			if(this._visible){				trace("update model");				this.x = this._start.x;				this.y = this._start.y;				this.z = this._start.z;			}			// --> here comes update calculation end vertice		}		public function updateStart(noffset:Number3D):void		{			this._start.x += noffset.x;			this._start.y += noffset.y;			this._start.z += noffset.z;			this.updateEnd(noffset);			if(this._visible){				this.x = this._start.x;				this.y = this._start.y;				this.z = this._start.z;			}		}		//end point		public function get end():Number3D		{			return this._end;		}				public function set end(nend:Number3D):void		{				this._end.x = nend.x;			this._end.y = nend.y;			this._end.z = nend.z;		}		public function updateEnd(nend:Number3D):void		{			this._end.x += nend.x;			this._end.y += nend.y;			this._end.z += nend.z;		}    }}