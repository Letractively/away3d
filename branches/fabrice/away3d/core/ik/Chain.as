package away3d.core.ik{	import away3d.core.ik.Bone;	import away3d.core.ik.IKBase;	import flash.geom.Matrix;	import away3d.core.material.ColorMaterial;	import away3d.core.material.IMaterial;	    public class Chain    {				public var _x:Number;		public var _y:Number;		public var _z:Number;		public var _base:IKBase;				public var _matrix:Matrix;				public var _aBones:Array;			   		function Chain(x:Number,y:Number,z:Number):void		{			this._x = x;			this._y = y;			this._z = z;			this._matrix = new Matrix();			this._aBones = new Array();			trace("new Chain");		}				//returns all bones in this chain		public function get bones():Array		{			return this._aBones;		}				//returns origin bone in this chain		public function get firstbone():Bone		{			return this._aBones[0];		}				//returns extremity bone in this chain		public function get lastbone():Bone		{			return this._aBones[this._aBones.length-1];		}				// overwrite all bones... might be handy for dynamic fill off the chains from xml or comparable...		public function set bones(abones:Array):void		{				this._aBones = new Array();			this._aBones = this._aBones.concat(abones);		}				public function addBone(x:Number,y:Number,z:Number, length:Number, chainid:int, parentid:int, verticelist:Array, visible:Boolean = false, mat:IMaterial = null):Bone		{			trace("try add bone to chain..."+arguments);			try{				this._aBones.push(new Bone(x,y,z,length, chainid, parentid, verticelist, visible, mat));				trace("chain adds bone... at "+(this._aBones.length-1));			}catch (e:Error){				trace("Error while adding bone to chain");			}			return this._aBones[this._aBones.length-1];		}				public function removeBone(index:int):void		{			this._aBones.splice(index, 1);		}				public function get matrix():Matrix		{			return this._matrix;		}				public function set matrix(mat:Matrix):void		{			this._matrix = mat;		}				public function get x():Number		{			return this._x;		}				public function set x(value:Number):void		{			if (value == this._x)			return;			this._x = value;		}				public function get y():Number		{			return this._y;		}				public function set y(value:Number):void		{			if (value == this._y)			return;			this._y = value;		}		public function get z():Number		{			return this._z;		}				public function set z(value:Number):void		{			if (value == this._z)			return;			this._z = value;		}    }}