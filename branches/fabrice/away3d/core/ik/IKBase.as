package away3d.core.ik{	import away3d.core.ik.Chain;	import away3d.core.ik.Bone;	import away3d.core.scene.Scene3D;	import away3d.core.scene.Object3D;	import away3d.core.scene.MouseEvent3D;	import away3d.core.material.ColorMaterial;	import away3d.core.material.IMaterial;	import away3d.objects.Sphere;		    public class IKBase    {		public var _x:Number;		public var _y:Number;		public var _z:Number;		public var _visible:Boolean;				private var _squeletton:Array = new Array();		public var _scene:Scene3D;		public var _model:Object3D;				function IKBase(scene:Scene3D, model:Object3D, x:Number,y:Number,z:Number, visible:Boolean = false):void		{			this._x = x;			this._y = y;			this._z = z;			this._visible = visible;			this._scene = scene;			this._model = model;			if(visible){				var mat:IMaterial = new ColorMaterial(0xFF0000, {alpha:.6});				var obj = new Sphere({material:mat, radius:30, segmentsW:3, segmentsH:3, x:x, y:y, z:z, bothsides:false});				this._scene.addChild(obj);				this.setMouseEvents(obj);							}		}		public function setMouseEvents(obj:Object3D):void{			obj.addOnMouseDown(this.onPressMouse);			obj.addOnMouseMove(this.onMoveMouse);			obj.addOnMouseOut(this.onOutMouse);			obj.addOnMouseOver(this.onOverMouse);			obj.addOnMouseUp(this.onUpMouse);		}		public function onPressMouse(event:MouseEvent3D){			trace("press base");		}		public function onMoveMouse(event:MouseEvent3D){			trace("move base");		}		public function onOutMouse(event:MouseEvent3D){			trace("out base");		}		public function onOverMouse(event:MouseEvent3D){			trace("over base");		}		public function onUpMouse(event:MouseEvent3D){			trace("up base");		}						public function get scene():Scene3D		{			return this._scene;		}				public function get squeletton():Array		{			return this._squeletton;		}				public function getChain(ID:int):Chain		{			return this._squeletton[ID];		}				public function addChain(x:Number,y:Number,z:Number):int		{			var _chain:Chain = new Chain(x,y,z);			this._squeletton.push(_chain);			return this._squeletton.length-1;		}				public function addBone(length:Number, verticelist:Array, parentid:int = 999, chainid:int = 999 ):Bone		{									var x:int = 0;			var y:int = 0;			var z:int = 0;			try{				if(chainid == 999 || parentid == 999){					chainid = this.addChain(this._x,this._y,this._z);					trace("chainid :"+chainid);					parentid = 0;				} else{					var lastbone:Bone = this._squeletton[chainid].lastbone;					x = lastbone.x;					y = lastbone.y+lastbone.length;					z = lastbone.z;				}				 trace("bone instance: "+(this._squeletton[chainid]));				var mat:IMaterial;				if(this._visible){					mat = new ColorMaterial(0x0000FF, {alpha:.6});				}				var bone:Bone = this._squeletton[chainid].addBone(x,y,z,length, chainid, parentid, verticelist, this._visible, mat);				if(this._visible){					bone.setMouseEvents();					this._scene.addChild(bone);									}				return bone;			} catch (e:Error){				trace("error while adding new bone to chain...");			}			return null;		}				public function get x():Number		{			return this._x;		}				public function set x(value:Number):void		{			if (value == this._x)			return;			//--> update chains x			this._x = value;		}				public function get y():Number		{			return this._y;		}				public function set y(value:Number):void		{			if (value == this._y)			return;			//--> update chains y			this._y = value;		}		public function get z():Number		{			return this._z;		}				public function set z(value:Number):void		{			if (value == this._z)			return;			//--> update chains z			this._z = value;		}		//rotations    }}