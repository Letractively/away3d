package away3d.core.ik{	import away3d.core.ik.Chain;	import away3d.core.ik.Bone;	import away3d.core.scene.Scene3D;	    public class IKBase    {		public var _x:Number;		public var _y:Number;		public var _z:Number;				public var _squeletton:Array = new Array();		public var _scene:Scene3D;				function IKBase(scene:Scene3D, x:Number,y:Number,z:Number):void		{			this._x = x;			this._y = y;			this._z = z;			this._scene = scene;		}				public function get scene():Scene3D		{			return this._scene;		}				public function get squeletton():Array		{			return this._squeletton;		}				public function getChain(ID:int):Chain		{			return this._squeletton[ID];		}				public function addChain():int		{			var _chain:Chain = new Chain();			this._squeletton.push(_chain);			return this._squeletton.length;		}				public function get addBone(length:Number, parentid:int = 99, chainid:int = 99)		{						var x:int = 0;			var y:int = 0;			var z:int = 0;			var chainid:int;						if(chainid == 99 || parentid == 99){				chainid = this.addChain(this._x,this._y,this._z);				parentid = 0;			}						var bone:Bone = new Bone(x,y,z,length, this._scene, chainid, parentid);			this._scene.addChild(bone);			return bone;		}				public function get x():Number		{			return this._x;		}				public function set x(value:Number):void		{			if (value == this._x)			return;			//--> update chains x			this._x = value;		}				public function get y():Number		{			return this._y;		}				public function set y(value:Number):void		{			if (value == this._y)			return;			//--> update chains y			this._y = value;		}		public function get z():Number		{			return this._z;		}				public function set z(value:Number):void		{			if (value == this._z)			return;			//--> update chains z			this._z = value;		}		//rotations    }}