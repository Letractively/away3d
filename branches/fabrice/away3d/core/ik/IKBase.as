package away3d.core.ik{	import away3d.core.ik.Chain;	import away3d.core.ik.Bone;	import away3d.core.scene.Scene3D;	import away3d.core.scene.Object3D;	import away3d.core.scene.MouseEvent3D;	import away3d.core.material.ColorMaterial;	import away3d.core.material.IMaterial;	import away3d.objects.Cube;	import away3d.core.math.Number3D;	import flash.utils.getTimer;	import flash.events.EventDispatcher;	//	import away3d.core.ik.IKEvent;		    public class IKBase extends EventDispatcher    {		public var _position:Number3D;		public var _visible:Boolean;		private var toDEGREES:Number = 180 / Math.PI;        private var toRADIANS:Number = Math.PI / 180;				private var _skeleton:Array = new Array();		public var _scene:Scene3D;		public var _model:Object3D;		public var obj:Object3D;				public var _id:String;				function IKBase(scene:Scene3D, model:Object3D, x:Number,y:Number,z:Number, visible:Boolean = false):void		{			this._scene = scene;			this._model = model;			this._position = new Number3D(x,y,z);			this._visible = visible;			this._id = String(getTimer());			if(visible){				var mat:IMaterial = new ColorMaterial(0xFF0000, {alpha:.6});				this.obj = new Cube({material:mat, width:20, height:20, depth:20, x:x, y:y, z:z, bothsides:false});				this._scene.addChild(this.obj);				this.setMouseEvents(this.obj);			}			trace("event is: BASE_POSITION"+this._id);		}		public function setMouseEvents(obj:Object3D):void{			obj.addOnMouseDown(this.onPressMouse);			obj.addOnMouseMove(this.onMoveMouse);			obj.addOnMouseOut(this.onOutMouse);			obj.addOnMouseOver(this.onOverMouse);			obj.addOnMouseUp(this.onUpMouse);		}		public function onPressMouse(event:MouseEvent3D){			//trace("press base");			var totalBones:int = 0;						for (var i:int = 0;i<this._skeleton.length;i++){				totalBones += this._skeleton[i].bones.length;			}			trace("Base as"+this._skeleton.length+" chains, a total bone count of :"+totalBones);		}		public function onMoveMouse(event:MouseEvent3D){			//trace("move base");		}		public function onOutMouse(event:MouseEvent3D){			//trace("out base");		}		public function onOverMouse(event:MouseEvent3D){			//trace("over base");		}		public function onUpMouse(event:MouseEvent3D){			//trace("up base");		}						public function get scene():Scene3D		{			return this._scene;		}				public function get skeleton():Array		{			return this._skeleton;		}				public function getChain(ID:int):Chain		{			return this._skeleton[ID];		}				public function rotateBone(chainid:Number, boneID:Number, x:Number,y:Number, z:Number):void		{			try{				this._skeleton[chainid][boneID].rotate(x,y,z);			}catch(e:Error){				trace("unvalid boneid or chainid, no bone here sorry...");			}		}				public function addChain(position:Number3D):int		{			var _chain:Chain = new Chain(position, this._id, this);			this._skeleton.push(_chain);			return this._skeleton.length-1;		}				public function addBone(length:Number, verticelist:Array, chainid:int = 999 ):Bone		{			var x:int = 0;			var y:int = 0;			var z:int = 0;			var extremity:Boolean;			try{				if(chainid == 999 || this._skeleton.length-1>chainid ){					chainid = this.addChain(this._position);									} else{					var lastbone:Bone = this._skeleton[chainid].lastbone;					x = lastbone.x;					y = lastbone.y+lastbone.length;					z = lastbone.z;				}				//trace("XXX add bone XXXX");				//trace("chainid :"+chainid);				//trace("bone instance: "+(this._skeleton[chainid]));				//trace("");								var mat:IMaterial;				if(this._visible){					mat = new ColorMaterial(0x0000FF, {alpha:.6});				}				var bone:Bone = this._skeleton[chainid].addBone(x,y,z,length, true, chainid, verticelist, this._visible, mat);				if(this._visible){					bone.setMouseEvents();					this._scene.addChild(bone);									}				return bone;			} catch (e:Error){				trace("error while adding new bone to chain...");			}			return null;		}				public function get position():Number3D		{			return this._position;		}				public function set position(nposition:Number3D):void		{						var offset:Number3D =  Number3D.sub(nposition, this._position);						this._position.x = nposition.x;			this._position.y = nposition.y;			this._position.z = nposition.z;			if(this._visible){				this.obj.x = this._position.x;				this.obj.y = this._position.y;				this.obj.z = this._position.z;			}			var baseEvent:IKEvent = new IKEvent("BASE_POSITION"+this._id);			baseEvent.oData = {position:this._position, offset:offset};			this.dispatchEvent(baseEvent);		}    }}