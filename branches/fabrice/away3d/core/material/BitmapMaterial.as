package away3d.core.material{    import away3d.core.*;    import away3d.core.math.*;    import away3d.core.proto.*;    import away3d.core.draw.*;    import away3d.core.render.*;    import flash.display.*;    import flash.geom.*;		//added	//import flash.geom.ColorTransform;	//import flash.geom.Transform;	import away3d.core.material.*;	//end added    public class BitmapMaterial implements ITriangleMaterial, IUVMaterial    {        public var bitmap:BitmapData;        public var smooth:Boolean;        public var debug:Boolean;        public var repeat:Boolean;                public function get width():Number        {            return bitmap.width;        }        public function get height():Number        {            return bitmap.height;        }                public function BitmapMaterial(bitmap:BitmapData, init:Object = null)        {            this.bitmap = bitmap;                        init = Init.parse(init);            smooth = init.getBoolean("smooth", false);            debug = init.getBoolean("debug", false);            repeat = init.getBoolean("repeat", false);        }        public function renderTriangle(tri:DrawTriangle, session:RenderSession):void        {            var mapping:Matrix = tri.texturemapping || tri.transformUV(this);            var v0:Vertex2D = tri.v0;            var v1:Vertex2D = tri.v1;            var v2:Vertex2D = tri.v2;			           // var graphics:Graphics = session.graphics;		   var sprite:Sprite = session.sprite;		   var graphics:Graphics = sprite.graphics;			             RenderTriangle.renderBitmap(graphics, bitmap, mapping.a, mapping.b, mapping.c, mapping.d, mapping.tx, mapping.ty, v0.x, v0.y, v1.x, v1.y, v2.x, v2.y, smooth, repeat);						 						//if(oShader.light != ""){				 				//if(oShader.light == "flat"){					//try{ 						var flatlightcolor:Number = AmbientLight.getPolygonColor([v0, v1, v2], AmbientLight.lightcolor);						var ambient:Number = AmbientLight.ambientvalue;						 						var a:Number = -255 + ((flatlightcolor >> 24 & 0xFF)*2)+ambient;						var r:Number = -255 + ((flatlightcolor >> 16 & 0xFF)*2)+ambient;						var g:Number = -255 + ((flatlightcolor >> 8 & 0xFF)*2)+ambient;						var b:Number = -255 + ((flatlightcolor & 0xFF)*2)+ambient;						 						 sprite.transform.colorTransform = new ColorTransform(1,1,1,1,r,g,b,1);//new ColorTransform(1,1,1,1,r,g,b,1);											//} catch(er:Error){						//trace("bitmap Flat color error: "+er.message);					//}				//}			//}									            if (debug)            {                graphics.lineStyle(2, 0x0000FF);                graphics.moveTo(tri.v0.x, tri.v0.y);                graphics.lineTo(tri.v1.x, tri.v1.y);                graphics.lineTo(tri.v2.x, tri.v2.y);                graphics.lineTo(tri.v0.x, tri.v0.y);            }        }        public function get visible():Boolean        {            return true;        }     }}