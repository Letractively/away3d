package away3d.core.material{    import away3d.core.*;    import away3d.core.math.*;    import away3d.core.proto.*;    import away3d.core.draw.*;    import away3d.core.render.*;    import flash.display.*;    import flash.geom.*;	    public class PointBitmapMaterial implements ITriangleMaterial, IUVMaterial    {         		public var dest_bmd:BitmapData;		public var offsetX:Number;		public var offsetY:Number;        public var debug:Boolean;		public var color:Number;		public var size:Number;		public var rect:Rectangle;                public function get width():Number        {            return this.size;        }        public function get height():Number        {            return this.size;        }                public function PointBitmapMaterial(dest_bmd:BitmapData, color:Number, offsetX:Number, offsetY:Number, size:int = 1, init:Object = null)        {			this.dest_bmd = dest_bmd;			this.offsetX=offsetX;			this.offsetY=offsetY;            this.color = color;			this.size = size;			this.rect = new Rectangle(offsetX-size/2, offsetY-size/2, size/2, size/2);            init = Init.parse(init);            debug = init.getBoolean("debug", false);        }        public function renderTriangle(tri:DrawTriangle, session:RenderSession):void        {            var mapping:Matrix = tri.texturemapping || tri.transformUV(this);			var a2:Number = tri.v1.x - tri.v0.x;            var b2:Number = tri.v1.y - tri.v0.y;            var c2:Number = tri.v2.x - tri.v0.x;            var d2:Number = tri.v2.y - tri.v0.y;			           	var matrix:Matrix = new Matrix(mapping.a*a2 + mapping.b*c2,                                            mapping.a*b2 + mapping.b*d2,                                            mapping.c*a2 + mapping.d*c2,                                            mapping.c*b2 + mapping.d*d2,                                           mapping.tx*a2 + mapping.ty*c2 + tri.v0.x,                                            mapping.tx*b2 + mapping.ty*d2 + tri.v0.y);			if(this.size <= 1){				this.dest_bmd.setPixel32(tri.v0.x+this.offsetX, tri.v0.y+this.offsetY, this.color);				this.dest_bmd.setPixel32(tri.v1.x+this.offsetX, tri.v1.y+this.offsetY, this.color);				this.dest_bmd.setPixel32(tri.v2.x+this.offsetX, tri.v2.y+this.offsetY, this.color);			}else{				this.dest_bmd.fillRect(new Rectangle(offsetX-(size/2)+tri.v0.x, offsetY-(size/2)+tri.v0.y, size/2, size/2), this.color);				this.dest_bmd.fillRect(new Rectangle(offsetX-(size/2)+tri.v1.x, offsetY-(size/2)+tri.v1.y, size/2, size/2), this.color);				this.dest_bmd.fillRect(new Rectangle(offsetX-(size/2)+tri.v2.x, offsetY-(size/2)+tri.v2.y, size/2, size/2), this.color);			}        }        public function get visible():Boolean        {            return true;        }     }}