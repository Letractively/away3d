package away3d.core.material{    import away3d.core.*;    import away3d.core.math.*;    import away3d.core.proto.*;    import away3d.core.draw.*;    import away3d.core.render.*;    import flash.display.*;    import flash.geom.*;		import away3d.core.material.*;	    public class PointBitmapMaterial implements ITriangleMaterial, IUVMaterial    {         		public var dest_bmd:BitmapData;		public var offsetX:Number;		public var offsetY:Number;        public var debug:Boolean;		public var size:Number;		public var rect:Rectangle;		private var cleaner:Object;		private var oShader:Object;		private var oColor:Object;                public function get width():Number        {            return this.size;        }        public function get height():Number        {            return this.size;        }		public function get clear():Boolean        {            this.cleaner.clear();			return true;        }                public function PointBitmapMaterial(dest_bmd:BitmapData, color:Number, offsetX:Number, offsetY:Number, size:int = 1, oShader:Object = null,init:Object = null)        {			this.dest_bmd = dest_bmd;			this.offsetX=offsetX;			this.offsetY=offsetY;          			this.size = size;			this.rect = new Rectangle(offsetX-size/2, offsetY-size/2, size/2, size/2);            init = Init.parse(init);            debug = init.getBoolean("debug", false);			this.oShader = oShader;			this.cleaner = new BitmapCleaner(this.dest_bmd, 0x00);			 			this.oColor = new Object();			this.oColor.color = color;			//this.oColor.alpha = color >> 24 & 0xFF;			this.oColor.r = color >> 16 & 0xFF;			this.oColor.g = color >> 8 & 0xFF;			this.oColor.b = color & 0xFF;			         }        public function renderTriangle(tri:DrawTriangle, session:RenderSession):void        {            var mapping:Matrix = tri.texturemapping || tri.transformUV(this);			var a2:Number = tri.v1.x - tri.v0.x;            var b2:Number = tri.v1.y - tri.v0.y;            var c2:Number = tri.v2.x - tri.v0.x;            var d2:Number = tri.v2.y - tri.v0.y;			           	var matrix:Matrix = new Matrix(mapping.a*a2 + mapping.b*c2,                                            mapping.a*b2 + mapping.b*d2,                                            mapping.c*a2 + mapping.d*c2,                                            mapping.c*b2 + mapping.d*d2,                                           mapping.tx*a2 + mapping.ty*c2 + tri.v0.x,                                            mapping.tx*b2 + mapping.ty*d2 + tri.v0.y);			var colorpoint:Number = this.oColor.color; 			if(oShader != null){				if(oShader.method == "flat"){										this.oShader.colorpoint = AmbientLight.getPolygonColor([tri.v0, tri.v1, tri.v2], AmbientLight.lightcolor);					var r:Number = this.oShader.colorpoint >> 16 & 0xFF;					var g:Number = this.oShader.colorpoint >> 8 & 0xFF;					var b:Number = this.oShader.colorpoint & 0xFF;							colorpoint = Number("0x"+ ((this.oColor.r+r)/2).toString(16) + ((this.oColor.g+g)/2).toString(16) + ((this.oColor.b+b)/2).toString(16))									}			} else {				try{					colorpoint = AmbientLight.getPolygonColor([tri.v0, tri.v1, tri.v2], colorpoint);				} catch(e:Error){					colorpoint = this.oColor.color;				}			}						if(this.size <= 1){				this.dest_bmd.setPixel32(tri.v0.x+this.offsetX, tri.v0.y+this.offsetY, colorpoint);				this.dest_bmd.setPixel32(tri.v1.x+this.offsetX, tri.v1.y+this.offsetY, colorpoint);				this.dest_bmd.setPixel32(tri.v2.x+this.offsetX, tri.v2.y+this.offsetY, colorpoint);				this.cleaner.update(tri.v0.x+this.offsetX, tri.v0.y+this.offsetY, tri.v1.x+this.offsetX, tri.v1.y+this.offsetY, tri.v2.x+this.offsetX, tri.v2.y+this.offsetY);			}else{				var half:int = size/2;				var left = offsetX-(half);				var right = offsetY-(half);				this.dest_bmd.fillRect(new Rectangle(left+tri.v0.x, right+tri.v0.y, half, half), colorpoint);				this.dest_bmd.fillRect(new Rectangle(left+tri.v1.x, right+tri.v1.y, half, half), colorpoint);				this.dest_bmd.fillRect(new Rectangle(left+tri.v2.x, right+tri.v2.y, half, half), colorpoint);				this.cleaner.update(left+tri.v0.x+(half), right+tri.v0.y+(half),left+tri.v1.x+(half), right+tri.v1.y+(half),left+tri.v2.x+(half), right+tri.v2.y+(half))			}			        }        public function get visible():Boolean        {            return true;        }     }}