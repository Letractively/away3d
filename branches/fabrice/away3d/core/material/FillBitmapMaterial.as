package away3d.core.material{    import away3d.core.*;    import away3d.core.math.*;    import away3d.core.proto.*;    import away3d.core.draw.*;    import away3d.core.render.*;    import flash.display.*;    import flash.geom.*;		import away3d.core.material.BitmapCleaner;     public class FillBitmapMaterial implements ITriangleMaterial, IUVMaterial    {		public var dest_bmd:BitmapData;		public var offsetX:Number;		public var offsetY:Number;        public var debug:Boolean;		private var cleaner:Object;		public var oLineColor:Object;		public var oFillColor:Object;		public var oShader:Object;                public function get width():Number        {            return this.dest_bmd.width;        }        public function get height():Number        {            return this.dest_bmd.height;        }		                public function FillBitmapMaterial(dest_bmd:BitmapData, offsetX:Number, offsetY:Number, fillcolor:Number= 0xCCCCCCCC, linecolor:Number = -1, oShader:Object = null)        {         			this.dest_bmd = dest_bmd;			this.offsetX=offsetX;			this.offsetY=offsetY;			this.cleaner = new BitmapCleaner(this.dest_bmd, 0x00);                      //  init = Init.parse(init);          //  debug = init.getBoolean("debug", false);						this.oShader = oShader;			this.cleaner = new BitmapCleaner(this.dest_bmd, 0x00);			 			this.oFillColor = new Object();						this.oFillColor.fillcolor = fillcolor;			this.oFillColor.a = fillcolor >> 24 & 0xFF;			this.oFillColor.r = fillcolor >> 16 & 0xFF;			this.oFillColor.g = fillcolor >> 8 & 0xFF;			this.oFillColor.b = fillcolor & 0xFF;						this.oLineColor = new Object();			this.oLineColor.linecolor = linecolor;			this.oLineColor.a = linecolor >> 24 & 0xFF;			this.oLineColor.r = linecolor >> 16 & 0xFF;			this.oLineColor.g = linecolor >> 8 & 0xFF;			this.oLineColor.b = linecolor & 0xFF;        }        public function renderTriangle(tri:DrawTriangle, session:RenderSession):void        {			             var mapping:Matrix = tri.texturemapping || tri.transformUV(this);			 			var a2:Number = (tri.v1.x+this.offsetX) - (tri.v0.x+this.offsetX);            var b2:Number = (tri.v1.y+this.offsetY) - (tri.v0.y+this.offsetY);            var c2:Number = (tri.v2.x+this.offsetX) - (tri.v0.x+this.offsetX);            var d2:Number = (tri.v2.y+this.offsetY) - (tri.v0.y+this.offsetY);           	var matrix:Matrix = new Matrix(mapping.a*a2 + mapping.b*c2,                                            mapping.a*b2 + mapping.b*d2,                                            mapping.c*a2 + mapping.d*c2,                                            mapping.c*b2 + mapping.d*d2,                                           mapping.tx*a2 + mapping.ty*c2 + (tri.v0.x+this.offsetX) ,                                           mapping.tx*b2 + mapping.ty*d2 + (tri.v0.y+this.offsetY) );			var x0 = tri.v0.x+this.offsetX;			var y0 = tri.v0.y+this.offsetY;			var x1 = tri.v1.x+this.offsetX;			var y1 = tri.v1.y+this.offsetY;			var x2 = tri.v2.x+this.offsetX;			var y2 = tri.v2.y+this.offsetY;						this.cleaner.update(x0, y0, x1, y1, x2, y2)									var fillcolor:Number = this.oFillColor.fillcolor; 						if(tri.normal == null){			 	tri.normal = AmbientLight.getNormal([tri.v0, tri.v1, tri.v2]);			}						if(this.oShader != null){				if(oShader.method == "flat"){					this.oShader.fillcolor = AmbientLight.getPolygonColor([tri.v0, tri.v1, tri.v2], AmbientLight.lightcolor, tri.normal);										var a:Number =  oShader.fillcolor >> 24 & 0xFF;					var r:Number =  oShader.fillcolor >> 16 & 0xFF;					var g:Number =  oShader.fillcolor >> 8 & 0xFF;					var b:Number =  oShader.fillcolor & 0xFF;					fillcolor = (this.oFillColor.a+a)/2 << 24 | (this.oFillColor.r+r)/2 << 16 | (this.oFillColor.g+g)/2 << 8 | (this.oFillColor.b+b)/2;				}			} else {				try{					fillcolor = AmbientLight.getPolygonColor([tri.v0, tri.v1, tri.v2], this.oFillColor.fillcolor,  tri.normal);				} catch(e:Error){					fillcolor = this.oFillColor.fillcolor;				}			}						var linecolor:Number = this.oLineColor.linecolor; 			if (this.oLineColor.linecolor != -1){				if(this.oShader != null){					if(oShader.method == "flat"){						this.oShader.linecolor = AmbientLight.getPolygonColor([tri.v0, tri.v1, tri.v2], AmbientLight.lightcolor,  tri.normal);												a =  oShader.linecolor >> 24 & 0xFF;						r =  oShader.linecolor >> 16 & 0xFF;						g =  oShader.linecolor >> 8 & 0xFF;						b =  oShader.linecolor & 0xFF;						linecolor = (this.oLineColor.a+a)/2 << 24 | (this.oLineColor.r+r)/2 << 16 | (this.oLineColor.g+g)/2 << 8 | (this.oLineColor.b+b)/2;					}				} else {					try{						linecolor = AmbientLight.getPolygonColor([tri.v0, tri.v1, tri.v2], this.oLineColor.linecolor,  tri.normal);					} catch(e:Error){						linecolor = this.oLineColor.linecolor;					}				}				 			}						BitmapGraphics.renderFilledTriangle(this.dest_bmd, x0, y0, x1, y1, x2, y2, fillcolor,linecolor,this.cleaner.update(x0, y0, x1, y1, x2, y2));			        }        public function get visible():Boolean        {            return true;        }     }}