package away3d.core.material{    import away3d.core.*;    import away3d.core.math.*;    import away3d.core.proto.*;    import away3d.core.draw.*;    import away3d.core.render.*;    import flash.display.*;    import flash.geom.*;		///test	import away3d.core.material.FaceRendererTrans;	     public class TraceBitmapMaterial implements ITriangleMaterial, IUVMaterial    {        public var source_bmd:BitmapData;		public var dest_bmd:BitmapData;		public var offsetX:Number;		public var offsetY:Number;        public var debug:Boolean;		                 public function get width():Number        {            return this.source_bmd.width;        }        public function get height():Number        {            return this.source_bmd.height;        }                public function TraceBitmapMaterial(source_bmd:BitmapData, dest_bmd:BitmapData, offsetX:Number, offsetY:Number, init:Object = null)        {            this.source_bmd = source_bmd;			this.dest_bmd = dest_bmd;			this.offsetX=offsetX;			this.offsetY=offsetY;                        init = Init.parse(init);            debug = init.getBoolean("debug", false);        }        public function renderTriangle(tri:DrawTriangle, session:RenderSession):void        {			             var mapping:Matrix = tri.texturemapping || tri.transformUV(this);			 			var a2:Number = (tri.v1.x+this.offsetX) - (tri.v0.x+this.offsetX);            var b2:Number = (tri.v1.y+this.offsetY) - (tri.v0.y+this.offsetY);            var c2:Number = (tri.v2.x+this.offsetX) - (tri.v0.x+this.offsetX);            var d2:Number = (tri.v2.y+this.offsetY) - (tri.v0.y+this.offsetY);           	var matrix:Matrix = new Matrix(mapping.a*a2 + mapping.b*c2,                                            mapping.a*b2 + mapping.b*d2,                                            mapping.c*a2 + mapping.d*c2,                                            mapping.c*b2 + mapping.d*d2,                                           mapping.tx*a2 + mapping.ty*c2 + (tri.v0.x+this.offsetX) ,                                           mapping.tx*b2 + mapping.ty*d2 + (tri.v0.y+this.offsetY) );						 //  BitmapGraphics.renderFilledTriangle(this.dest_bmd, tri.v0.x+this.offsetX, tri.v0.y+this.offsetY, tri.v1.x+this.offsetX, tri.v1.y+this.offsetY,tri.v2.x+this.offsetX, tri.v2.y+this.offsetY, 0xFFCCffCC,false);			   BitmapGraphics.renderBitmapTriangle(this.dest_bmd, this.source_bmd, tri.v0.x+this.offsetX, tri.v0.y+this.offsetY, tri.v1.x+this.offsetX, tri.v1.y+this.offsetY,tri.v2.x+this.offsetX, tri.v2.y+this.offsetY, matrix, null,false);			//FaceRendererTrans.renderFace(this.dest_bmd, this.source_bmd, tri.v0.x+this.offsetX, tri.v0.y+this.offsetY, tri.v1.x+this.offsetX, tri.v1.y+this.offsetY,tri.v2.x+this.offsetX, tri.v2.y+this.offsetY, matrix,null, false, 0,0);			if (debug){				 BitmapGraphics.drawLine(this.dest_bmd,tri.v0.x+this.offsetX, tri.v0.y+this.offsetY, tri.v1.x+this.offsetX, tri.v1.y+this.offsetY,0xffff0000);				 BitmapGraphics.drawLine(this.dest_bmd,tri.v1.x+this.offsetX, tri.v1.y+this.offsetY, tri.v2.x+this.offsetX, tri.v2.y+this.offsetY,0xff00ff00);				 BitmapGraphics.drawLine(this.dest_bmd,tri.v2.x+this.offsetX, tri.v2.y+this.offsetY, tri.v0.x+this.offsetX, tri.v0.y+this.offsetY,0xff0000ff);			}        }        public function get visible():Boolean        {            return true;        }     }}