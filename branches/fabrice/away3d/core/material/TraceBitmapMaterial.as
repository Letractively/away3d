package away3d.core.material{    import away3d.core.*;    import away3d.core.math.*;    import away3d.core.proto.*;    import away3d.core.draw.*;    import away3d.core.render.*;    import flash.display.*;    import flash.geom.*;		import away3d.core.material.BitmapCleaner;     public class TraceBitmapMaterial implements ITriangleMaterial, IUVMaterial    {        public var source_bmd:BitmapData;		public var dest_bmd:BitmapData;		public var offsetX:Number;		public var offsetY:Number;        public var debug:Boolean;		private var cleaner:Object;		                 public function get width():Number        {            return this.source_bmd.width;        }        public function get height():Number        {            return this.source_bmd.height;        }						public function get clear():Boolean        {            this.cleaner.clear();			return true;        }                public function TraceBitmapMaterial(source_bmd:BitmapData, dest_bmd:BitmapData, offsetX:Number, offsetY:Number, clear:Boolean= true, color:Number= 0x00, init:Object = null)        {            this.source_bmd = source_bmd;			this.dest_bmd = dest_bmd;			this.offsetX=offsetX;			this.offsetY=offsetY;			this.cleaner = new BitmapCleaner(this.dest_bmd, 0x00);                        init = Init.parse(init);            debug = init.getBoolean("debug", false);        }        public function renderTriangle(tri:DrawTriangle, session:RenderSession):void<<<<<<< .mine        {			 			if(!tri.texturemapping){				 tri.transformUV(this);			} 			//=======        {            var mapping:Matrix = tri.texturemapping || tri.transformUV(this);			>>>>>>> .r144			var x0 = tri.v0.x+this.offsetX;			var y0 = tri.v0.y+this.offsetY;			var x1 = tri.v1.x+this.offsetX;			var y1 = tri.v1.y+this.offsetY;			var x2 = tri.v2.x+this.offsetX;			var y2 = tri.v2.y+this.offsetY;			<<<<<<< .mine			var a2:Number = x1 - x0;            var b2:Number = y1 - y0;            var c2:Number = x2 - x0;            var d2:Number = y2 - y0;           	var matrix:Matrix = new Matrix(tri.texturemapping.a*a2 + tri.texturemapping.b*c2,                                            tri.texturemapping.a*b2 + tri.texturemapping.b*d2,                                            tri.texturemapping.c*a2 + tri.texturemapping.d*c2,                                            tri.texturemapping.c*b2 + tri.texturemapping.d*d2,                                           tri.texturemapping.tx*a2 + tri.texturemapping.ty*c2 + x0 ,                                           tri.texturemapping.tx*b2 + tri.texturemapping.ty*d2 + y0 );=======			var a2:Number = x1 - x0;            var b2:Number = y1 - y0;            var c2:Number = x2 - x0;            var d2:Number = y2 - y0;           	var matrix:Matrix = new Matrix(mapping.a*a2 + mapping.b*c2,                                            mapping.a*b2 + mapping.b*d2,                                            mapping.c*a2 + mapping.d*c2,                                            mapping.c*b2 + mapping.d*d2,                                           mapping.tx*a2 + mapping.ty*c2 + x0 ,                                           mapping.tx*b2 + mapping.ty*d2 + y0 );						BitmapGraphics.renderBitmapTriangle(this.dest_bmd, this.source_bmd, x0, y0, x1, y1, x2, y2, matrix, null, this.cleaner.update(x0, y0, x1, y1, x2, y2));>>>>>>> .r144						 BitmapGraphics.renderBitmapTriangle(this.dest_bmd, this.source_bmd, x0, y0, x1, y1, x2, y2, matrix, null, this.cleaner.update(x0, y0, x1, y1, x2, y2));						if (debug){				 BitmapGraphics.drawLine(this.dest_bmd,x0, y0, x1, y1, 0xffff0000);				 BitmapGraphics.drawLine(this.dest_bmd, x1, y1, x2, y2, 0xff00ff00);				 BitmapGraphics.drawLine(this.dest_bmd, x2, y2, x0, y0, 0xff0000ff);			}			        }        public function get visible():Boolean        {            return true;        }     }}