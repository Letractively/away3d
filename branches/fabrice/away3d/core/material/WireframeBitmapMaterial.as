package away3d.core.material{    import away3d.core.*;    import away3d.core.math.*;    import away3d.core.proto.*;    import away3d.core.draw.*;    import away3d.core.render.*;    import flash.display.*;    import flash.geom.*;	    public class WireframeBitmapMaterial implements ITriangleMaterial, IUVMaterial    {		public var dest_bmd:BitmapData;		private var cleaner:Object;		private var oShader:Object;                public function get width():Number        {            return this.dest_bmd.width;        }        public function get height():Number        {            return this.dest_bmd.height;        }		        public function clear():void        {            this.cleaner.clear();        }		        public function WireframeBitmapMaterial(dest_bmd:BitmapData, color:Number, init:Object = null)        {				this.dest_bmd = dest_bmd;			this.oShader = new Object();			this.oShader.light = (!init.light)? "" : init.light;			this.oShader.offsetX = (!init.offsetX)? 0 : init.offsetX;			this.oShader.offsetY = (!init.offsetY)? 0 : init.offsetY;			this.oShader.debug = init.debug;			this.oShader.color = color;			this.oShader.a = color >> 24 & 0xFF;			this.oShader.r = color >> 16 & 0xFF;			this.oShader.g = color >> 8 & 0xFF;			this.oShader.b = color & 0xFF;			this.cleaner = new BitmapCleaner(this.dest_bmd, 0x00);        }        public function renderTriangle(tri:DrawTriangle, session:RenderSession):void        {            var mapping:Matrix = tri.texturemapping || tri.transformUV(this);			var a2:Number = tri.v1.x - tri.v0.x;            var b2:Number = tri.v1.y - tri.v0.y;            var c2:Number = tri.v2.x - tri.v0.x;            var d2:Number = tri.v2.y - tri.v0.y;			           	var matrix:Matrix = new Matrix(mapping.a*a2 + mapping.b*c2,                                            mapping.a*b2 + mapping.b*d2,                                            mapping.c*a2 + mapping.d*c2,                                            mapping.c*b2 + mapping.d*d2,                                           mapping.tx*a2 + mapping.ty*c2 + tri.v0.x,                                            mapping.tx*b2 + mapping.ty*d2 + tri.v0.y);						this.cleaner.update(tri.v0.x, tri.v0.y, tri.v1.x, tri.v1.y, tri.v2.x, tri.v2.y);						var linecolor:Number = this.oShader.color; 						if(this.oShader.light != ""){							if(this.oShader.light == "flat"){					 					this.oShader.colorpoint = AmbientLight.getPolygonColor([tri.v0, tri.v1, tri.v2], AmbientLight.lightcolor);					var a:Number =  oShader.colorpoint >> 24 & 0xFF;					var r:Number =  oShader.colorpoint >> 16 & 0xFF;					var g:Number =  oShader.colorpoint >> 8 & 0xFF;					var b:Number =  oShader.colorpoint & 0xFF;							linecolor = (this.oShader.a+a)/2 << 24 | (this.oShader.r+r)/2 << 16 | (this.oShader.g+g)/2 << 8 | (this.oShader.b+b)/2;									}			} else {				try{					linecolor = AmbientLight.getPolygonColor([tri.v0, tri.v1, tri.v2], linecolor);				} catch(e:Error){				}			}						BitmapGraphics.drawLine(this.dest_bmd,tri.v0.x+this.oShader.offsetX, tri.v0.y+this.oShader.offsetY, tri.v1.x+this.oShader.offsetX, tri.v1.y+this.oShader.offsetY, linecolor);			BitmapGraphics.drawLine(this.dest_bmd,tri.v1.x+this.oShader.offsetX, tri.v1.y+this.oShader.offsetY, tri.v2.x+this.oShader.offsetX, tri.v2.y+this.oShader.offsetY, linecolor);			BitmapGraphics.drawLine(this.dest_bmd,tri.v2.x+this.oShader.offsetX, tri.v2.y+this.oShader.offsetY, tri.v0.x+this.oShader.offsetX, tri.v0.y+this.oShader.offsetY, linecolor);        }        public function get visible():Boolean        {            return true;        }     }}