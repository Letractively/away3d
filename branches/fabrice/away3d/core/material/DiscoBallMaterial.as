package away3d.core.material{		import away3d.core.*;    import away3d.core.math.*;    import away3d.core.scene.*;    import away3d.core.draw.*;    import away3d.core.render.*;    import away3d.core.utils.*;    import flash.display.*;    import flash.geom.*;	import away3d.core.material.*;    public class DiscoBallMaterial implements ITriangleMaterial, IUVMaterial    {        public var bitmap:BitmapData;		public var rect:Rectangle;        public var smooth:Boolean;        public var debug:Boolean;        public var repeat:Boolean;				public var eTri0:ScreenVertex = new ScreenVertex();		public var eTri1:ScreenVertex = new ScreenVertex();		public var eTri2:ScreenVertex = new ScreenVertex();				internal var mapping:Matrix;                public function get width():Number        {            return bitmap.width;        }        public function get height():Number        {            return bitmap.height;        }                public function DiscoBallMaterial(bitmap:BitmapData, init:Object = null)        {            this.bitmap = bitmap;            init = Init.parse(init);            smooth = init.getBoolean("smooth", false);            debug = init.getBoolean("debug", false);        }        public function renderTriangle(tri:DrawTriangle, session:RenderSession):void        {			var mapping:Matrix = tri.texturemapping || tri.transformUV(this);			var normal:Object = null;			//get normals			var norm1:Number3D			var norm2:Number3D			var norm3:Number3D			try{				norm1 = tri.face.neighbour01.normal;			} catch(e:Error){				norm1 = new Number3D(1,1,1);			}			try{				norm2 = tri.face.neighbour12.normal;			} catch(e:Error){				norm2 = new Number3D(1,1,1);			}			try{				norm3 = tri.face.neighbour20.normal;			} catch(e:Error){				norm3 = new Number3D(1,1,1);			}						var mynormal:Number3D = getActualNormal(tri.v0,tri.v1, tri.v2);			mynormal.normalize(1);			tri.face.normal = mynormal;						eTri0.x =  width * ((((mynormal.x+norm1.x)*.5)*.5) + .5);			eTri0.y =  height * ( ((((mynormal.y+norm1.y)*.5)*.5) + .5));			eTri1.x =  width * ((((mynormal.x+norm2.x)*.5)*.5) + .5);			eTri1.y =  height * ( ((((mynormal.y+norm2.y)*.5)*.5) + .5));			eTri2.x =  width * ((((mynormal.x+norm3.x)*.5)*.5) + .5);			eTri2.y =  height * ( ((((mynormal.y+norm3.y)*.5)*.5) + .5));					var normalmapping:Matrix = new Matrix(eTri1.x - eTri0.x, eTri1.y - eTri0.y, eTri2.x - eTri0.x, eTri2.y - eTri0.y, eTri0.x, eTri0.y);            normalmapping.invert();            			session.renderTriangleBitmap(this.bitmap, normalmapping, tri.v0, tri.v1, tri.v2, smooth, false, session.graphics);						//debug = true;			if (debug){               session.renderTriangleLine(2, 0x8800FF, 1, tri.v0, tri.v1, tri.v2);			   			}        }		 		private function getActualNormal(_v0:ScreenVertex, _v1:ScreenVertex, _v2:ScreenVertex):Number3D        {                var d1x:Number = _v1.x - _v0.x;                var d1y:Number = _v1.y - _v0.y;                var d1z:Number = _v1.z - _v0.z;                            var d2x:Number = _v2.x - _v0.x;                var d2y:Number = _v2.y - _v0.y;                var d2z:Number = _v2.z - _v0.z;                            var pa:Number = d1y*d2z - d1z*d2y;                var pb:Number = d1z*d2x - d1x*d2z;                var pc:Number = d1x*d2y - d1y*d2x;                var pdd:Number = Math.sqrt(pa*pa + pb*pb + pc*pc);                return new Number3D(pa / pdd, pb / pdd, pc / pdd);				        }         public function get visible():Boolean        {            return true;        }     }}