package away3d.core.material{		import away3d.core.*;    import away3d.core.math.*;    import away3d.core.scene.*;    import away3d.core.draw.*;    import away3d.core.render.*;    import away3d.core.utils.*;    import flash.display.*;    import flash.geom.*;	import flash.events.Event;	import away3d.core.material.*;	import away3d.register.AWClassManager;		//debug	import nl.fabrice.draw.BresenhamTracer;	import flash.geom.*;    public class ScenicPhongMaterial implements ITriangleMaterial, IUVMaterial    {        public var bitmap:BitmapData;		public var fxbitmap:BitmapData;		public var rect:Rectangle;        public var smooth:Boolean;        public var debug:Boolean;        public var repeat:Boolean;		public var light:String;		private var aFX:Array;		//private var sprite1:Sprite;		//private var sprite2:Sprite;				private var eTri0x:Number;		private var eTri0y:Number;		private var eTri1x:Number;		private var eTri1y:Number;		private var eTri2x:Number;		private var eTri2y:Number;				internal var mapping:Matrix;		        public function get width():Number        {            return bitmap.width;        }        public function get height():Number        {            return bitmap.height;        }                public function ScenicPhongMaterial(bitmap:BitmapData, init:Object = null, afx:Array = null)        {            this.bitmap = bitmap;			            init = Init.parse(init);            smooth = init.getBoolean("smooth", false);            debug = init.getBoolean("debug", false);            repeat = init.getBoolean("repeat", false);			if(afx != null){				this.fxbitmap = bitmap.clone();				this.rect = new Rectangle(0,0,1,1);				this.aFX = new Array();				this.aFX = afx.concat();			}			if(AWClassManager.getClass("GLOBALLIGHT") == null){				new GlobalLight();			}        }		        public function renderTriangle(tri:DrawTriangle, session:RenderSession):void        {			var mapping:Matrix = tri.texturemapping || tri.transformUV(this);			/*			var source:BitmapData = this.bitmap; 			//fx			if(this.aFX != null){				source = this.fxbitmap;				if(normal == null){					normal = AmbientLight.getNormal([tri.v0, tri.v1, tri.v2]);				}				var CT:ColorTransform;				if(tri.uvrect == null){					tri.transformUV(this);				}				for(var i:int = 0;i<this.aFX.length;i++){ 						this.aFX[i].apply(i,this.bitmap, source, tri.uvrect, normal, CT, session.sprite); 				}			}			session.renderTriangleBitmap(source, mapping, tri.v0, tri.v1, tri.v2, false, false, session.graphics);			*/			session.renderTriangleBitmap(this.bitmap, mapping, tri.v0, tri.v1, tri.v2, false, false, session.graphics);						var i:int;			var normal:Object = null;			 			var onorm:Object = new Object;			var norm:Number3D;						var facenorm:Number3D;			var average:Array;			var xnorm:Number;			var ynorm:Number;			var znorm:Number;			 			// lets rock and roll!			for(var j:int = 1;j<4;j++){				try{										xnorm = 0;					ynorm = 0;					znorm = 0;					average = tri.face["average0"+j];										for(i = 0;i< average.length;i++){												facenorm = average[i].normal;						xnorm += facenorm.x;						ynorm += facenorm.y;						znorm += facenorm.z;					}										onorm["norm"+j] = new Number3D(xnorm/average.length, ynorm/average.length, znorm/average.length);									} catch(e:Error){					onorm["norm"+j] = new Number3D(0.33,0.33,0.33);				}						}						//directional offsets						var offsetX = width;			var offsetY = height;						//translate normals to uv 2D projection			eTri0x =  width * ((onorm.norm1.x*.5) + .5);			eTri0y =  height * (1 - ((-(onorm.norm1.y)*.5) + .5));			eTri1x =  width * ((onorm.norm2.x*.5) + .5);			eTri1y =  height * (1 - ((-(onorm.norm2.y)*.5) + .5));			eTri2x =  width * ((onorm.norm3.x*.5) + .5);			eTri2y =  height * (1 - ((-(onorm.norm3.y)*.5) + .5));						//::::::::::::::::::::::::::			//debug traces			//var scope = AWClassManager.getClass("MAIN");			//BresenhamTracer.getInstance().traceLine(scope.debugtracebmd, eTri0x + offsetX, eTri0y + offsetY, eTri0x + offsetX, eTri0y+ offsetY, 0xCC0000, 1);			//BresenhamTracer.getInstance().traceLine(scope.debugtracebmd, eTri1x + offsetX, eTri1y+ offsetY, eTri2x + offsetX, eTri2y+ offsetY, 0xCC0000, 1);			//BresenhamTracer.getInstance().traceLine(scope.debugtracebmd, eTri0x + offsetX, eTri0y+ offsetY, eTri2x + offsetX, eTri2y+ offsetY, 0xCC0000, 1);			//::::::::::::::::::::::::::						 			//offsets for directional rotations according to light			var oOffsets:Number2D  = tri.face.source._offset;			// hier we substract what we didn't know before : the offset accoring to bitmpa source scales			offsetX = oOffsets.x-(width/2);			offsetY = oOffsets.y-(height/2);		 	 			//trace("source: "+tri.face.source._offset);						eTri0x += offsetX;			eTri0y += offsetY;			eTri1x += offsetX;			eTri1y += offsetY;			eTri2x += offsetX;			eTri2y += offsetY;			 			// generates new projection			var normalmapping:Matrix = new Matrix(eTri1x - eTri0x, eTri1y - eTri0y, eTri2x - eTri0x, eTri2y - eTri0y, eTri0x, eTri0y);            normalmapping.invert();						//			//session.sprite.blendMode = BlendMode.LAYER;			//session.sprite1.blendMode = BlendMode.NORMAL;			session.renderTriangleBitmap(AWClassManager.getClass("GLOBALLIGHT").source, normalmapping, tri.v0, tri.v1, tri.v2, false, false, session.graphics2);			session.sprite2.blendMode = BlendMode.MULTIPLY;						//::::::::::::::::::::::::::			//debug traces			 // BresenhamTracer.getInstance().traceLine(scope.debugtracebmd, eTri0x, eTri0y, eTri0x, eTri0y, 0x99CC00, 1);			 // BresenhamTracer.getInstance().traceLine(scope.debugtracebmd, eTri1x, eTri1y, eTri2x, eTri2y, 0x99CC00, 1);			 // BresenhamTracer.getInstance().traceLine(scope.debugtracebmd, eTri0x, eTri0y, eTri2x, eTri2y, 0x99CC00, 1);			//::::::::::::::::::::::::::						if (debug){               session.renderTriangleLine(2, 0x8800FF, 1, tri.v0, tri.v1, tri.v2);			}        }		          public function get visible():Boolean        {            return true;        }     }}