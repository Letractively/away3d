//  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX//  Versie 1.0 AS3, created 06 juni 2007//  Last update: update 07 juni 2007//  Class generates a slider//  Author: Fabrice Closier//  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX//////  example class at the end of this class////package nl.fabrice.widgets{	import flash.display.DisplayObject;	import flash.display.Graphics;	import flash.display.Sprite;	import flash.geom.Point;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.Stage;	//	public class Slider extends Sprite	{		private var slider:Sprite;		private var bar:Sprite;		private var button:Sprite;		private var floatingpoint:Number;		private var multiplyFactor:Number;		private var caption:String;		private var caption_txt:TextField;		private var val:Number;		private var iOffset:Number;		private var linecolor:Number=0x666666;		private var lineThickness:Number=1;		private var fillcolor:Number=0xCCCCCC;		private var scope:Sprite;		private var bar_width:Number;		private var iScale:Number;		private var Escroll:Event;		private var Estartscroll:Event;		private var Estopscroll:Event;		private var isScrolling:Boolean;		private var tf:TextFormat;		//public function Slider()		//{		//}		//Privates		public function start(scope:*,X:Number,Y:Number,iWidth:Number,iScale:Number,iStartVal:Number,iOffset:Number=0,floatingpoint:Number=-1,caption:String = "",tf:TextFormat=null):void		{			 			this.floatingpoint = (floatingpoint >= 0?floatingpoint:-1);			this.caption=caption;			this.slider=scope.addChild(this);			this.slider.x = X;			this.slider.y = Y;			this.bar_width=iWidth;			this.iScale=iScale;			this.iOffset=iOffset;			this.val=iStartVal - this.iOffset;			this.buildSlider(iStartVal - this.iOffset,tf);			this.Escroll=new Event("SCROLL");			this.Estartscroll=new Event("STARTSCROLL");			this.Estopscroll=new Event("STOPSCROLL");			if(this.caption != ""){				this.buildTextField();				if(this.tf!= null){					this.tf= tf;				}			}			this.value = this.val;		}		private function buildTextField():void{			this.caption_txt = new TextField();			this.caption_txt.textColor = 0x000000; 			this.caption_txt.x = 0;			this.caption_txt.y = 0;			this.caption_txt.text = this.caption;			this.caption_txt.autoSize = "left";			if(!this.tf){				this.tf = new TextFormat();				this.tf.size = 10;				this.tf.align = "left";				this.tf.font = "Verdana";			}			this.caption_txt.setTextFormat(this.tf);			this.button.y += this.caption_txt.textHeight+15;			this.bar.y += this.caption_txt.textHeight+15;			this.slider.addChild(this.caption_txt);		}		private function update():void		{			var nowx = this.button.x;			var multiplier:Number=(this.bar_width - this.button.width) / this.iScale;			switch (this.floatingpoint) {				case 0 :					this.val=Math.floor(nowx / multiplier) + this.iOffset;					break;				case -1 :					this.val=nowx / multiplier + this.iOffset;					break;				default :					var strFactor:String = "1";					for (var x = 0; x < this.floatingpoint; x++) {						strFactor += "0";					}					this.multiplyFactor = Number(strFactor);					this.val=Math.round(nowx / multiplier * this.multiplyFactor) / this.multiplyFactor + this.iOffset;			}			if(this.caption_txt != null){				this.caption_txt.text = this.caption+": "+ this.val;				if(this.tf == null){					//why the hell do i need to set it again?					this.tf = new TextFormat();					this.tf.size = 10;					this.tf.align = "left";					this.tf.font = "Verdana";				}				this.caption_txt.setTextFormat(this.tf);			}			this.dispatchEvent(this.Escroll);		}		private function startScroll(event:MouseEvent):void		{			this.dispatchEvent(this.Estartscroll);			this.isScrolling=true;			this.stage.addEventListener(MouseEvent.MOUSE_MOVE, this.updateScroll);			this.stage.addEventListener(MouseEvent.MOUSE_UP, this.stopScroll);		}		private function stopScroll(event:MouseEvent):void		{			dispatchEvent(this.Estopscroll);			this.stage.removeEventListener(MouseEvent.MOUSE_MOVE, this.updateScroll);			this.stage.removeEventListener(MouseEvent.MOUSE_UP, this.stopScroll);		}		private function updateScroll(event:MouseEvent):void		{			var nowx:Number= this.mouseX;			this.button.x= Math.max(Math.min(this.mouseX, this.bar_width - this.button.width), 0);			this.update();		}		private function buildSlider(iStartVal:Number,tf:TextFormat):void		{			this.bar=new Sprite();			this.bar.name="bar";			var bar_g:Graphics=this.bar.graphics;			bar_g.lineStyle(this.lineThickness,this.linecolor);			bar_g.moveTo(0,0);			bar_g.lineTo(this.bar_width,0);			this.slider.addChild(this.bar);			this.button=new Sprite();			this.button.name="button";			var button_g:Graphics=button.graphics;			button_g.beginFill(this.fillcolor);			button_g.moveTo(0,0);			button_g.lineTo(15,0);			button_g.lineTo(15,10);			button_g.lineTo(0,10);			button_g.lineTo(0,0);			button_g.endFill();			this.slider.addChild(this.button);			this.button.x=0;			this.button.y=this.bar.y - this.button.height / 2;			this.button.addEventListener(MouseEvent.MOUSE_DOWN, this.startScroll);		}		//Publics		public function set float(float:Number):void		{			this.floatingpoint=float < 0?0:floatingpoint;			var strFactor:String="1";			for (var x=0; x < this.floatingpoint; x++) {				strFactor+= "0";			}			this.multiplyFactor=Number(strFactor);		}		public function get float():Number		{			return this.floatingpoint;		}		public function set scale(val:Number):void		{			this.iScale = val;		}		public function get scale():Number		{			return this.iScale;		}		public function set offset(val:Number):void		{			this.iOffset = val;		}		public function get offset():Number		{			return this.iOffset;		}		public function set colors(oColor:Object):void		{			this.linecolor=oColor.linecolor;			this.fillcolor=oColor.fillcolor;		}		public function get colors():Object		{			return {linecolor:this.fillcolor, fillcolor:this.linecolor};		}		public function get value():Number		{			return this.val;		}		public function get procent():Number		{			return (this.value/(this.scale-this.offset))*100;		}		public function set value(val:Number):void		{			var multiplier:Number = (this.bar_width - this.button.width) / this.iScale;			this.button.x = multiplier * val;			this.val=val;			this.update();		}	}}/*//EXAMPLEpackage nl.projects{	import flash.display.Sprite;	import nl.fabrice.widgets.Slider;	import flash.events.Event;	import flash.events.MouseEvent;	//	public class SliderDev extends Sprite{		private var container:Sprite;		private var mySlider;		//		public function SliderDev(){			this.container = new Sprite();			this.addChild(container);			this.addSlider();		}		private function addSlider():void{			this.mySlider = new Slider();			this.mySlider.start(this.container, 50, 50, 250, 5000, 2500, 0, 2,"test");			this.mySlider.addEventListener("SCROLL",onScroll);			this.mySlider.addEventListener("STARTSCROLL",onStartScroll);			this.mySlider.addEventListener("STOPSCROLL",onStopScroll);		}		private function onStartScroll(e:Event):void{			trace("<<<<<<<<<<<<<<   onStartScroll");		}		private function onStopScroll(e:Event):void{			trace("<<<<<<<<<<<<<<   onStopScroll");			//this.mySlider.value = 200;		}		private function onScroll(e:Event):void{			trace("<<<<<<<<<<<<<<   onScroll"+this.mySlider.value);		}	}}*/