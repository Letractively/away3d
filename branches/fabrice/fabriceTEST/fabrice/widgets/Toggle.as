//  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX//  Versie 1.1 AS2, 22 november 2006//  Last update: 05 januari 2007//  Author: Fabrice Closier//  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXimport nl.fabrice.text.TextFieldMaker;import nl.tfe.utils.TFEDelegate;import nl.fabrice.draw.Tracer;//class nl.fabrice.widgets.Toggle extends MovieClip {	private var toggle_mc:MovieClip;	private var button_mc:MovieClip;	private var caption:String;	private var bSelected:Boolean;	private var callback:Function;	private var ID:String;	private var fmt:TextFormat;	//	function Toggle() {			}	public function build(strName:String, iX:Number, iY:Number, linkageMC:String, caption:String, bSelected:Boolean, fmt:TextFormat, scope:Object, callback:String):Void {		this.ID = strName;		this.toggle_mc = scope.createEmptyMovieClip(strName + "_mc", scope.getNextHighestDepth());		this.toggle_mc.createEmptyMovieClip("container_mc", 1);		this.toggle_mc._x = iX;		this.toggle_mc._y = iY;		this.callback = TFEDelegate.create(scope, scope[callback]);		this.bSelected = bSelected;		this.fmt = fmt;		this.buildButton(linkageMC, caption);		this.callback(this.bSelected);			}	private function buildButton(linkageMC:String, caption:String):Void {		this.button_mc = this.toggle_mc.container_mc.attachMovie(linkageMC, "button_mc", 1);		this.button_mc.gotoAndStop((this.bSelected) ? 2 : 1);		if (caption) {			var oField:TextField = TextFieldMaker.buildfield(this.toggle_mc.container_mc, "toggletxt", 2, this.button_mc._width + 4, 12, 250, 20, caption, 0x000000, this.fmt);			oField._y = (this.button_mc._height - oField.textHeight)/2;			var oMc:MovieClip = this.toggle_mc.createEmptyMovieClip("mask_mc", 3);			Tracer.drawKader(oMc, 0, 0, this.toggle_mc._width, this.toggle_mc._height, 0x000000, 100);			this.toggle_mc.container_mc.setMask(oMc);						oMc.onPress = TFEDelegate.create(this, this.doToggle, true);			oMc.onReleaseOutside = oMc.onRollOut = TFEDelegate.create(this, this.doToggle, false);		} else {			this.button_mc.onPress = TFEDelegate.create(this, this.doToggle, true);			this.button_mc.onReleaseOutside = this.button_mc.onRollOut = TFEDelegate.create(this, this.doToggle, false);		}	}	private function doToggle(bDoToogle:Boolean):Void {		if (bDoToogle) {			this.bSelected = !this.bSelected;		}		this.button_mc.gotoAndStop((this.bSelected) ? 2 : 1);		if(bDoToogle){		 	this.callback(this.bSelected);		}	}	public function getState():Boolean {		return this.bSelected;	}	public function setState(bSelected:Boolean):Void {		this.bSelected = bSelected;		this.doToggle();	}	public function setVisible(bShow:Boolean):Void{		this.toggle_mc._visible = bShow;	}}