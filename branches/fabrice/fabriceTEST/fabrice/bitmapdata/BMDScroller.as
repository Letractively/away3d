//:::::::::::::::::::::::::::::::::::::::::::::::::::::////	BMDScroller AS3 : created 06 september 2006//  class generates returns an offset tiling of a given bmd//  versie 1.1//	Last update: 06 April 2006//  Author Fabrice Closier////:::::::::::::::::::::::::::::::::::::::::::::::::::::X//package nl.fabrice.bitmapdata {	//import flash.display.BitmapData;import flash.geom.Rectangle;import flash.geom.Point;//public class BMDScroller {	//	private var source_bmd:BitmapData;	private var oCoordinates:Object;	private var id:String;	private var oRect:Rectangle;	private var oFillRect:Rectangle;	private var oPoint:Point;	//	function BMDScroller() {	}	public function buildNewScroll(id:String, w:Number, h:Number, source:BitmapData, xOffset:Number, yOffset:Number):Boolean {		if (w > 2800 || h > 2800) {			trace("Error, view size exceeding 2800");			return false;		} else if (!w || !h) {			trace("Error, view width or size missing");			return false;		} else if (!source) {			trace("Error, source bitmapdata is undefined");			return false;		} else if (w > source.width || h > source.height) {			var bMax:Boolean = false;			var nh:Number = 0;			var nw:Number = 0;			if (w > source.width) {				while (nw < 2800 && nw < w) {					nw += source.width;				}				if (nw > 2800) {					bMax = true;					trace("Error, width view higher than bitmapdata max size of 2800 due to engine tiling correction. Reduce view size or use a bigger source file. Source:" + source.width + " x " + source.height + ", view: " + w + " x " + h);				}			}			if (h > source.height) {				while (nh < 2800 && nh < h) {					nh += source.height;				}				if (nh > 2800) {					bMax = true;					trace("Error, height view higher than bitmapdata max size of 2800 due to engine tiling correction. Reduce view size or use a bigger source file. Source:" + source.width + " x " + source.height + ", view: " + w + " x " + h);				}			}			if (!bMax) {				var tmp_bmd = new BitmapData(nw, nh, source.transparent, 0x00);				var x:int;				var y:int;				for (x = 0; x < nw; x += source.width) {					for (y = 0; y < nh; y += source.height) {						tmp_bmd.copyPixels(source, new Rectangle(0, 0, source.width, source.height), new Point(x, y));					}				}				source.dispose();				source = tmp_bmd.clone();				tmp_bmd.dispose();			} else {				return false;			}		}		this.id = id;		this.source_bmd = source.clone();		this.oRect = new Rectangle(0, 0, w, h);		this.oPoint = new Point(0, 0);		this.prepareCoords(w, h, xOffset, yOffset);		return true;	}	private function prepareCoords(w:Number, h:Number, xOffset:Number = 0, yOffset:Number = 0):void {		this.oCoordinates = new Object();		this.oCoordinates.x = xOffset;		this.oCoordinates.y = yOffset;		this.oCoordinates.width = w;		this.oCoordinates.height = h;		this.oFillRect = new Rectangle(0, 0, w, h);	}	private function wrapSource(destBMD:BitmapData, xOffset:Number, yOffset:Number, bClear:Boolean):void {		if (destBMD.transparent && bClear) {			destBMD.fillRect(this.oFillRect, 0x00000000);		}		// XXXXXXXXXXXX  check bounderies and reset object  XXXXXXXXXXXX           		// -- left		if (this.oRect.x < -(this.source_bmd.width)) {			this.oRect.x = this.source_bmd.width - Math.abs(this.oRect.x);			this.oCoordinates.x = this.oRect.x;		}		// -- right                                                           		if (Math.abs(this.oRect.x) > this.source_bmd.width) {			this.oRect.x = this.oRect.width - (this.oRect.x - (this.source_bmd.width - this.oRect.width));			this.oCoordinates.x = this.oRect.x;		}		// -- top                                                       		if (this.oRect.y < -(this.source_bmd.height)) {			this.oRect.y = this.source_bmd.height - Math.abs(this.oRect.y);			this.oCoordinates.y = this.oRect.y;		}		// -- down                                                         		if (this.oRect.y > this.source_bmd.height) {			this.oRect.y = this.oRect.y - this.source_bmd.height;			this.oCoordinates.y = this.oRect.y;		}		// XXXXXXXXXXXX x,y axis  XXXXXXXXXXXX       		// -- down		if (this.oRect.y > this.source_bmd.height - this.oRect.height) {			//trace("fill down!!" + (this.oRect.y - (this.source_bmd.height - this.oRect.height)));			destBMD.copyPixels(this.source_bmd, new Rectangle(this.oRect.x, 0, this.oRect.width, this.oRect.y - (this.source_bmd.height - this.oRect.height)), new Point(0, Math.abs(this.oRect.height - ((this.oRect.y - (this.source_bmd.height - this.oRect.height))))));		}		// -- top                                                       		if (this.oRect.y < 0) {			//trace("fill top!!" + Math.abs(this.oRect.y));			destBMD.copyPixels(this.source_bmd, new Rectangle(this.oRect.x, (this.source_bmd.height - Math.abs(this.oRect.y)), this.oRect.width, Math.abs(this.oRect.y)), this.oPoint);		}		//-- left                                                       		if (this.oRect.x < 0) {			//trace("fill left!!" + Math.abs(this.oRect.x));			destBMD.copyPixels(this.source_bmd, new Rectangle((this.source_bmd.width - Math.abs(this.oRect.x)), this.oRect.y, Math.abs(this.oRect.x), this.oRect.height), this.oPoint);		}		// -- right                                                            		if (this.oRect.x > this.source_bmd.width - this.oRect.width) {			///trace("fill right!!" + (this.oRect.width - this.oRect.x));			destBMD.copyPixels(this.source_bmd, new Rectangle(0, this.oRect.y, this.oRect.x - (this.source_bmd.width - this.oRect.width), this.oRect.height), new Point(this.oRect.width - (this.oRect.x - (this.source_bmd.width - this.oRect.width)), 0));		}		// XXXXXXXXXXXXXX  quadrans  XXXXXXXXXXXX                                     		// leftTop quadran		if (this.oRect.x < 0 && this.oRect.y < 0) {			destBMD.copyPixels(this.source_bmd, new Rectangle(this.source_bmd.width - Math.abs(this.oRect.x), this.source_bmd.height - Math.abs(this.oRect.y), Math.abs(this.oRect.x), Math.abs(this.oRect.y)), this.oPoint);		}		// downleft quadran       		if (this.oRect.x < 0 && this.oRect.y > 0) {			destBMD.copyPixels(this.source_bmd, new Rectangle(this.source_bmd.width - Math.abs(this.oRect.x), 0, Math.abs(this.oRect.x), Math.abs(this.oRect.y)), new Point(0, Math.abs(this.oRect.height - ((this.oRect.y - (this.source_bmd.height - this.oRect.height))))));		}		// downright quadran       		if (this.oRect.x > (this.source_bmd.width - this.oRect.width) && this.oRect.y > (this.source_bmd.height - this.oRect.height)) {			destBMD.copyPixels(this.source_bmd, new Rectangle(0, 0, this.oRect.x - (this.source_bmd.width - this.oRect.width), Math.abs(this.oRect.y)), new Point(this.oRect.width - (this.oRect.x - (this.source_bmd.width - this.oRect.width)), Math.abs(this.oRect.height - ((this.oRect.y - (this.source_bmd.height - this.oRect.height))))));		}		// upright quadran        		if (this.oRect.x > (this.source_bmd.width - this.oRect.width) && this.oRect.y < 0) {			destBMD.copyPixels(this.source_bmd, new Rectangle(0, this.source_bmd.height - Math.abs(this.oRect.y), this.oRect.x - (this.source_bmd.width - this.oRect.width), Math.abs(this.oRect.y)), new Point(this.oRect.width - (this.oRect.x - (this.source_bmd.width - this.oRect.width)), 0));		}		//        		destBMD.copyPixels(this.source_bmd, this.oRect, this.oPoint);	}	// XXXXXXXXXXXXXXXXXXXXXXXXXXXX	//   PUBLIC FUNCTIONS	// XXXXXXXXXXXXXXXXXXXXXXXXXXXX	public function getCoordinates():Object {		return this.oCoordinates;	}	public function updateXY(x:Number = 0, y:Number = 0):void {		this.oCoordinates.x += x;		this.oCoordinates.y += y;		this.oRect = new Rectangle(this.oCoordinates.x, this.oCoordinates.y, this.oCoordinates.width, this.oCoordinates.height);	}	public function changeXY(x:Number = 0, y:Number = 0):void {		var min:Boolean;		if ((Math.abs(x) / this.source_bmd.width) > 1) {			min = (x < 0);			while (Math.abs(x) > this.source_bmd.width) {				if (min) {					x += this.source_bmd.width;				} else {					x -= this.source_bmd.width;				}			}		}		if ((Math.abs(y) / this.source_bmd.height) > 1) {			min = (y < 0);			while (Math.abs(y) > this.source_bmd.height) {				if (min) {					y += this.source_bmd.height;				} else {					y -= this.source_bmd.height;				}			}		}		this.oCoordinates.x =  x;		this.oCoordinates.y =  y;		this.oRect = new Rectangle(this.oCoordinates.x, this.oCoordinates.y, this.oCoordinates.width, this.oCoordinates.height);	}	public function getBMDUpdate(destBMD:BitmapData, xOffset:Number, yOffset:Number, bClear:Boolean = false):void {		this.wrapSource(destBMD, xOffset, yOffset, bClear);	}}}