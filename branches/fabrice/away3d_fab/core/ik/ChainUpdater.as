package away3d.core.ik{    import away3d.core.ik.Bone;	    public class ChainUpdater{						public static function rotateXYZ(aVertices:Array, angX:Number = 0, angY:Number = 0, angZ:Number = 0):void {			ChainUpdater.rotateX(aVertices, angX);			ChainUpdater.rotateY(aVertices, angY);			ChainUpdater.rotateZ(aVertices, angZ);		}				public static function rotateX(aVertices:Array, angX:Number = 0):void {			if(angX != 0){				var sin:Number = Math.sin(angX);				var cos:Number = Math.cos(angX);				//[1, 0, 0];				//[0, cos, sin];				//[0, -sin, cos];				//for (var i:int = aVertices.length-1; i >-1; i--) {				for (var i:int = aVertices.length-1; i >-1; i--) {					//aVertices[i].x = aVertices[i].x					aVertices[i].y = aVertices[i].y * cos + aVertices[i].z * -sin;					aVertices[i].z = aVertices[i].y * sin + aVertices[i].z * cos;				}			}		}		public static function rotateY(aVertices:Array, angY:Number = 0):void {			if(angY != 0){				var sin:Number = Math.sin(angY);				var cos:Number = Math.cos(angY);				//[cos, 0, sin];				//[0, 1, 0];				//[-sin, 0, cos];				for (var i:int = aVertices.length-1; i >-1; i--) {					aVertices[i].x = aVertices[i].x * cos + aVertices[i].z * sin;					//aVertices[i].y = aVertices[i].y					aVertices[i].z = aVertices[i].x * -sin + aVertices[i].z * cos;				}			}		}		public static function rotateZ(aVertices:Array, angZ:Number = 0):void {			if(angZ != 0){				var sin:Number = Math.sin(angZ);				var cos:Number = Math.cos(angZ);				//[cos, sin, 0];				//[-sin, cos, 0];				//[0, 0, 1];				for (var i:int = aVertices.length-1; i >-1; i--) {					aVertices[i].x = aVertices[i].x * cos + aVertices[i].y * -sin;					aVertices[i].y = aVertices[i].x * sin + aVertices[i].y * cos;					//aVertices[i].z = aVertices[i].z;				}			 			}		}								/*		public static function positionBone(bone1:Bone, bone2:Bone, boneLength:Number):void {			var angle:Number = bone1._rotation * Math.PI / 180;			bone2.x = bone1.x + Math.cos(angle) * boneLength;			bone2.y = bone1.y + Math.sin(angle) * boneLength;		}				public static function updateAsymetrie(baseBone:Bone, targetBone:Bone, boneLength:Number, iOffsetAngle:Number):void {			var angle:Number = (baseBone._rotation + iOffsetAngle) * Math.PI / 180;			targetBone.x = baseBone.x + Math.cos(angle) * boneLength;			targetBone.y = baseBone.y + Math.sin(angle) * boneLength;		}				public static function positionLink(bone1:Bone, bone2:Bone, boneLength:Number):void {			var angle:Number = bone1._rotation * Math.PI / 180;			bone2.x = bone1.x + Math.cos(angle) * boneLength;			bone2.y = bone1.y + Math.sin(angle) * boneLength;		}				public static function reach(bone1:Bone, x:Number, y:Number, boneLength:Number):Object {			var dx:Number = x - bone1.x;			var dy:Number = y - bone1.y;			var angle:Number = Math.atan2(dy, dx);			bone1._rotation = (angle * 180 / Math.PI);			var tx:Number = x - Math.cos(angle) * boneLength;			var ty:Number = y - Math.sin(angle) * boneLength;			return {tx:tx, ty:ty};		}				public static function updateFromBase(baseChainID:String):void {			if (baseChainID != this.chainID) {			this.updateAsymetrie(this.aBase[0], this.aBase[1], this.aBase[2], this.aBase[3]);			this.updateChain(baseChainID);			}		}				public static function updatePositions(x:Number, y:Number):void {			if (x != undefined && !isNaN(x)) {			this.iXOrigin = x;			this.oChain.aLinks[0].instance.x = x;			}			if (y != undefined && !isNaN(y)) {			this.iYOrigin = y;			this.oChain.aLinks[0].instance.y = y;			}			ChainUpdater.updateChain();		}		*/		// total move forwardIK		public static function updateChain(baseChainID:String):void {			/*			//trace("upd chain "+this.chainID);			for (var x:Number = 0; x < this.oChain.aLinks.length; x++) {				ChainUpdater.positionLink(this.oChain.aLinks[x].instance, this.oChain.aLinks[x + 1].instance, this.oChain.aLinks[x + 1].iLength);			}			//if (this.aBaseChildren.length > 0 && this.aBaseChildren != undefined) {			//ChainBuilder.getInstance().updateChildrens(this.aBaseChildren, this.chainID, baseChainID);			//}			*/		}					}}