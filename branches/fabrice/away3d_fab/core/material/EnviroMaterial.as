// Fabrice Closier, v2, oct.2007//package away3d.core.material{	import away3d.core.*;    import away3d.core.math.*;    import away3d.core.scene.*;    import away3d.core.draw.*;    import away3d.core.render.*;    import away3d.core.utils.*;    import flash.display.*;    import flash.geom.*;	import away3d.core.material.*;	import away3d.core.mesh.Vertex;	import away3d.register.AWClassManager;	    public class EnviroMaterial implements ITriangleMaterial, IUVMaterial, IAverage, IPhongLight     {        public var bitmap:BitmapData;		public var enviromap:BitmapData;        public var smooth:Boolean;        public var debug:Boolean;        public var repeat:Boolean;		public var scenelight:Boolean;		public var mySprite:Sprite;				private var eTri0x:Number;		private var eTri0y:Number;		private var eTri1x:Number;		private var eTri1y:Number;		private var eTri2x:Number;		private var eTri2y:Number;				internal var mapping:Matrix;		internal var normalmapping:Matrix = new Matrix();		private var halfW:Number;		private var halfH:Number;		        public function EnviroMaterial( enviromap:BitmapData, bitmap:BitmapData = null, init:Object = null)        {			this.enviromap = enviromap;			if(bitmap != null){				this.bitmap = bitmap;			}			            init = Init.parse(init);            smooth = init.getBoolean("smooth", false);            debug = init.getBoolean("debug", false);            repeat = init.getBoolean("repeat", false);			scenelight = init.getBoolean("scenelight", false);						if(AWClassManager.getClass("GLOBALLIGHT") == null){				new GlobalLight();			}						halfW = (width * .5);			halfH = (height * .5);			         }        public function renderTriangle(tri:DrawTriangle, session:RenderSession):void        {			var mapping:Matrix = tri.texturemapping || tri.transformUV(this);			var i:int;						if(this.bitmap != null){								session.renderTriangleBitmap(this.bitmap, mapping, tri.v0, tri.v1, tri.v2, smooth, repeat, session.graphics);							} else {								session.graphics;			}			var normal:Object = null;			 			var onorm:Object = new Object;			var norm:Number3D;						var facenorm:Number3D;			var average:Array;			var xnorm:Number;			var ynorm:Number;			var znorm:Number;			 			for(var j:int = 1;j<4;j++){								try{										xnorm = 0;					ynorm = 0;					znorm = 0;					average = tri.face["average0"+j];										for(i = 0;i< average.length;i++){						facenorm = average[i].normal;						xnorm += facenorm.x;						ynorm += facenorm.y;						znorm += facenorm.z;					}										onorm["norm"+j] = new Number3D(xnorm/average.length, ynorm/average.length, znorm/average.length);									} catch(e:Error){					onorm["norm"+j] = new Number3D(0.333, 0.333, 0.333);				}							}						eTri0x =  (halfW * onorm.norm1.x) + halfW;			eTri0y =  (halfH * onorm.norm1.y) + halfH;			eTri1x =  (halfW *  onorm.norm2.x) + halfW;			eTri1y =  (halfH * onorm.norm2.y) + halfH;			eTri2x =  (halfW *  onorm.norm3.x) + halfW;			eTri2y =  (halfH * onorm.norm3.y) + halfH;						normalmapping.a=eTri1x - eTri0x;			normalmapping.b=eTri1y - eTri0y;			normalmapping.c=eTri2x - eTri0x;			normalmapping.d=eTri2y - eTri0y;			normalmapping.tx=eTri0x;			normalmapping.ty=eTri0y;            normalmapping.invert();						 			session.renderTriangleBitmap(this.enviromap, normalmapping, tri.v0, tri.v1, tri.v2, false, false, session.graphics2);									if(scenelight){								var offsetX:Number;				var offsetY:Number;				var oOffsets:Number2D  = tri.face.source._offset;								offsetX = oOffsets.x-halfW;				offsetY = oOffsets.y-halfH;								eTri0x += offsetX;				eTri0y += offsetY;				eTri1x += offsetX;				eTri1y += offsetY;				eTri2x += offsetX;				eTri2y += offsetY;								normalmapping.a=eTri1x - eTri0x;				normalmapping.b=eTri1y - eTri0y;				normalmapping.c=eTri2x - eTri0x;				normalmapping.d=eTri2y - eTri0y;				normalmapping.tx=eTri0x;				normalmapping.ty=eTri0y;				normalmapping.invert();				session.renderTriangleBitmap(AWClassManager.getClass("GLOBALLIGHT").source, normalmapping, tri.v0, tri.v1, tri.v2, false, false, session.graphics3);				session.sprite3.blendMode = BlendMode.OVERLAY;			}						if (debug){               session.renderTriangleLine(1, 0x8800FF, 1, tri.v0, tri.v1, tri.v2);   			}        }				 		public function get average():Boolean        {            return true;        }						public function get phonglight():Boolean        {            return true;        }        		        public function get width():Number        {            return enviromap.width;        }				        public function get height():Number        {            return enviromap.height;        }		        public function get visible():Boolean        {            return true;        }     }	}