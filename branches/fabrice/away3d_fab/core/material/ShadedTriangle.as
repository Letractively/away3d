package away3d.core.material{	import flash.display.BitmapData;	import flash.geom.Rectangle;	import flash.geom.Point;	public class ShadedTriangle	{		function ShadedTriangle(){}		 		public static function draw3Gradients(color1:Number, color2:Number, color3:Number, source_bmd:BitmapData, dest_bmd:BitmapData, destrect:Rectangle):void {				var zeroPoint:Point = new Point(0, 0); 				//left to right				var x:int = destrect.x;								var oColor1:Object = new Object();				oColor1.a = color1 >> 24 & 0xFF;				oColor1.r = color1 >> 16 & 0xFF;				oColor1.g = color1 >> 8 & 0xFF;				oColor1.b = color1 & 0xFF;								var oColor2:Object = new Object();				oColor2.a = color2 >> 24 & 0xFF;				oColor2.r = color2 >> 16 & 0xFF;				oColor2.g = color2 >> 8 & 0xFF;				oColor2.b = color2 & 0xFF;								var oColor3:Object = new Object();				oColor3.a = color3 >> 24 & 0xFF;				oColor3.r = color3 >> 16 & 0xFF;				oColor3.g = color3 >> 8 & 0xFF;				oColor3.b = color3 & 0xFF;				//				var a:int;				var r:int;				var g:int;				var b:int;				var xend:int = destrect.right;				/*				var stepxa:int = oColor1.a/destrect.width;				var stepya:int = (oColor1.a-oColor3.a) /destrect.height;				var stepxr:int = (oColor1.r-oColor2.r) /destrect.width;				var stepyr:int = (oColor1.r-oColor3.r) /destrect.height;				var stepxg:int = (oColor1.g-oColor2.g) /destrect.width;				var stepyg:int = (oColor1.g-oColor3.g) /destrect.height;				var stepxb:int = (oColor1.b-oColor2.b) /destrect.width;				var stepyb:int = (oColor1.b-oColor3.b) /destrect.height;				*/				var color:Number;				var yy:int = 1;				var xx:int = 1;																// first color = most left				var stepx1a:int = oColor1.a/100;				var stepx1r:int = oColor1.r/100;				var stepx1g:int = oColor1.g/100;				var stepx1b:int = oColor1.b/100;				// second color = most right				var stepx2a:int = oColor2.a/100;				var stepx2r:int = oColor2.r/100;				var stepx2g:int = oColor2.g/100;				var stepx2b:int = oColor2.b/100;				// third color = most down				var stepy3a:int = oColor3.a/100;				var stepy3r:int = oColor3.r/100;				var stepy3g:int = oColor3.g/100;				var stepy3b:int = oColor3.b/100;								var scol:Number;				var sa:int;				var sr:int;				var sg:int;				var sb:int;				//				var px:int;				var px2:int;				var py:int;				var py2:int;								for (var y:int = destrect.top; y < destrect.bottom; y++) {					py = (yy/destrect.height)*100;					py2 = 100-py;					while (x++<xend){												scol = source_bmd.getPixel32(x,y);						sa = scol >> 24 & 0xFF;						sr = scol >> 16 & 0xFF;						sg = scol >> 8 & 0xFF;						sb = scol & 0xFF;												px = (xx/destrect.width)*100;						px2 = 100-px;												//trace("left "+px);						//trace("right "+px2);						//trace("top "+py);						//trace("down "+py2);						/*						// left to right only						a = ((stepx1a*px)+(stepx2a*px2)+sa)/2;						r = ((stepx1r*px)+(stepx2r*px2)+sr)/2;						g = ((stepx1g*px)+(stepx2g*px2)+sg)/2;						b = ((stepx1b*px)+(stepx2b*px2)+sb)/2;												// top to bottom only						a = ((stepy3a*py)+sa)/2;						r = ((stepy3r*py)+sr)/2;						g = ((stepy3g*py)+sg)/2;						b = ((stepy3b*py)+sb)/2;						*/												a = ((stepx1a*px)+(stepx2a*px2)+(stepy3a*py)+sa)/3;						r = ((stepx1r*px)+(stepx2r*px2)+(stepy3r*py)+sr)/3;						g = ((stepx1g*px)+(stepx2g*px2)+(stepy3g*py)+sg)/3;						b = ((stepx1b*px)+(stepx2b*px2)+(stepy3b*py)+sb)/3;						 						dest_bmd.setPixel(x, y, a << 24 | r << 16 | g << 8 | b);						xx ++;					}					x = destrect.x;					yy++;					xx = 1;				}		}	}}
