package away3d.test;

import flash.ui.Keyboard;
import away3d.containers.Scene3D;
import away3d.containers.ObjectContainer3D;
import flash.events.EventDispatcher;
import away3d.containers.View3D;
import flash.events.KeyboardEvent;
import flash.events.Event;
import flash.display.StageAlign;
import flash.display.Stage;
import flash.events.MouseEvent;
import away3d.core.render.IRenderer;
import away3d.cameras.TargetCamera3D;
import away3d.cameras.HoverCamera3D;
import away3d.core.utils.Debug;
import flash.display.DisplayObject;
import away3d.core.render.AbstractRenderSession;
import flash.display.StageDisplayState;
import flash.display.Sprite;
import flash.text.TextField;
import flash.display.StageScaleMode;
import flash.text.TextFormat;
import flash.text.TextFieldAutoSize;


/**
 * Base class for Away3D demos 
 */
class BaseDemo extends Sprite  {
	
	private var camera:HoverCamera3D;
	private var slide:Slide;
	private var slides:Array<Dynamic>;
	private var slideindex:Float;
	private var centergroup:Sprite;
	private var startlabel:TextField;
	private var titlegroup:Sprite;
	private var statsgroup:Sprite;
	private var infogroup:Sprite;
	private var lefttopgroup:Sprite;
	private var copylabel:TextField;
	private var fpslabel:TextField;
	private var cpulabel:TextField;
	private var trilabel:TextField;
	private var messagelabel:TextField;
	private var titlelabel:TextField;
	private var nextbutton:Button;
	private var prevbutton:Button;
	private var dirty:Bool;
	private var lastrender:Int;
	private var stageWidth:Float;
	private var stageHeight:Float;
	private var active:Bool;
	private var animation:Bool;
	private var scroll:Bool;
	private var time:Int;
	private var view:View3D;
	

	public function new(title:String, ?infogroupheight:Float=410) {
		// autogenerated
		super();
		this.slides = new Array();
		this.slideindex = 0;
		this.dirty = true;
		this.lastrender = 0;
		this.stageWidth = 1;
		this.stageHeight = 1;
		this.active = false;
		this.animation = true;
		this.scroll = true;
		
		
		flash.Lib.current.stage.align = StageAlign.TOP_LEFT;
		flash.Lib.current.stage.scaleMode = StageScaleMode.NO_SCALE;
		//stage.showDefaultContextMenu = false;
		flash.Lib.current.stage.stageFocusRect = false;
		camera = new HoverCamera3D({zoom:3, focus:200, distance:800});
		camera.tiltangle = 10;
		camera.targettiltangle = 40;
		camera.panangle = 0;
		camera.targetpanangle = 230;
		camera.mintiltangle = 0;
		view = new View3D({camera:camera, stats:true});
		addChild(view);
		lefttopgroup = new Sprite();
		addChild(lefttopgroup);
		statsgroup = new Sprite();
		lefttopgroup.addChild(statsgroup);
		statsgroup.addChild(new Panel(5, 5, 400, 70, 0.8));
		fpslabel = new TextField();
		fpslabel.x = 10;
		fpslabel.y = 10;
		fpslabel.defaultTextFormat = new TextFormat("Arial", 16, 0x000000);
		fpslabel.text = "";
		fpslabel.background = true;
		fpslabel.height = 20;
		fpslabel.width = 200;
		fpslabel.backgroundColor = 0xCC0000;
		statsgroup.addChild(fpslabel);
		cpulabel = new TextField();
		cpulabel.x = fpslabel.x;
		cpulabel.y = fpslabel.y + fpslabel.height;
		cpulabel.defaultTextFormat = fpslabel.defaultTextFormat;
		cpulabel.text = "";
		cpulabel.background = true;
		cpulabel.height = 20;
		cpulabel.width = 200;
		cpulabel.backgroundColor = 0x0000CC;
		statsgroup.addChild(cpulabel);
		trilabel = new TextField();
		trilabel.x = cpulabel.x;
		trilabel.y = cpulabel.y + cpulabel.height;
		trilabel.defaultTextFormat = new TextFormat("Arial", 10, 0x000000);
		trilabel.text = "";
		trilabel.height = 22;
		trilabel.width = 380;
		statsgroup.addChild(trilabel);
		infogroup = new Sprite();
		lefttopgroup.addChild(infogroup);
		infogroup.y = statsgroup.height + 4;
		infogroup.addChild(new Panel(5, 5, 250, infogroupheight, 0.8));
		messagelabel = new TextField();
		messagelabel.autoSize = TextFieldAutoSize.LEFT;
		messagelabel.wordWrap = true;
		messagelabel.x = 10;
		messagelabel.y = 10;
		messagelabel.defaultTextFormat = trilabel.defaultTextFormat;
		messagelabel.text = "";
		messagelabel.width = 240;
		messagelabel.multiline = true;
		infogroup.addChild(messagelabel);
		prevbutton = new Button("Prev", 46);
		prevbutton.x = 80;
		prevbutton.y = infogroup.height - 52;
		infogroup.addChild(prevbutton);
		nextbutton = new Button("Next", 46);
		nextbutton.x = prevbutton.x + prevbutton.width + 4;
		nextbutton.y = prevbutton.y;
		infogroup.addChild(nextbutton);
		copylabel = new TextField();
		copylabel.autoSize = TextFieldAutoSize.CENTER;
		copylabel.x = 124;
		copylabel.y = infogroup.height - 30;
		copylabel.defaultTextFormat = new TextFormat("Arial", 10, 0x000000, true);
		copylabel.htmlText = "<p align='center'>Alexander Zadorozhny (c) 2007<br>\n<a href='http://away.kiev.ua/'>http://away.kiev.ua/</a></p>";
		infogroup.addChild(copylabel);
		titlegroup = new Sprite();
		lefttopgroup.addChild(titlegroup);
		titlegroup.x = statsgroup.width + 4;
		titlegroup.addChild(new Panel(5, 5, 360, 36, 0.8));
		titlelabel = new TextField();
		titlelabel.autoSize = TextFieldAutoSize.CENTER;
		titlelabel.x = 180;
		titlelabel.y = 10;
		titlelabel.defaultTextFormat = new TextFormat("Arial", 18, 0x000000, true);
		titlelabel.htmlText = title;
		titlegroup.addChild(titlelabel);
		centergroup = new Sprite();
		addChild(centergroup);
		centergroup.x = flash.Lib.current.stage.stageWidth / 2;
		centergroup.y = flash.Lib.current.stage.stageHeight / 2;
		centergroup.addChild(new Panel(-80, -20, 160, 40, 0.8));
		startlabel = new TextField();
		startlabel.autoSize = TextFieldAutoSize.CENTER;
		startlabel.x = 0;
		startlabel.y = -18;
		startlabel.defaultTextFormat = new TextFormat("Arial", 24, 0x000000, true);
		startlabel.htmlText = "Start demo";
		centergroup.addChild(startlabel);
		flash.Lib.current.stage.addEventListener(Event.ENTER_FRAME, onEnterFrame);
		flash.Lib.current.stage.addEventListener(Event.RESIZE, onResize);
		flash.Lib.current.stage.addEventListener(Event.ACTIVATE, onActivate);
		flash.Lib.current.stage.addEventListener(Event.DEACTIVATE, onDeactivate);
		flash.Lib.current.stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
		flash.Lib.current.stage.addEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheel);
		prevbutton.addEventListener(MouseEvent.CLICK, onPrev);
		nextbutton.addEventListener(MouseEvent.CLICK, onNext);
		this.onResize(null);
		Debug.active = true;
	}

	private function addSlide(title:String, text:String, scene:Scene3D, renderer:IRenderer, session:AbstractRenderSession):Void {
		
		slides.push(new Slide(title, text, scene, renderer, session));
	}

	private function changeSlide():Void {
		
		slide = slides[slideindex];
		dirty = true;
		messagelabel.htmlText = "<font size='16' face='arial'>" + "<p align='center'><b>" + slide.title + "</b></p>" + "<p align='left'>" + slide.desc + "</p>" + "</font>";
		nextbutton.visible = slideindex < slides.length - 1;
		prevbutton.visible = slideindex > 0;
		view.clear();
		view.scene = slide.scene;
		view.renderer = slide.renderer;
		view.session = slide.session;
	}

	private function onNext(event:MouseEvent):Void {
		
		slideindex = Math.min(slides.length - 1, slideindex + 1);
		changeSlide();
	}

	private function onPrev(event:MouseEvent):Void {
		
		slideindex = Math.max(0, slideindex - 1);
		changeSlide();
	}

	private function onEnterFrame(event:Event):Void {
		
		if (slide == null) {
			changeSlide();
		}
		if (!active) {
			return;
		}
		// !!
		dirty = true;
		if (scroll) {
			if (view.mouseX > flash.Lib.current.stage.stageWidth * 0.40) {
				camera.targetpanangle -= 3;
			}
			if (view.mouseX < -flash.Lib.current.stage.stageWidth * 0.40) {
				camera.targetpanangle += 3;
			}
			if (view.mouseY > flash.Lib.current.stage.stageHeight * 0.40) {
				camera.targettiltangle -= 2;
			}
			if (view.mouseY < -flash.Lib.current.stage.stageHeight * 0.40) {
				camera.targettiltangle += 2;
			}
		}
		if (camera.hover()) {
			dirty = true;
		}
		if (!dirty) {
			fpslabel.width = 0;
			cpulabel.width = 0;
			return;
		}
		var start:Int = flash.Lib.getTimer();
		if (animation) {
			time = flash.Lib.getTimer();
		}
		slide.scene.updateTime(time);
		view.render();
		var now:Int = flash.Lib.getTimer();
		var performance:Int = now - lastrender;
		lastrender = now;
		if (performance < 1000) {
			fpslabel.text = "" + Std.int(1000 / (performance + 0.001)) + " fps " + performance + " ms";
			fpslabel.width = 4 * performance;
		}
		var think:Int = now - start;
		if (think < 1000) {
			cpulabel.width = 4 * think;
		}
		trilabel.text = slide.renderer.toString();
		dirty = false;
	}

	private function onResize(event:Event):Void {
		
		view.x = flash.Lib.current.stage.stageWidth / 2;
		view.y = flash.Lib.current.stage.stageHeight / 2;
		stageWidth = flash.Lib.current.stage.stageWidth;
		stageHeight = flash.Lib.current.stage.stageHeight;
		dirty = true;
	}

	private function onActivate(event:Event):Void {
		
		onResize(null);
		active = true;
		centergroup.visible = false;
	}

	private function onDeactivate(event:Event):Void {
		
		active = false;
		fpslabel.width = 0;
		cpulabel.width = 0;
	}

	private function onKeyDown(event:KeyboardEvent):Void {
		
		switch (event.keyCode) {
			case Keyboard.SPACE :
				onNext(null);
			case Keyboard.BACKSPACE :
				onPrev(null);
			case Keyboard.CONTROL :
				lefttopgroup.visible = !lefttopgroup.visible;
			case "F".charCodeAt() :
				if (flash.Lib.current.stage.displayState == StageDisplayState.FULL_SCREEN) {
					flash.Lib.current.stage.displayState = StageDisplayState.NORMAL;
				} else {
					flash.Lib.current.stage.displayState = StageDisplayState.FULL_SCREEN;
				}
			case "X".charCodeAt() :
				Debug.active = !Debug.active;
				if (Debug.active) {
					Debug.clear();
				}
			case "S".charCodeAt() :
				setScroll(!scroll);
			case "Z".charCodeAt() :
				animation = !animation;
				setScroll(animation);
			case Keyboard.NUMPAD_ADD :
				adjustzoom(3);
			case Keyboard.NUMPAD_SUBTRACT :
				adjustzoom(-3);
			

		}
	}

	private function setScroll(value:Bool):Void {
		
		scroll = value;
		if (!scroll) {
			camera.targetpanangle = camera.panangle;
			camera.targettiltangle = camera.tiltangle;
		}
	}

	private function onMouseWheel(event:MouseEvent):Void {
		
		adjustzoom(event.delta);
	}

	private function adjustzoom(delta:Int):Void {
		
		camera.zoom = Math.min(25, Math.max(2, camera.zoom + delta / 3));
	}

}

