package away3d.core.light;

import away3d.containers.View3D;
import away3d.haxeutils.HashMap;
import away3d.lights.PointLight3D;
import away3d.events.Object3DEvent;
import flash.display.Sprite;
import away3d.core.math.Number3D;


/**
 * Point light primitive
 */
class PointLight extends LightPrimitive  {
	public var light(getLight, setLight) : PointLight3D;
	
	private var _light:PointLight3D;
	/**
	 * Positions dictionary for the view positions used by shading materials.
	 */
	public var viewPositions:HashMap<View3D, Number3D>;
	

	/**
	 * A reference to the <code>PointLight3D</code> object used by the light primitive.
	 */
	public function getLight():PointLight3D {
		
		return _light;
	}

	public function setLight(val:PointLight3D):PointLight3D {
		
		_light = val;
		val.addOnSceneTransformChange(updatePosition);
		return val;
	}

	/**
	 * Updates the position of the point light.
	 */
	public function updatePosition(e:Object3DEvent):Void {
		
		clearViewPositions();
	}

	/**
	 * Clears the position dictionaries used in the shading materials.
	 */
	public function clearViewPositions():Void {
		
		viewPositions = new HashMap<View3D, Number3D>();
	}

	/**
	 * Updates the view position.
	 */
	public function setViewPosition(view:View3D):Void {
		
		if (!viewPositions.contains(view)) {
			viewPositions.put(view, new Number3D());
		}
		viewPositions.get(view).clone(view.cameraVarsStore.viewTransformDictionary.get(_light).position);
	}

	// autogenerated
	public function new () {
		super();
		
	}

	

}

