package away3d.core.base;



/**
 * Keyframe animation morpher
 */
class Morpher extends Object3D  {
	
	private var weight:Float;
	private var vertices:Mesh;
	private var _vertices:Array<Dynamic>;
	private var _verticesComp:Array<Dynamic>;
	

	/**
	 * Creates a new <code>Morpher</code> object.
	 *
	 * @param	vertices	A mesh object used to define the starting vertices.
	 */
	public function new(vertices:Mesh) {
		// autogenerated
		super();
		
		
		this.vertices = vertices;
	}

	/**
	 * resets all vertex objects to 0,0,0
	 */
	public function start():Void {
		
		weight = 0;
		_vertices = vertices.geometry.vertices;
		for (__i in 0..._vertices.length) {
			var v:Vertex = _vertices[__i];

			v.reset();
		}

	}

	/**
	 * interpolates the vertex objects position values between the current vertex positions and the external vertex positions
	 * 
	 * @param	comp	The external mesh used for interpolating values
	 * @param	k		The increment used on the weighting value 
	 */
	public function mix(comp:Mesh, k:Float):Void {
		
		weight += k;
		_vertices = vertices.geometry.vertices;
		_verticesComp = comp.geometry.vertices;
		var length:Int = _vertices.length;
		var i:Int = 0;
		while (i < length) {
			_vertices[i].x += _verticesComp[i].x * k;
			_vertices[i].y += _verticesComp[i].y * k;
			_vertices[i].z += _verticesComp[i].z * k;
			
			// update loop variables
			i++;
		}

	}

	/**
	 * resets all vertex objects to the external mesh positions
	 * 
	 * @param	comp	The external mesh used for vertex values
	 */
	public function finish(comp:Mesh):Void {
		
		mix(comp, 1 - weight);
		weight = 1;
	}

}

