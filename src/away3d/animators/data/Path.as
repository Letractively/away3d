package away3d.animators.data{	import away3d.core.math.Number3D;	/**	 * Holds information about a single Path definition.	 */    public class Path    {    	/**    	 * The array that contains the path definition.    	 */        public var aSegments:Array;				/**    	 * The worldAxis of reference    	 */		public var worldAxis:Number3D = new Number3D(0,1,0);    			/**		 * Creates a new <code>Path</code> object.		 * 		 * @param	 segments		An array of a series of number3D's organized in the following fashion. [a,b,c,a,b,c] a = v1, b=anchor, c = v2		 */        public function Path(segments:Array)        {			if(segments.length < 3)				throw new Error("Path array must contain at least 3 Number3D's");			            this.aSegments = [];			for(var i:int = 0; i<segments.length; i+=3){				this.aSegments[i] = new CurveSegment(segments[i], segments[i+1], segments[i+2]) ;			}        }				/**		 * adds a CurveSegment to the path		 * 		 * @param	 v0			A Number3D		 * @param	 va			A Number3D		 * @param	 v1			A Number3D		 */		public function add(cs:CurveSegment):void        {			this.aSegments.push(cs);        }				/**		 * returns the length of the Path elements array		 * 		 * @return	an integer: the length of the Path elements array		 */		public function get length():int        {			return this.aSegments.length;        }				/**		 * returns the Path elements array		 * 		 * @return	an Array: the Path elements array		 */		public function get array():Array        {			return this.aSegments;        }    }}