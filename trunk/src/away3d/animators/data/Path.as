package away3d.animators.data{	import away3d.core.math.Number3D;	/**	 * Holds information about a single Path definition.	 */    public class Path    {    	/**    	 * The array that contains the path definition.    	 */        public var aSegments:Array;				/**    	 * The worldAxis of reference    	 */		public var worldAxis:Number3D = new Number3D(0,1,0);    			/**    	 * Set to true if the smoothPath handler is used. Do not set this variable. Will be used by other classes if the closePath property is set to true in those classes.    	 */        public var smoothed:Boolean;		/**		 * Creates a new <code>Path</code> object.		 * 		 * @param	 aVectors		An array of a series of number3D's organized in the following fashion. [a,b,c,a,b,c etc...] a = v1, b=vc (control point), c = v2		 */        public function Path(aVectors:Array)        {			if(aVectors.length < 3)				throw new Error("Path array must contain at least 3 Number3D's");			            this.aSegments = [];			for(var i:int = 0; i<aVectors.length; i+=3)				this.aSegments.push( new CurveSegment(aVectors[i], aVectors[i+1], aVectors[i+2]) );			         }				/**		 * adds a CurveSegment to the path		 * @see CurveSegment:		 */		public function add(cs:CurveSegment):void        {			this.aSegments.push(cs);        }				/**		 * returns the length of the Path elements array		 * 		 * @return	an integer: the length of the Path elements array		 */		public function get length():int        {			return this.aSegments.length;        }				/**		 * returns the Path elements array		 * 		 * @return	an Array: the Path elements array		 */		public function get array():Array        {			return this.aSegments;        }				/**		 * handler will smooth the curve using averages of the CurveSegments		 * note that this not dynamic, the path values are overwrited		 */		public function smoothPath():void        {			smoothed = true;						var x1:Number;			var y1:Number;			var z1:Number;			var x2:Number;			var y2:Number;			var z2:Number;			for(var i:int = 1; i<this.aSegments.length; i++){								if(this.aSegments[i].v0 == null){					this.aSegments[i].v0 = new Number3D(this.aSegments[i-1].v1.x,this.aSegments[i-1].v1.y,this.aSegments[i-1].v1.z);				}								x1 = (this.aSegments[i].v0.x+this.aSegments[i].v1.x)*.5;				y1 = (this.aSegments[i].v0.y+this.aSegments[i].v1.y)*.5;				z1 = (this.aSegments[i].v0.z+this.aSegments[i].v1.z)*.5;				 				x2 = (this.aSegments[i-1].v0.x+this.aSegments[i-1].v1.x)*.5;				y2 = (this.aSegments[i-1].v0.y+this.aSegments[i-1].v1.y)*.5;				z2 = (this.aSegments[i-1].v0.z+this.aSegments[i-1].v1.z)*.5;								if(this.aSegments[i-1].v1 == null){					this.aSegments[i-1].v1 = new Number3D(x1,y1,z1);				} else{					this.aSegments[i-1].v1.x = x1;					this.aSegments[i-1].v1.y = y1;					this.aSegments[i-1].v1.z = z1;				}								if(this.aSegments[i-1].vc == null){					this.aSegments[i-1].vc = new Number3D(x2, y2, z2);				} else{					this.aSegments[i-1].vc.x = x2;					this.aSegments[i-1].vc.y = y2;					this.aSegments[i-1].vc.z = z2;				}			}			        }		    }}